// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the transaction type in the database.
	Label = "transaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "tx_id"
	// FieldTxNo holds the string denoting the tx_no field in the database.
	FieldTxNo = "tx_no"
	// FieldTxType holds the string denoting the tx_type field in the database.
	FieldTxType = "tx_type"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldTxStatus holds the string denoting the tx_status field in the database.
	FieldTxStatus = "tx_status"
	// FieldTxDate holds the string denoting the tx_date field in the database.
	FieldTxDate = "tx_date"
	// FieldTxAmount holds the string denoting the tx_amount field in the database.
	FieldTxAmount = "tx_amount"
	// FieldPaymentID holds the string denoting the payment_id field in the database.
	FieldPaymentID = "payment_id"
	// EdgeTxItems holds the string denoting the txitems edge name in mutations.
	EdgeTxItems = "txItems"
	// EdgeTxOrder holds the string denoting the txorder edge name in mutations.
	EdgeTxOrder = "txOrder"
	// TxItemFieldID holds the string denoting the ID field of the TxItem.
	TxItemFieldID = "tx_item_id"
	// OrderFieldID holds the string denoting the ID field of the Order.
	OrderFieldID = "order_id"
	// Table holds the table name of the transaction in the database.
	Table = "transactions"
	// TxItemsTable is the table that holds the txItems relation/edge.
	TxItemsTable = "tx_items"
	// TxItemsInverseTable is the table name for the TxItem entity.
	// It exists in this package in order to avoid circular dependency with the "txitem" package.
	TxItemsInverseTable = "tx_items"
	// TxItemsColumn is the table column denoting the txItems relation/edge.
	TxItemsColumn = "transaction_tx_items"
	// TxOrderTable is the table that holds the txOrder relation/edge.
	TxOrderTable = "orders"
	// TxOrderInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	TxOrderInverseTable = "orders"
	// TxOrderColumn is the table column denoting the txOrder relation/edge.
	TxOrderColumn = "transaction_tx_order"
)

// Columns holds all SQL columns for transaction fields.
var Columns = []string{
	FieldID,
	FieldTxNo,
	FieldTxType,
	FieldUserID,
	FieldQuantity,
	FieldTxStatus,
	FieldTxDate,
	FieldTxAmount,
	FieldPaymentID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "transactions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"order_transaction",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// TxType defines the type for the "tx_type" enum field.
type TxType string

// TxType values.
const (
	TxTypeBuy  TxType = "buy"
	TxTypeSell TxType = "sell"
)

func (tt TxType) String() string {
	return string(tt)
}

// TxTypeValidator is a validator for the "tx_type" field enum values. It is called by the builders before save.
func TxTypeValidator(tt TxType) error {
	switch tt {
	case TxTypeBuy, TxTypeSell:
		return nil
	default:
		return fmt.Errorf("transaction: invalid enum value for tx_type field: %q", tt)
	}
}

// TxStatus defines the type for the "tx_status" enum field.
type TxStatus string

// TxStatus values.
const (
	TxStatusPending   TxStatus = "pending"
	TxStatusCompleted TxStatus = "completed"
	TxStatusCancelled TxStatus = "cancelled"
)

func (ts TxStatus) String() string {
	return string(ts)
}

// TxStatusValidator is a validator for the "tx_status" field enum values. It is called by the builders before save.
func TxStatusValidator(ts TxStatus) error {
	switch ts {
	case TxStatusPending, TxStatusCompleted, TxStatusCancelled:
		return nil
	default:
		return fmt.Errorf("transaction: invalid enum value for tx_status field: %q", ts)
	}
}

// OrderOption defines the ordering options for the Transaction queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTxNo orders the results by the tx_no field.
func ByTxNo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxNo, opts...).ToFunc()
}

// ByTxType orders the results by the tx_type field.
func ByTxType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxType, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByTxStatus orders the results by the tx_status field.
func ByTxStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxStatus, opts...).ToFunc()
}

// ByTxDate orders the results by the tx_date field.
func ByTxDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxDate, opts...).ToFunc()
}

// ByTxAmount orders the results by the tx_amount field.
func ByTxAmount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxAmount, opts...).ToFunc()
}

// ByPaymentID orders the results by the payment_id field.
func ByPaymentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentID, opts...).ToFunc()
}

// ByTxItemsCount orders the results by txItems count.
func ByTxItemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTxItemsStep(), opts...)
	}
}

// ByTxItems orders the results by txItems terms.
func ByTxItems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTxItemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTxOrderCount orders the results by txOrder count.
func ByTxOrderCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTxOrderStep(), opts...)
	}
}

// ByTxOrder orders the results by txOrder terms.
func ByTxOrder(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTxOrderStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTxItemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TxItemsInverseTable, TxItemFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TxItemsTable, TxItemsColumn),
	)
}
func newTxOrderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TxOrderInverseTable, OrderFieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TxOrderTable, TxOrderColumn),
	)
}
