// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldID, id))
}

// TxNo applies equality check predicate on the "tx_no" field. It's identical to TxNoEQ.
func TxNo(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTxNo, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldUserID, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldQuantity, v))
}

// TxDate applies equality check predicate on the "tx_date" field. It's identical to TxDateEQ.
func TxDate(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTxDate, v))
}

// TxAmount applies equality check predicate on the "tx_amount" field. It's identical to TxAmountEQ.
func TxAmount(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTxAmount, v))
}

// PaymentID applies equality check predicate on the "payment_id" field. It's identical to PaymentIDEQ.
func PaymentID(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentID, v))
}

// TxNoEQ applies the EQ predicate on the "tx_no" field.
func TxNoEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTxNo, v))
}

// TxNoNEQ applies the NEQ predicate on the "tx_no" field.
func TxNoNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTxNo, v))
}

// TxNoIn applies the In predicate on the "tx_no" field.
func TxNoIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTxNo, vs...))
}

// TxNoNotIn applies the NotIn predicate on the "tx_no" field.
func TxNoNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTxNo, vs...))
}

// TxNoGT applies the GT predicate on the "tx_no" field.
func TxNoGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldTxNo, v))
}

// TxNoGTE applies the GTE predicate on the "tx_no" field.
func TxNoGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldTxNo, v))
}

// TxNoLT applies the LT predicate on the "tx_no" field.
func TxNoLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldTxNo, v))
}

// TxNoLTE applies the LTE predicate on the "tx_no" field.
func TxNoLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldTxNo, v))
}

// TxNoContains applies the Contains predicate on the "tx_no" field.
func TxNoContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldTxNo, v))
}

// TxNoHasPrefix applies the HasPrefix predicate on the "tx_no" field.
func TxNoHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldTxNo, v))
}

// TxNoHasSuffix applies the HasSuffix predicate on the "tx_no" field.
func TxNoHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldTxNo, v))
}

// TxNoEqualFold applies the EqualFold predicate on the "tx_no" field.
func TxNoEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldTxNo, v))
}

// TxNoContainsFold applies the ContainsFold predicate on the "tx_no" field.
func TxNoContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldTxNo, v))
}

// TxTypeEQ applies the EQ predicate on the "tx_type" field.
func TxTypeEQ(v TxType) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTxType, v))
}

// TxTypeNEQ applies the NEQ predicate on the "tx_type" field.
func TxTypeNEQ(v TxType) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTxType, v))
}

// TxTypeIn applies the In predicate on the "tx_type" field.
func TxTypeIn(vs ...TxType) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTxType, vs...))
}

// TxTypeNotIn applies the NotIn predicate on the "tx_type" field.
func TxTypeNotIn(vs ...TxType) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTxType, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldUserID, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldQuantity, v))
}

// TxStatusEQ applies the EQ predicate on the "tx_status" field.
func TxStatusEQ(v TxStatus) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTxStatus, v))
}

// TxStatusNEQ applies the NEQ predicate on the "tx_status" field.
func TxStatusNEQ(v TxStatus) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTxStatus, v))
}

// TxStatusIn applies the In predicate on the "tx_status" field.
func TxStatusIn(vs ...TxStatus) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTxStatus, vs...))
}

// TxStatusNotIn applies the NotIn predicate on the "tx_status" field.
func TxStatusNotIn(vs ...TxStatus) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTxStatus, vs...))
}

// TxDateEQ applies the EQ predicate on the "tx_date" field.
func TxDateEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTxDate, v))
}

// TxDateNEQ applies the NEQ predicate on the "tx_date" field.
func TxDateNEQ(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTxDate, v))
}

// TxDateIn applies the In predicate on the "tx_date" field.
func TxDateIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTxDate, vs...))
}

// TxDateNotIn applies the NotIn predicate on the "tx_date" field.
func TxDateNotIn(vs ...time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTxDate, vs...))
}

// TxDateGT applies the GT predicate on the "tx_date" field.
func TxDateGT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldTxDate, v))
}

// TxDateGTE applies the GTE predicate on the "tx_date" field.
func TxDateGTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldTxDate, v))
}

// TxDateLT applies the LT predicate on the "tx_date" field.
func TxDateLT(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldTxDate, v))
}

// TxDateLTE applies the LTE predicate on the "tx_date" field.
func TxDateLTE(v time.Time) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldTxDate, v))
}

// TxDateIsNil applies the IsNil predicate on the "tx_date" field.
func TxDateIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldTxDate))
}

// TxDateNotNil applies the NotNil predicate on the "tx_date" field.
func TxDateNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldTxDate))
}

// TxAmountEQ applies the EQ predicate on the "tx_amount" field.
func TxAmountEQ(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTxAmount, v))
}

// TxAmountNEQ applies the NEQ predicate on the "tx_amount" field.
func TxAmountNEQ(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTxAmount, v))
}

// TxAmountIn applies the In predicate on the "tx_amount" field.
func TxAmountIn(vs ...float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTxAmount, vs...))
}

// TxAmountNotIn applies the NotIn predicate on the "tx_amount" field.
func TxAmountNotIn(vs ...float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTxAmount, vs...))
}

// TxAmountGT applies the GT predicate on the "tx_amount" field.
func TxAmountGT(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldTxAmount, v))
}

// TxAmountGTE applies the GTE predicate on the "tx_amount" field.
func TxAmountGTE(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldTxAmount, v))
}

// TxAmountLT applies the LT predicate on the "tx_amount" field.
func TxAmountLT(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldTxAmount, v))
}

// TxAmountLTE applies the LTE predicate on the "tx_amount" field.
func TxAmountLTE(v float64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldTxAmount, v))
}

// TxAmountIsNil applies the IsNil predicate on the "tx_amount" field.
func TxAmountIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldTxAmount))
}

// TxAmountNotNil applies the NotNil predicate on the "tx_amount" field.
func TxAmountNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldTxAmount))
}

// PaymentIDEQ applies the EQ predicate on the "payment_id" field.
func PaymentIDEQ(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldPaymentID, v))
}

// PaymentIDNEQ applies the NEQ predicate on the "payment_id" field.
func PaymentIDNEQ(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldPaymentID, v))
}

// PaymentIDIn applies the In predicate on the "payment_id" field.
func PaymentIDIn(vs ...int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldPaymentID, vs...))
}

// PaymentIDNotIn applies the NotIn predicate on the "payment_id" field.
func PaymentIDNotIn(vs ...int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldPaymentID, vs...))
}

// PaymentIDGT applies the GT predicate on the "payment_id" field.
func PaymentIDGT(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldPaymentID, v))
}

// PaymentIDGTE applies the GTE predicate on the "payment_id" field.
func PaymentIDGTE(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldPaymentID, v))
}

// PaymentIDLT applies the LT predicate on the "payment_id" field.
func PaymentIDLT(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldPaymentID, v))
}

// PaymentIDLTE applies the LTE predicate on the "payment_id" field.
func PaymentIDLTE(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldPaymentID, v))
}

// PaymentIDIsNil applies the IsNil predicate on the "payment_id" field.
func PaymentIDIsNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldIsNull(FieldPaymentID))
}

// PaymentIDNotNil applies the NotNil predicate on the "payment_id" field.
func PaymentIDNotNil() predicate.Transaction {
	return predicate.Transaction(sql.FieldNotNull(FieldPaymentID))
}

// HasTxItems applies the HasEdge predicate on the "txItems" edge.
func HasTxItems() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TxItemsTable, TxItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTxItemsWith applies the HasEdge predicate on the "txItems" edge with a given conditions (other predicates).
func HasTxItemsWith(preds ...predicate.TxItem) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := newTxItemsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTxOrder applies the HasEdge predicate on the "txOrder" edge.
func HasTxOrder() predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TxOrderTable, TxOrderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTxOrderWith applies the HasEdge predicate on the "txOrder" edge with a given conditions (other predicates).
func HasTxOrderWith(preds ...predicate.Order) predicate.Transaction {
	return predicate.Transaction(func(s *sql.Selector) {
		step := newTxOrderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.NotPredicates(p))
}
