// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/txitem"
)

// TxItem is the model entity for the TxItem schema.
type TxItem struct {
	config `json:"-"`
	// ID of the ent.
	// 交易明细ID，主键
	ID int64 `json:"id,omitempty"`
	// 交易类型（买或卖）
	TxType txitem.TxType `json:"tx_type,omitempty"`
	// 交易ID
	TxID int64 `json:"tx_id,omitempty"`
	// 书籍ID
	BookID int64 `json:"book_id,omitempty"`
	// 交易数量
	Quantity int `json:"quantity,omitempty"`
	// 交易价格
	Price float64 `json:"price,omitempty"`
	// ISBN
	Isbn string `json:"isbn,omitempty"`
	// 书名
	Title string `json:"title,omitempty"`
	// 主编
	Author string `json:"author,omitempty"`
	// 出版社ID
	PublisherID int64 `json:"publisher_id,omitempty"`
	// 图片URL
	ImageURL             string `json:"image_url,omitempty"`
	order_tx_items       *int64
	transaction_tx_items *int64
	selectValues         sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TxItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case txitem.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case txitem.FieldID, txitem.FieldTxID, txitem.FieldBookID, txitem.FieldQuantity, txitem.FieldPublisherID:
			values[i] = new(sql.NullInt64)
		case txitem.FieldTxType, txitem.FieldIsbn, txitem.FieldTitle, txitem.FieldAuthor, txitem.FieldImageURL:
			values[i] = new(sql.NullString)
		case txitem.ForeignKeys[0]: // order_tx_items
			values[i] = new(sql.NullInt64)
		case txitem.ForeignKeys[1]: // transaction_tx_items
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TxItem fields.
func (ti *TxItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case txitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ti.ID = int64(value.Int64)
		case txitem.FieldTxType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tx_type", values[i])
			} else if value.Valid {
				ti.TxType = txitem.TxType(value.String)
			}
		case txitem.FieldTxID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tx_id", values[i])
			} else if value.Valid {
				ti.TxID = value.Int64
			}
		case txitem.FieldBookID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field book_id", values[i])
			} else if value.Valid {
				ti.BookID = value.Int64
			}
		case txitem.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				ti.Quantity = int(value.Int64)
			}
		case txitem.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				ti.Price = value.Float64
			}
		case txitem.FieldIsbn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isbn", values[i])
			} else if value.Valid {
				ti.Isbn = value.String
			}
		case txitem.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ti.Title = value.String
			}
		case txitem.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				ti.Author = value.String
			}
		case txitem.FieldPublisherID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field publisher_id", values[i])
			} else if value.Valid {
				ti.PublisherID = value.Int64
			}
		case txitem.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				ti.ImageURL = value.String
			}
		case txitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_tx_items", value)
			} else if value.Valid {
				ti.order_tx_items = new(int64)
				*ti.order_tx_items = int64(value.Int64)
			}
		case txitem.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field transaction_tx_items", value)
			} else if value.Valid {
				ti.transaction_tx_items = new(int64)
				*ti.transaction_tx_items = int64(value.Int64)
			}
		default:
			ti.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TxItem.
// This includes values selected through modifiers, order, etc.
func (ti *TxItem) Value(name string) (ent.Value, error) {
	return ti.selectValues.Get(name)
}

// Update returns a builder for updating this TxItem.
// Note that you need to call TxItem.Unwrap() before calling this method if this TxItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ti *TxItem) Update() *TxItemUpdateOne {
	return NewTxItemClient(ti.config).UpdateOne(ti)
}

// Unwrap unwraps the TxItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ti *TxItem) Unwrap() *TxItem {
	_tx, ok := ti.config.driver.(*txDriver)
	if !ok {
		panic("ent: TxItem is not a transactional entity")
	}
	ti.config.driver = _tx.drv
	return ti
}

// String implements the fmt.Stringer.
func (ti *TxItem) String() string {
	var builder strings.Builder
	builder.WriteString("TxItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ti.ID))
	builder.WriteString("tx_type=")
	builder.WriteString(fmt.Sprintf("%v", ti.TxType))
	builder.WriteString(", ")
	builder.WriteString("tx_id=")
	builder.WriteString(fmt.Sprintf("%v", ti.TxID))
	builder.WriteString(", ")
	builder.WriteString("book_id=")
	builder.WriteString(fmt.Sprintf("%v", ti.BookID))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", ti.Quantity))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", ti.Price))
	builder.WriteString(", ")
	builder.WriteString("isbn=")
	builder.WriteString(ti.Isbn)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(ti.Title)
	builder.WriteString(", ")
	builder.WriteString("author=")
	builder.WriteString(ti.Author)
	builder.WriteString(", ")
	builder.WriteString("publisher_id=")
	builder.WriteString(fmt.Sprintf("%v", ti.PublisherID))
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(ti.ImageURL)
	builder.WriteByte(')')
	return builder.String()
}

// TxItems is a parsable slice of TxItem.
type TxItems []*TxItem
