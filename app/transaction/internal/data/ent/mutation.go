// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/order"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/predicate"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/transaction"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/txitem"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeOrder       = "Order"
	TypeTransaction = "Transaction"
	TypeTxItem      = "TxItem"
)

// OrderMutation represents an operation that mutates the Order nodes in the graph.
type OrderMutation struct {
	config
	op                 Op
	typ                string
	id                 *int64
	order_no           *string
	tx_id              *int64
	addtx_id           *int64
	order_status       *order.OrderStatus
	delivered_address  *string
	shipping_cost      *float64
	addshipping_cost   *float64
	total_amount       *float64
	addtotal_amount    *float64
	placed_user_id     *int64
	addplaced_user_id  *int64
	placed_at          *time.Time
	shipped_address    *string
	shipped_at         *time.Time
	payment_id         *int64
	addpayment_id      *int64
	clearedFields      map[string]struct{}
	transaction        map[int64]struct{}
	removedtransaction map[int64]struct{}
	clearedtransaction bool
	txItems            map[int64]struct{}
	removedtxItems     map[int64]struct{}
	clearedtxItems     bool
	done               bool
	oldValue           func(context.Context) (*Order, error)
	predicates         []predicate.Order
}

var _ ent.Mutation = (*OrderMutation)(nil)

// orderOption allows management of the mutation configuration using functional options.
type orderOption func(*OrderMutation)

// newOrderMutation creates new mutation for the Order entity.
func newOrderMutation(c config, op Op, opts ...orderOption) *OrderMutation {
	m := &OrderMutation{
		config:        c,
		op:            op,
		typ:           TypeOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrderID sets the ID field of the mutation.
func withOrderID(id int64) orderOption {
	return func(m *OrderMutation) {
		var (
			err   error
			once  sync.Once
			value *Order
		)
		m.oldValue = func(ctx context.Context) (*Order, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Order.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrder sets the old Order of the mutation.
func withOrder(node *Order) orderOption {
	return func(m *OrderMutation) {
		m.oldValue = func(context.Context) (*Order, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Order entities.
func (m *OrderMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrderMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrderMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Order.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOrderNo sets the "order_no" field.
func (m *OrderMutation) SetOrderNo(s string) {
	m.order_no = &s
}

// OrderNo returns the value of the "order_no" field in the mutation.
func (m *OrderMutation) OrderNo() (r string, exists bool) {
	v := m.order_no
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderNo returns the old "order_no" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldOrderNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderNo: %w", err)
	}
	return oldValue.OrderNo, nil
}

// ClearOrderNo clears the value of the "order_no" field.
func (m *OrderMutation) ClearOrderNo() {
	m.order_no = nil
	m.clearedFields[order.FieldOrderNo] = struct{}{}
}

// OrderNoCleared returns if the "order_no" field was cleared in this mutation.
func (m *OrderMutation) OrderNoCleared() bool {
	_, ok := m.clearedFields[order.FieldOrderNo]
	return ok
}

// ResetOrderNo resets all changes to the "order_no" field.
func (m *OrderMutation) ResetOrderNo() {
	m.order_no = nil
	delete(m.clearedFields, order.FieldOrderNo)
}

// SetTxID sets the "tx_id" field.
func (m *OrderMutation) SetTxID(i int64) {
	m.tx_id = &i
	m.addtx_id = nil
}

// TxID returns the value of the "tx_id" field in the mutation.
func (m *OrderMutation) TxID() (r int64, exists bool) {
	v := m.tx_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTxID returns the old "tx_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldTxID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxID: %w", err)
	}
	return oldValue.TxID, nil
}

// AddTxID adds i to the "tx_id" field.
func (m *OrderMutation) AddTxID(i int64) {
	if m.addtx_id != nil {
		*m.addtx_id += i
	} else {
		m.addtx_id = &i
	}
}

// AddedTxID returns the value that was added to the "tx_id" field in this mutation.
func (m *OrderMutation) AddedTxID() (r int64, exists bool) {
	v := m.addtx_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTxID resets all changes to the "tx_id" field.
func (m *OrderMutation) ResetTxID() {
	m.tx_id = nil
	m.addtx_id = nil
}

// SetOrderStatus sets the "order_status" field.
func (m *OrderMutation) SetOrderStatus(os order.OrderStatus) {
	m.order_status = &os
}

// OrderStatus returns the value of the "order_status" field in the mutation.
func (m *OrderMutation) OrderStatus() (r order.OrderStatus, exists bool) {
	v := m.order_status
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderStatus returns the old "order_status" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldOrderStatus(ctx context.Context) (v order.OrderStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderStatus: %w", err)
	}
	return oldValue.OrderStatus, nil
}

// ResetOrderStatus resets all changes to the "order_status" field.
func (m *OrderMutation) ResetOrderStatus() {
	m.order_status = nil
}

// SetDeliveredAddress sets the "delivered_address" field.
func (m *OrderMutation) SetDeliveredAddress(s string) {
	m.delivered_address = &s
}

// DeliveredAddress returns the value of the "delivered_address" field in the mutation.
func (m *OrderMutation) DeliveredAddress() (r string, exists bool) {
	v := m.delivered_address
	if v == nil {
		return
	}
	return *v, true
}

// OldDeliveredAddress returns the old "delivered_address" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldDeliveredAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeliveredAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeliveredAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeliveredAddress: %w", err)
	}
	return oldValue.DeliveredAddress, nil
}

// ClearDeliveredAddress clears the value of the "delivered_address" field.
func (m *OrderMutation) ClearDeliveredAddress() {
	m.delivered_address = nil
	m.clearedFields[order.FieldDeliveredAddress] = struct{}{}
}

// DeliveredAddressCleared returns if the "delivered_address" field was cleared in this mutation.
func (m *OrderMutation) DeliveredAddressCleared() bool {
	_, ok := m.clearedFields[order.FieldDeliveredAddress]
	return ok
}

// ResetDeliveredAddress resets all changes to the "delivered_address" field.
func (m *OrderMutation) ResetDeliveredAddress() {
	m.delivered_address = nil
	delete(m.clearedFields, order.FieldDeliveredAddress)
}

// SetShippingCost sets the "shipping_cost" field.
func (m *OrderMutation) SetShippingCost(f float64) {
	m.shipping_cost = &f
	m.addshipping_cost = nil
}

// ShippingCost returns the value of the "shipping_cost" field in the mutation.
func (m *OrderMutation) ShippingCost() (r float64, exists bool) {
	v := m.shipping_cost
	if v == nil {
		return
	}
	return *v, true
}

// OldShippingCost returns the old "shipping_cost" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldShippingCost(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShippingCost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShippingCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShippingCost: %w", err)
	}
	return oldValue.ShippingCost, nil
}

// AddShippingCost adds f to the "shipping_cost" field.
func (m *OrderMutation) AddShippingCost(f float64) {
	if m.addshipping_cost != nil {
		*m.addshipping_cost += f
	} else {
		m.addshipping_cost = &f
	}
}

// AddedShippingCost returns the value that was added to the "shipping_cost" field in this mutation.
func (m *OrderMutation) AddedShippingCost() (r float64, exists bool) {
	v := m.addshipping_cost
	if v == nil {
		return
	}
	return *v, true
}

// ClearShippingCost clears the value of the "shipping_cost" field.
func (m *OrderMutation) ClearShippingCost() {
	m.shipping_cost = nil
	m.addshipping_cost = nil
	m.clearedFields[order.FieldShippingCost] = struct{}{}
}

// ShippingCostCleared returns if the "shipping_cost" field was cleared in this mutation.
func (m *OrderMutation) ShippingCostCleared() bool {
	_, ok := m.clearedFields[order.FieldShippingCost]
	return ok
}

// ResetShippingCost resets all changes to the "shipping_cost" field.
func (m *OrderMutation) ResetShippingCost() {
	m.shipping_cost = nil
	m.addshipping_cost = nil
	delete(m.clearedFields, order.FieldShippingCost)
}

// SetTotalAmount sets the "total_amount" field.
func (m *OrderMutation) SetTotalAmount(f float64) {
	m.total_amount = &f
	m.addtotal_amount = nil
}

// TotalAmount returns the value of the "total_amount" field in the mutation.
func (m *OrderMutation) TotalAmount() (r float64, exists bool) {
	v := m.total_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalAmount returns the old "total_amount" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldTotalAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalAmount: %w", err)
	}
	return oldValue.TotalAmount, nil
}

// AddTotalAmount adds f to the "total_amount" field.
func (m *OrderMutation) AddTotalAmount(f float64) {
	if m.addtotal_amount != nil {
		*m.addtotal_amount += f
	} else {
		m.addtotal_amount = &f
	}
}

// AddedTotalAmount returns the value that was added to the "total_amount" field in this mutation.
func (m *OrderMutation) AddedTotalAmount() (r float64, exists bool) {
	v := m.addtotal_amount
	if v == nil {
		return
	}
	return *v, true
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (m *OrderMutation) ClearTotalAmount() {
	m.total_amount = nil
	m.addtotal_amount = nil
	m.clearedFields[order.FieldTotalAmount] = struct{}{}
}

// TotalAmountCleared returns if the "total_amount" field was cleared in this mutation.
func (m *OrderMutation) TotalAmountCleared() bool {
	_, ok := m.clearedFields[order.FieldTotalAmount]
	return ok
}

// ResetTotalAmount resets all changes to the "total_amount" field.
func (m *OrderMutation) ResetTotalAmount() {
	m.total_amount = nil
	m.addtotal_amount = nil
	delete(m.clearedFields, order.FieldTotalAmount)
}

// SetPlacedUserID sets the "placed_user_id" field.
func (m *OrderMutation) SetPlacedUserID(i int64) {
	m.placed_user_id = &i
	m.addplaced_user_id = nil
}

// PlacedUserID returns the value of the "placed_user_id" field in the mutation.
func (m *OrderMutation) PlacedUserID() (r int64, exists bool) {
	v := m.placed_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPlacedUserID returns the old "placed_user_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPlacedUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlacedUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlacedUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlacedUserID: %w", err)
	}
	return oldValue.PlacedUserID, nil
}

// AddPlacedUserID adds i to the "placed_user_id" field.
func (m *OrderMutation) AddPlacedUserID(i int64) {
	if m.addplaced_user_id != nil {
		*m.addplaced_user_id += i
	} else {
		m.addplaced_user_id = &i
	}
}

// AddedPlacedUserID returns the value that was added to the "placed_user_id" field in this mutation.
func (m *OrderMutation) AddedPlacedUserID() (r int64, exists bool) {
	v := m.addplaced_user_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetPlacedUserID resets all changes to the "placed_user_id" field.
func (m *OrderMutation) ResetPlacedUserID() {
	m.placed_user_id = nil
	m.addplaced_user_id = nil
}

// SetPlacedAt sets the "placed_at" field.
func (m *OrderMutation) SetPlacedAt(t time.Time) {
	m.placed_at = &t
}

// PlacedAt returns the value of the "placed_at" field in the mutation.
func (m *OrderMutation) PlacedAt() (r time.Time, exists bool) {
	v := m.placed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPlacedAt returns the old "placed_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPlacedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlacedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlacedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlacedAt: %w", err)
	}
	return oldValue.PlacedAt, nil
}

// ClearPlacedAt clears the value of the "placed_at" field.
func (m *OrderMutation) ClearPlacedAt() {
	m.placed_at = nil
	m.clearedFields[order.FieldPlacedAt] = struct{}{}
}

// PlacedAtCleared returns if the "placed_at" field was cleared in this mutation.
func (m *OrderMutation) PlacedAtCleared() bool {
	_, ok := m.clearedFields[order.FieldPlacedAt]
	return ok
}

// ResetPlacedAt resets all changes to the "placed_at" field.
func (m *OrderMutation) ResetPlacedAt() {
	m.placed_at = nil
	delete(m.clearedFields, order.FieldPlacedAt)
}

// SetShippedAddress sets the "shipped_address" field.
func (m *OrderMutation) SetShippedAddress(s string) {
	m.shipped_address = &s
}

// ShippedAddress returns the value of the "shipped_address" field in the mutation.
func (m *OrderMutation) ShippedAddress() (r string, exists bool) {
	v := m.shipped_address
	if v == nil {
		return
	}
	return *v, true
}

// OldShippedAddress returns the old "shipped_address" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldShippedAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShippedAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShippedAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShippedAddress: %w", err)
	}
	return oldValue.ShippedAddress, nil
}

// ClearShippedAddress clears the value of the "shipped_address" field.
func (m *OrderMutation) ClearShippedAddress() {
	m.shipped_address = nil
	m.clearedFields[order.FieldShippedAddress] = struct{}{}
}

// ShippedAddressCleared returns if the "shipped_address" field was cleared in this mutation.
func (m *OrderMutation) ShippedAddressCleared() bool {
	_, ok := m.clearedFields[order.FieldShippedAddress]
	return ok
}

// ResetShippedAddress resets all changes to the "shipped_address" field.
func (m *OrderMutation) ResetShippedAddress() {
	m.shipped_address = nil
	delete(m.clearedFields, order.FieldShippedAddress)
}

// SetShippedAt sets the "shipped_at" field.
func (m *OrderMutation) SetShippedAt(t time.Time) {
	m.shipped_at = &t
}

// ShippedAt returns the value of the "shipped_at" field in the mutation.
func (m *OrderMutation) ShippedAt() (r time.Time, exists bool) {
	v := m.shipped_at
	if v == nil {
		return
	}
	return *v, true
}

// OldShippedAt returns the old "shipped_at" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldShippedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShippedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShippedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShippedAt: %w", err)
	}
	return oldValue.ShippedAt, nil
}

// ClearShippedAt clears the value of the "shipped_at" field.
func (m *OrderMutation) ClearShippedAt() {
	m.shipped_at = nil
	m.clearedFields[order.FieldShippedAt] = struct{}{}
}

// ShippedAtCleared returns if the "shipped_at" field was cleared in this mutation.
func (m *OrderMutation) ShippedAtCleared() bool {
	_, ok := m.clearedFields[order.FieldShippedAt]
	return ok
}

// ResetShippedAt resets all changes to the "shipped_at" field.
func (m *OrderMutation) ResetShippedAt() {
	m.shipped_at = nil
	delete(m.clearedFields, order.FieldShippedAt)
}

// SetPaymentID sets the "payment_id" field.
func (m *OrderMutation) SetPaymentID(i int64) {
	m.payment_id = &i
	m.addpayment_id = nil
}

// PaymentID returns the value of the "payment_id" field in the mutation.
func (m *OrderMutation) PaymentID() (r int64, exists bool) {
	v := m.payment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentID returns the old "payment_id" field's value of the Order entity.
// If the Order object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrderMutation) OldPaymentID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentID: %w", err)
	}
	return oldValue.PaymentID, nil
}

// AddPaymentID adds i to the "payment_id" field.
func (m *OrderMutation) AddPaymentID(i int64) {
	if m.addpayment_id != nil {
		*m.addpayment_id += i
	} else {
		m.addpayment_id = &i
	}
}

// AddedPaymentID returns the value that was added to the "payment_id" field in this mutation.
func (m *OrderMutation) AddedPaymentID() (r int64, exists bool) {
	v := m.addpayment_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearPaymentID clears the value of the "payment_id" field.
func (m *OrderMutation) ClearPaymentID() {
	m.payment_id = nil
	m.addpayment_id = nil
	m.clearedFields[order.FieldPaymentID] = struct{}{}
}

// PaymentIDCleared returns if the "payment_id" field was cleared in this mutation.
func (m *OrderMutation) PaymentIDCleared() bool {
	_, ok := m.clearedFields[order.FieldPaymentID]
	return ok
}

// ResetPaymentID resets all changes to the "payment_id" field.
func (m *OrderMutation) ResetPaymentID() {
	m.payment_id = nil
	m.addpayment_id = nil
	delete(m.clearedFields, order.FieldPaymentID)
}

// AddTransactionIDs adds the "transaction" edge to the Transaction entity by ids.
func (m *OrderMutation) AddTransactionIDs(ids ...int64) {
	if m.transaction == nil {
		m.transaction = make(map[int64]struct{})
	}
	for i := range ids {
		m.transaction[ids[i]] = struct{}{}
	}
}

// ClearTransaction clears the "transaction" edge to the Transaction entity.
func (m *OrderMutation) ClearTransaction() {
	m.clearedtransaction = true
}

// TransactionCleared reports if the "transaction" edge to the Transaction entity was cleared.
func (m *OrderMutation) TransactionCleared() bool {
	return m.clearedtransaction
}

// RemoveTransactionIDs removes the "transaction" edge to the Transaction entity by IDs.
func (m *OrderMutation) RemoveTransactionIDs(ids ...int64) {
	if m.removedtransaction == nil {
		m.removedtransaction = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.transaction, ids[i])
		m.removedtransaction[ids[i]] = struct{}{}
	}
}

// RemovedTransaction returns the removed IDs of the "transaction" edge to the Transaction entity.
func (m *OrderMutation) RemovedTransactionIDs() (ids []int64) {
	for id := range m.removedtransaction {
		ids = append(ids, id)
	}
	return
}

// TransactionIDs returns the "transaction" edge IDs in the mutation.
func (m *OrderMutation) TransactionIDs() (ids []int64) {
	for id := range m.transaction {
		ids = append(ids, id)
	}
	return
}

// ResetTransaction resets all changes to the "transaction" edge.
func (m *OrderMutation) ResetTransaction() {
	m.transaction = nil
	m.clearedtransaction = false
	m.removedtransaction = nil
}

// AddTxItemIDs adds the "txItems" edge to the TxItem entity by ids.
func (m *OrderMutation) AddTxItemIDs(ids ...int64) {
	if m.txItems == nil {
		m.txItems = make(map[int64]struct{})
	}
	for i := range ids {
		m.txItems[ids[i]] = struct{}{}
	}
}

// ClearTxItems clears the "txItems" edge to the TxItem entity.
func (m *OrderMutation) ClearTxItems() {
	m.clearedtxItems = true
}

// TxItemsCleared reports if the "txItems" edge to the TxItem entity was cleared.
func (m *OrderMutation) TxItemsCleared() bool {
	return m.clearedtxItems
}

// RemoveTxItemIDs removes the "txItems" edge to the TxItem entity by IDs.
func (m *OrderMutation) RemoveTxItemIDs(ids ...int64) {
	if m.removedtxItems == nil {
		m.removedtxItems = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.txItems, ids[i])
		m.removedtxItems[ids[i]] = struct{}{}
	}
}

// RemovedTxItems returns the removed IDs of the "txItems" edge to the TxItem entity.
func (m *OrderMutation) RemovedTxItemsIDs() (ids []int64) {
	for id := range m.removedtxItems {
		ids = append(ids, id)
	}
	return
}

// TxItemsIDs returns the "txItems" edge IDs in the mutation.
func (m *OrderMutation) TxItemsIDs() (ids []int64) {
	for id := range m.txItems {
		ids = append(ids, id)
	}
	return
}

// ResetTxItems resets all changes to the "txItems" edge.
func (m *OrderMutation) ResetTxItems() {
	m.txItems = nil
	m.clearedtxItems = false
	m.removedtxItems = nil
}

// Where appends a list predicates to the OrderMutation builder.
func (m *OrderMutation) Where(ps ...predicate.Order) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Order, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Order).
func (m *OrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrderMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.order_no != nil {
		fields = append(fields, order.FieldOrderNo)
	}
	if m.tx_id != nil {
		fields = append(fields, order.FieldTxID)
	}
	if m.order_status != nil {
		fields = append(fields, order.FieldOrderStatus)
	}
	if m.delivered_address != nil {
		fields = append(fields, order.FieldDeliveredAddress)
	}
	if m.shipping_cost != nil {
		fields = append(fields, order.FieldShippingCost)
	}
	if m.total_amount != nil {
		fields = append(fields, order.FieldTotalAmount)
	}
	if m.placed_user_id != nil {
		fields = append(fields, order.FieldPlacedUserID)
	}
	if m.placed_at != nil {
		fields = append(fields, order.FieldPlacedAt)
	}
	if m.shipped_address != nil {
		fields = append(fields, order.FieldShippedAddress)
	}
	if m.shipped_at != nil {
		fields = append(fields, order.FieldShippedAt)
	}
	if m.payment_id != nil {
		fields = append(fields, order.FieldPaymentID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case order.FieldOrderNo:
		return m.OrderNo()
	case order.FieldTxID:
		return m.TxID()
	case order.FieldOrderStatus:
		return m.OrderStatus()
	case order.FieldDeliveredAddress:
		return m.DeliveredAddress()
	case order.FieldShippingCost:
		return m.ShippingCost()
	case order.FieldTotalAmount:
		return m.TotalAmount()
	case order.FieldPlacedUserID:
		return m.PlacedUserID()
	case order.FieldPlacedAt:
		return m.PlacedAt()
	case order.FieldShippedAddress:
		return m.ShippedAddress()
	case order.FieldShippedAt:
		return m.ShippedAt()
	case order.FieldPaymentID:
		return m.PaymentID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case order.FieldOrderNo:
		return m.OldOrderNo(ctx)
	case order.FieldTxID:
		return m.OldTxID(ctx)
	case order.FieldOrderStatus:
		return m.OldOrderStatus(ctx)
	case order.FieldDeliveredAddress:
		return m.OldDeliveredAddress(ctx)
	case order.FieldShippingCost:
		return m.OldShippingCost(ctx)
	case order.FieldTotalAmount:
		return m.OldTotalAmount(ctx)
	case order.FieldPlacedUserID:
		return m.OldPlacedUserID(ctx)
	case order.FieldPlacedAt:
		return m.OldPlacedAt(ctx)
	case order.FieldShippedAddress:
		return m.OldShippedAddress(ctx)
	case order.FieldShippedAt:
		return m.OldShippedAt(ctx)
	case order.FieldPaymentID:
		return m.OldPaymentID(ctx)
	}
	return nil, fmt.Errorf("unknown Order field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case order.FieldOrderNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderNo(v)
		return nil
	case order.FieldTxID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxID(v)
		return nil
	case order.FieldOrderStatus:
		v, ok := value.(order.OrderStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderStatus(v)
		return nil
	case order.FieldDeliveredAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeliveredAddress(v)
		return nil
	case order.FieldShippingCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShippingCost(v)
		return nil
	case order.FieldTotalAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalAmount(v)
		return nil
	case order.FieldPlacedUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlacedUserID(v)
		return nil
	case order.FieldPlacedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlacedAt(v)
		return nil
	case order.FieldShippedAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShippedAddress(v)
		return nil
	case order.FieldShippedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShippedAt(v)
		return nil
	case order.FieldPaymentID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentID(v)
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrderMutation) AddedFields() []string {
	var fields []string
	if m.addtx_id != nil {
		fields = append(fields, order.FieldTxID)
	}
	if m.addshipping_cost != nil {
		fields = append(fields, order.FieldShippingCost)
	}
	if m.addtotal_amount != nil {
		fields = append(fields, order.FieldTotalAmount)
	}
	if m.addplaced_user_id != nil {
		fields = append(fields, order.FieldPlacedUserID)
	}
	if m.addpayment_id != nil {
		fields = append(fields, order.FieldPaymentID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case order.FieldTxID:
		return m.AddedTxID()
	case order.FieldShippingCost:
		return m.AddedShippingCost()
	case order.FieldTotalAmount:
		return m.AddedTotalAmount()
	case order.FieldPlacedUserID:
		return m.AddedPlacedUserID()
	case order.FieldPaymentID:
		return m.AddedPaymentID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case order.FieldTxID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTxID(v)
		return nil
	case order.FieldShippingCost:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShippingCost(v)
		return nil
	case order.FieldTotalAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalAmount(v)
		return nil
	case order.FieldPlacedUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPlacedUserID(v)
		return nil
	case order.FieldPaymentID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPaymentID(v)
		return nil
	}
	return fmt.Errorf("unknown Order numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(order.FieldOrderNo) {
		fields = append(fields, order.FieldOrderNo)
	}
	if m.FieldCleared(order.FieldDeliveredAddress) {
		fields = append(fields, order.FieldDeliveredAddress)
	}
	if m.FieldCleared(order.FieldShippingCost) {
		fields = append(fields, order.FieldShippingCost)
	}
	if m.FieldCleared(order.FieldTotalAmount) {
		fields = append(fields, order.FieldTotalAmount)
	}
	if m.FieldCleared(order.FieldPlacedAt) {
		fields = append(fields, order.FieldPlacedAt)
	}
	if m.FieldCleared(order.FieldShippedAddress) {
		fields = append(fields, order.FieldShippedAddress)
	}
	if m.FieldCleared(order.FieldShippedAt) {
		fields = append(fields, order.FieldShippedAt)
	}
	if m.FieldCleared(order.FieldPaymentID) {
		fields = append(fields, order.FieldPaymentID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrderMutation) ClearField(name string) error {
	switch name {
	case order.FieldOrderNo:
		m.ClearOrderNo()
		return nil
	case order.FieldDeliveredAddress:
		m.ClearDeliveredAddress()
		return nil
	case order.FieldShippingCost:
		m.ClearShippingCost()
		return nil
	case order.FieldTotalAmount:
		m.ClearTotalAmount()
		return nil
	case order.FieldPlacedAt:
		m.ClearPlacedAt()
		return nil
	case order.FieldShippedAddress:
		m.ClearShippedAddress()
		return nil
	case order.FieldShippedAt:
		m.ClearShippedAt()
		return nil
	case order.FieldPaymentID:
		m.ClearPaymentID()
		return nil
	}
	return fmt.Errorf("unknown Order nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrderMutation) ResetField(name string) error {
	switch name {
	case order.FieldOrderNo:
		m.ResetOrderNo()
		return nil
	case order.FieldTxID:
		m.ResetTxID()
		return nil
	case order.FieldOrderStatus:
		m.ResetOrderStatus()
		return nil
	case order.FieldDeliveredAddress:
		m.ResetDeliveredAddress()
		return nil
	case order.FieldShippingCost:
		m.ResetShippingCost()
		return nil
	case order.FieldTotalAmount:
		m.ResetTotalAmount()
		return nil
	case order.FieldPlacedUserID:
		m.ResetPlacedUserID()
		return nil
	case order.FieldPlacedAt:
		m.ResetPlacedAt()
		return nil
	case order.FieldShippedAddress:
		m.ResetShippedAddress()
		return nil
	case order.FieldShippedAt:
		m.ResetShippedAt()
		return nil
	case order.FieldPaymentID:
		m.ResetPaymentID()
		return nil
	}
	return fmt.Errorf("unknown Order field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.transaction != nil {
		edges = append(edges, order.EdgeTransaction)
	}
	if m.txItems != nil {
		edges = append(edges, order.EdgeTxItems)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case order.EdgeTransaction:
		ids := make([]ent.Value, 0, len(m.transaction))
		for id := range m.transaction {
			ids = append(ids, id)
		}
		return ids
	case order.EdgeTxItems:
		ids := make([]ent.Value, 0, len(m.txItems))
		for id := range m.txItems {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtransaction != nil {
		edges = append(edges, order.EdgeTransaction)
	}
	if m.removedtxItems != nil {
		edges = append(edges, order.EdgeTxItems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case order.EdgeTransaction:
		ids := make([]ent.Value, 0, len(m.removedtransaction))
		for id := range m.removedtransaction {
			ids = append(ids, id)
		}
		return ids
	case order.EdgeTxItems:
		ids := make([]ent.Value, 0, len(m.removedtxItems))
		for id := range m.removedtxItems {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtransaction {
		edges = append(edges, order.EdgeTransaction)
	}
	if m.clearedtxItems {
		edges = append(edges, order.EdgeTxItems)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrderMutation) EdgeCleared(name string) bool {
	switch name {
	case order.EdgeTransaction:
		return m.clearedtransaction
	case order.EdgeTxItems:
		return m.clearedtxItems
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrderMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Order unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrderMutation) ResetEdge(name string) error {
	switch name {
	case order.EdgeTransaction:
		m.ResetTransaction()
		return nil
	case order.EdgeTxItems:
		m.ResetTxItems()
		return nil
	}
	return fmt.Errorf("unknown Order edge %s", name)
}

// TransactionMutation represents an operation that mutates the Transaction nodes in the graph.
type TransactionMutation struct {
	config
	op             Op
	typ            string
	id             *int64
	tx_no          *string
	tx_type        *transaction.TxType
	user_id        *int64
	adduser_id     *int64
	quantity       *int
	addquantity    *int
	tx_status      *transaction.TxStatus
	tx_date        *time.Time
	tx_amount      *float64
	addtx_amount   *float64
	payment_id     *int64
	addpayment_id  *int64
	clearedFields  map[string]struct{}
	txItems        map[int64]struct{}
	removedtxItems map[int64]struct{}
	clearedtxItems bool
	txOrder        map[int64]struct{}
	removedtxOrder map[int64]struct{}
	clearedtxOrder bool
	done           bool
	oldValue       func(context.Context) (*Transaction, error)
	predicates     []predicate.Transaction
}

var _ ent.Mutation = (*TransactionMutation)(nil)

// transactionOption allows management of the mutation configuration using functional options.
type transactionOption func(*TransactionMutation)

// newTransactionMutation creates new mutation for the Transaction entity.
func newTransactionMutation(c config, op Op, opts ...transactionOption) *TransactionMutation {
	m := &TransactionMutation{
		config:        c,
		op:            op,
		typ:           TypeTransaction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTransactionID sets the ID field of the mutation.
func withTransactionID(id int64) transactionOption {
	return func(m *TransactionMutation) {
		var (
			err   error
			once  sync.Once
			value *Transaction
		)
		m.oldValue = func(ctx context.Context) (*Transaction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Transaction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTransaction sets the old Transaction of the mutation.
func withTransaction(node *Transaction) transactionOption {
	return func(m *TransactionMutation) {
		m.oldValue = func(context.Context) (*Transaction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TransactionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TransactionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Transaction entities.
func (m *TransactionMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TransactionMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TransactionMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Transaction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTxNo sets the "tx_no" field.
func (m *TransactionMutation) SetTxNo(s string) {
	m.tx_no = &s
}

// TxNo returns the value of the "tx_no" field in the mutation.
func (m *TransactionMutation) TxNo() (r string, exists bool) {
	v := m.tx_no
	if v == nil {
		return
	}
	return *v, true
}

// OldTxNo returns the old "tx_no" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldTxNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxNo: %w", err)
	}
	return oldValue.TxNo, nil
}

// ResetTxNo resets all changes to the "tx_no" field.
func (m *TransactionMutation) ResetTxNo() {
	m.tx_no = nil
}

// SetTxType sets the "tx_type" field.
func (m *TransactionMutation) SetTxType(tt transaction.TxType) {
	m.tx_type = &tt
}

// TxType returns the value of the "tx_type" field in the mutation.
func (m *TransactionMutation) TxType() (r transaction.TxType, exists bool) {
	v := m.tx_type
	if v == nil {
		return
	}
	return *v, true
}

// OldTxType returns the old "tx_type" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldTxType(ctx context.Context) (v transaction.TxType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxType: %w", err)
	}
	return oldValue.TxType, nil
}

// ResetTxType resets all changes to the "tx_type" field.
func (m *TransactionMutation) ResetTxType() {
	m.tx_type = nil
}

// SetUserID sets the "user_id" field.
func (m *TransactionMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *TransactionMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *TransactionMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *TransactionMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *TransactionMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetQuantity sets the "quantity" field.
func (m *TransactionMutation) SetQuantity(i int) {
	m.quantity = &i
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *TransactionMutation) Quantity() (r int, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldQuantity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds i to the "quantity" field.
func (m *TransactionMutation) AddQuantity(i int) {
	if m.addquantity != nil {
		*m.addquantity += i
	} else {
		m.addquantity = &i
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *TransactionMutation) AddedQuantity() (r int, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *TransactionMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
}

// SetTxStatus sets the "tx_status" field.
func (m *TransactionMutation) SetTxStatus(ts transaction.TxStatus) {
	m.tx_status = &ts
}

// TxStatus returns the value of the "tx_status" field in the mutation.
func (m *TransactionMutation) TxStatus() (r transaction.TxStatus, exists bool) {
	v := m.tx_status
	if v == nil {
		return
	}
	return *v, true
}

// OldTxStatus returns the old "tx_status" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldTxStatus(ctx context.Context) (v transaction.TxStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxStatus: %w", err)
	}
	return oldValue.TxStatus, nil
}

// ResetTxStatus resets all changes to the "tx_status" field.
func (m *TransactionMutation) ResetTxStatus() {
	m.tx_status = nil
}

// SetTxDate sets the "tx_date" field.
func (m *TransactionMutation) SetTxDate(t time.Time) {
	m.tx_date = &t
}

// TxDate returns the value of the "tx_date" field in the mutation.
func (m *TransactionMutation) TxDate() (r time.Time, exists bool) {
	v := m.tx_date
	if v == nil {
		return
	}
	return *v, true
}

// OldTxDate returns the old "tx_date" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldTxDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxDate: %w", err)
	}
	return oldValue.TxDate, nil
}

// ClearTxDate clears the value of the "tx_date" field.
func (m *TransactionMutation) ClearTxDate() {
	m.tx_date = nil
	m.clearedFields[transaction.FieldTxDate] = struct{}{}
}

// TxDateCleared returns if the "tx_date" field was cleared in this mutation.
func (m *TransactionMutation) TxDateCleared() bool {
	_, ok := m.clearedFields[transaction.FieldTxDate]
	return ok
}

// ResetTxDate resets all changes to the "tx_date" field.
func (m *TransactionMutation) ResetTxDate() {
	m.tx_date = nil
	delete(m.clearedFields, transaction.FieldTxDate)
}

// SetTxAmount sets the "tx_amount" field.
func (m *TransactionMutation) SetTxAmount(f float64) {
	m.tx_amount = &f
	m.addtx_amount = nil
}

// TxAmount returns the value of the "tx_amount" field in the mutation.
func (m *TransactionMutation) TxAmount() (r float64, exists bool) {
	v := m.tx_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldTxAmount returns the old "tx_amount" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldTxAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxAmount: %w", err)
	}
	return oldValue.TxAmount, nil
}

// AddTxAmount adds f to the "tx_amount" field.
func (m *TransactionMutation) AddTxAmount(f float64) {
	if m.addtx_amount != nil {
		*m.addtx_amount += f
	} else {
		m.addtx_amount = &f
	}
}

// AddedTxAmount returns the value that was added to the "tx_amount" field in this mutation.
func (m *TransactionMutation) AddedTxAmount() (r float64, exists bool) {
	v := m.addtx_amount
	if v == nil {
		return
	}
	return *v, true
}

// ClearTxAmount clears the value of the "tx_amount" field.
func (m *TransactionMutation) ClearTxAmount() {
	m.tx_amount = nil
	m.addtx_amount = nil
	m.clearedFields[transaction.FieldTxAmount] = struct{}{}
}

// TxAmountCleared returns if the "tx_amount" field was cleared in this mutation.
func (m *TransactionMutation) TxAmountCleared() bool {
	_, ok := m.clearedFields[transaction.FieldTxAmount]
	return ok
}

// ResetTxAmount resets all changes to the "tx_amount" field.
func (m *TransactionMutation) ResetTxAmount() {
	m.tx_amount = nil
	m.addtx_amount = nil
	delete(m.clearedFields, transaction.FieldTxAmount)
}

// SetPaymentID sets the "payment_id" field.
func (m *TransactionMutation) SetPaymentID(i int64) {
	m.payment_id = &i
	m.addpayment_id = nil
}

// PaymentID returns the value of the "payment_id" field in the mutation.
func (m *TransactionMutation) PaymentID() (r int64, exists bool) {
	v := m.payment_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPaymentID returns the old "payment_id" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldPaymentID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPaymentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPaymentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPaymentID: %w", err)
	}
	return oldValue.PaymentID, nil
}

// AddPaymentID adds i to the "payment_id" field.
func (m *TransactionMutation) AddPaymentID(i int64) {
	if m.addpayment_id != nil {
		*m.addpayment_id += i
	} else {
		m.addpayment_id = &i
	}
}

// AddedPaymentID returns the value that was added to the "payment_id" field in this mutation.
func (m *TransactionMutation) AddedPaymentID() (r int64, exists bool) {
	v := m.addpayment_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearPaymentID clears the value of the "payment_id" field.
func (m *TransactionMutation) ClearPaymentID() {
	m.payment_id = nil
	m.addpayment_id = nil
	m.clearedFields[transaction.FieldPaymentID] = struct{}{}
}

// PaymentIDCleared returns if the "payment_id" field was cleared in this mutation.
func (m *TransactionMutation) PaymentIDCleared() bool {
	_, ok := m.clearedFields[transaction.FieldPaymentID]
	return ok
}

// ResetPaymentID resets all changes to the "payment_id" field.
func (m *TransactionMutation) ResetPaymentID() {
	m.payment_id = nil
	m.addpayment_id = nil
	delete(m.clearedFields, transaction.FieldPaymentID)
}

// AddTxItemIDs adds the "txItems" edge to the TxItem entity by ids.
func (m *TransactionMutation) AddTxItemIDs(ids ...int64) {
	if m.txItems == nil {
		m.txItems = make(map[int64]struct{})
	}
	for i := range ids {
		m.txItems[ids[i]] = struct{}{}
	}
}

// ClearTxItems clears the "txItems" edge to the TxItem entity.
func (m *TransactionMutation) ClearTxItems() {
	m.clearedtxItems = true
}

// TxItemsCleared reports if the "txItems" edge to the TxItem entity was cleared.
func (m *TransactionMutation) TxItemsCleared() bool {
	return m.clearedtxItems
}

// RemoveTxItemIDs removes the "txItems" edge to the TxItem entity by IDs.
func (m *TransactionMutation) RemoveTxItemIDs(ids ...int64) {
	if m.removedtxItems == nil {
		m.removedtxItems = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.txItems, ids[i])
		m.removedtxItems[ids[i]] = struct{}{}
	}
}

// RemovedTxItems returns the removed IDs of the "txItems" edge to the TxItem entity.
func (m *TransactionMutation) RemovedTxItemsIDs() (ids []int64) {
	for id := range m.removedtxItems {
		ids = append(ids, id)
	}
	return
}

// TxItemsIDs returns the "txItems" edge IDs in the mutation.
func (m *TransactionMutation) TxItemsIDs() (ids []int64) {
	for id := range m.txItems {
		ids = append(ids, id)
	}
	return
}

// ResetTxItems resets all changes to the "txItems" edge.
func (m *TransactionMutation) ResetTxItems() {
	m.txItems = nil
	m.clearedtxItems = false
	m.removedtxItems = nil
}

// AddTxOrderIDs adds the "txOrder" edge to the Order entity by ids.
func (m *TransactionMutation) AddTxOrderIDs(ids ...int64) {
	if m.txOrder == nil {
		m.txOrder = make(map[int64]struct{})
	}
	for i := range ids {
		m.txOrder[ids[i]] = struct{}{}
	}
}

// ClearTxOrder clears the "txOrder" edge to the Order entity.
func (m *TransactionMutation) ClearTxOrder() {
	m.clearedtxOrder = true
}

// TxOrderCleared reports if the "txOrder" edge to the Order entity was cleared.
func (m *TransactionMutation) TxOrderCleared() bool {
	return m.clearedtxOrder
}

// RemoveTxOrderIDs removes the "txOrder" edge to the Order entity by IDs.
func (m *TransactionMutation) RemoveTxOrderIDs(ids ...int64) {
	if m.removedtxOrder == nil {
		m.removedtxOrder = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.txOrder, ids[i])
		m.removedtxOrder[ids[i]] = struct{}{}
	}
}

// RemovedTxOrder returns the removed IDs of the "txOrder" edge to the Order entity.
func (m *TransactionMutation) RemovedTxOrderIDs() (ids []int64) {
	for id := range m.removedtxOrder {
		ids = append(ids, id)
	}
	return
}

// TxOrderIDs returns the "txOrder" edge IDs in the mutation.
func (m *TransactionMutation) TxOrderIDs() (ids []int64) {
	for id := range m.txOrder {
		ids = append(ids, id)
	}
	return
}

// ResetTxOrder resets all changes to the "txOrder" edge.
func (m *TransactionMutation) ResetTxOrder() {
	m.txOrder = nil
	m.clearedtxOrder = false
	m.removedtxOrder = nil
}

// Where appends a list predicates to the TransactionMutation builder.
func (m *TransactionMutation) Where(ps ...predicate.Transaction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TransactionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TransactionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Transaction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TransactionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TransactionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Transaction).
func (m *TransactionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TransactionMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.tx_no != nil {
		fields = append(fields, transaction.FieldTxNo)
	}
	if m.tx_type != nil {
		fields = append(fields, transaction.FieldTxType)
	}
	if m.user_id != nil {
		fields = append(fields, transaction.FieldUserID)
	}
	if m.quantity != nil {
		fields = append(fields, transaction.FieldQuantity)
	}
	if m.tx_status != nil {
		fields = append(fields, transaction.FieldTxStatus)
	}
	if m.tx_date != nil {
		fields = append(fields, transaction.FieldTxDate)
	}
	if m.tx_amount != nil {
		fields = append(fields, transaction.FieldTxAmount)
	}
	if m.payment_id != nil {
		fields = append(fields, transaction.FieldPaymentID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TransactionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case transaction.FieldTxNo:
		return m.TxNo()
	case transaction.FieldTxType:
		return m.TxType()
	case transaction.FieldUserID:
		return m.UserID()
	case transaction.FieldQuantity:
		return m.Quantity()
	case transaction.FieldTxStatus:
		return m.TxStatus()
	case transaction.FieldTxDate:
		return m.TxDate()
	case transaction.FieldTxAmount:
		return m.TxAmount()
	case transaction.FieldPaymentID:
		return m.PaymentID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TransactionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case transaction.FieldTxNo:
		return m.OldTxNo(ctx)
	case transaction.FieldTxType:
		return m.OldTxType(ctx)
	case transaction.FieldUserID:
		return m.OldUserID(ctx)
	case transaction.FieldQuantity:
		return m.OldQuantity(ctx)
	case transaction.FieldTxStatus:
		return m.OldTxStatus(ctx)
	case transaction.FieldTxDate:
		return m.OldTxDate(ctx)
	case transaction.FieldTxAmount:
		return m.OldTxAmount(ctx)
	case transaction.FieldPaymentID:
		return m.OldPaymentID(ctx)
	}
	return nil, fmt.Errorf("unknown Transaction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransactionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case transaction.FieldTxNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxNo(v)
		return nil
	case transaction.FieldTxType:
		v, ok := value.(transaction.TxType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxType(v)
		return nil
	case transaction.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case transaction.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case transaction.FieldTxStatus:
		v, ok := value.(transaction.TxStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxStatus(v)
		return nil
	case transaction.FieldTxDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxDate(v)
		return nil
	case transaction.FieldTxAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxAmount(v)
		return nil
	case transaction.FieldPaymentID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPaymentID(v)
		return nil
	}
	return fmt.Errorf("unknown Transaction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TransactionMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, transaction.FieldUserID)
	}
	if m.addquantity != nil {
		fields = append(fields, transaction.FieldQuantity)
	}
	if m.addtx_amount != nil {
		fields = append(fields, transaction.FieldTxAmount)
	}
	if m.addpayment_id != nil {
		fields = append(fields, transaction.FieldPaymentID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TransactionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case transaction.FieldUserID:
		return m.AddedUserID()
	case transaction.FieldQuantity:
		return m.AddedQuantity()
	case transaction.FieldTxAmount:
		return m.AddedTxAmount()
	case transaction.FieldPaymentID:
		return m.AddedPaymentID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransactionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case transaction.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case transaction.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	case transaction.FieldTxAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTxAmount(v)
		return nil
	case transaction.FieldPaymentID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPaymentID(v)
		return nil
	}
	return fmt.Errorf("unknown Transaction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TransactionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(transaction.FieldTxDate) {
		fields = append(fields, transaction.FieldTxDate)
	}
	if m.FieldCleared(transaction.FieldTxAmount) {
		fields = append(fields, transaction.FieldTxAmount)
	}
	if m.FieldCleared(transaction.FieldPaymentID) {
		fields = append(fields, transaction.FieldPaymentID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TransactionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TransactionMutation) ClearField(name string) error {
	switch name {
	case transaction.FieldTxDate:
		m.ClearTxDate()
		return nil
	case transaction.FieldTxAmount:
		m.ClearTxAmount()
		return nil
	case transaction.FieldPaymentID:
		m.ClearPaymentID()
		return nil
	}
	return fmt.Errorf("unknown Transaction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TransactionMutation) ResetField(name string) error {
	switch name {
	case transaction.FieldTxNo:
		m.ResetTxNo()
		return nil
	case transaction.FieldTxType:
		m.ResetTxType()
		return nil
	case transaction.FieldUserID:
		m.ResetUserID()
		return nil
	case transaction.FieldQuantity:
		m.ResetQuantity()
		return nil
	case transaction.FieldTxStatus:
		m.ResetTxStatus()
		return nil
	case transaction.FieldTxDate:
		m.ResetTxDate()
		return nil
	case transaction.FieldTxAmount:
		m.ResetTxAmount()
		return nil
	case transaction.FieldPaymentID:
		m.ResetPaymentID()
		return nil
	}
	return fmt.Errorf("unknown Transaction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TransactionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.txItems != nil {
		edges = append(edges, transaction.EdgeTxItems)
	}
	if m.txOrder != nil {
		edges = append(edges, transaction.EdgeTxOrder)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TransactionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case transaction.EdgeTxItems:
		ids := make([]ent.Value, 0, len(m.txItems))
		for id := range m.txItems {
			ids = append(ids, id)
		}
		return ids
	case transaction.EdgeTxOrder:
		ids := make([]ent.Value, 0, len(m.txOrder))
		for id := range m.txOrder {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TransactionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtxItems != nil {
		edges = append(edges, transaction.EdgeTxItems)
	}
	if m.removedtxOrder != nil {
		edges = append(edges, transaction.EdgeTxOrder)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TransactionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case transaction.EdgeTxItems:
		ids := make([]ent.Value, 0, len(m.removedtxItems))
		for id := range m.removedtxItems {
			ids = append(ids, id)
		}
		return ids
	case transaction.EdgeTxOrder:
		ids := make([]ent.Value, 0, len(m.removedtxOrder))
		for id := range m.removedtxOrder {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TransactionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtxItems {
		edges = append(edges, transaction.EdgeTxItems)
	}
	if m.clearedtxOrder {
		edges = append(edges, transaction.EdgeTxOrder)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TransactionMutation) EdgeCleared(name string) bool {
	switch name {
	case transaction.EdgeTxItems:
		return m.clearedtxItems
	case transaction.EdgeTxOrder:
		return m.clearedtxOrder
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TransactionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Transaction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TransactionMutation) ResetEdge(name string) error {
	switch name {
	case transaction.EdgeTxItems:
		m.ResetTxItems()
		return nil
	case transaction.EdgeTxOrder:
		m.ResetTxOrder()
		return nil
	}
	return fmt.Errorf("unknown Transaction edge %s", name)
}

// TxItemMutation represents an operation that mutates the TxItem nodes in the graph.
type TxItemMutation struct {
	config
	op              Op
	typ             string
	id              *int64
	tx_type         *txitem.TxType
	tx_id           *int64
	addtx_id        *int64
	book_id         *int64
	addbook_id      *int64
	quantity        *int
	addquantity     *int
	price           *float64
	addprice        *float64
	isbn            *string
	title           *string
	author          *string
	publisher_id    *int64
	addpublisher_id *int64
	image_url       *string
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*TxItem, error)
	predicates      []predicate.TxItem
}

var _ ent.Mutation = (*TxItemMutation)(nil)

// txitemOption allows management of the mutation configuration using functional options.
type txitemOption func(*TxItemMutation)

// newTxItemMutation creates new mutation for the TxItem entity.
func newTxItemMutation(c config, op Op, opts ...txitemOption) *TxItemMutation {
	m := &TxItemMutation{
		config:        c,
		op:            op,
		typ:           TypeTxItem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTxItemID sets the ID field of the mutation.
func withTxItemID(id int64) txitemOption {
	return func(m *TxItemMutation) {
		var (
			err   error
			once  sync.Once
			value *TxItem
		)
		m.oldValue = func(ctx context.Context) (*TxItem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TxItem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTxItem sets the old TxItem of the mutation.
func withTxItem(node *TxItem) txitemOption {
	return func(m *TxItemMutation) {
		m.oldValue = func(context.Context) (*TxItem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TxItemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TxItemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TxItem entities.
func (m *TxItemMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TxItemMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TxItemMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TxItem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTxType sets the "tx_type" field.
func (m *TxItemMutation) SetTxType(tt txitem.TxType) {
	m.tx_type = &tt
}

// TxType returns the value of the "tx_type" field in the mutation.
func (m *TxItemMutation) TxType() (r txitem.TxType, exists bool) {
	v := m.tx_type
	if v == nil {
		return
	}
	return *v, true
}

// OldTxType returns the old "tx_type" field's value of the TxItem entity.
// If the TxItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TxItemMutation) OldTxType(ctx context.Context) (v txitem.TxType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxType: %w", err)
	}
	return oldValue.TxType, nil
}

// ResetTxType resets all changes to the "tx_type" field.
func (m *TxItemMutation) ResetTxType() {
	m.tx_type = nil
}

// SetTxID sets the "tx_id" field.
func (m *TxItemMutation) SetTxID(i int64) {
	m.tx_id = &i
	m.addtx_id = nil
}

// TxID returns the value of the "tx_id" field in the mutation.
func (m *TxItemMutation) TxID() (r int64, exists bool) {
	v := m.tx_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTxID returns the old "tx_id" field's value of the TxItem entity.
// If the TxItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TxItemMutation) OldTxID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTxID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTxID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTxID: %w", err)
	}
	return oldValue.TxID, nil
}

// AddTxID adds i to the "tx_id" field.
func (m *TxItemMutation) AddTxID(i int64) {
	if m.addtx_id != nil {
		*m.addtx_id += i
	} else {
		m.addtx_id = &i
	}
}

// AddedTxID returns the value that was added to the "tx_id" field in this mutation.
func (m *TxItemMutation) AddedTxID() (r int64, exists bool) {
	v := m.addtx_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTxID resets all changes to the "tx_id" field.
func (m *TxItemMutation) ResetTxID() {
	m.tx_id = nil
	m.addtx_id = nil
}

// SetBookID sets the "book_id" field.
func (m *TxItemMutation) SetBookID(i int64) {
	m.book_id = &i
	m.addbook_id = nil
}

// BookID returns the value of the "book_id" field in the mutation.
func (m *TxItemMutation) BookID() (r int64, exists bool) {
	v := m.book_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBookID returns the old "book_id" field's value of the TxItem entity.
// If the TxItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TxItemMutation) OldBookID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBookID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBookID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBookID: %w", err)
	}
	return oldValue.BookID, nil
}

// AddBookID adds i to the "book_id" field.
func (m *TxItemMutation) AddBookID(i int64) {
	if m.addbook_id != nil {
		*m.addbook_id += i
	} else {
		m.addbook_id = &i
	}
}

// AddedBookID returns the value that was added to the "book_id" field in this mutation.
func (m *TxItemMutation) AddedBookID() (r int64, exists bool) {
	v := m.addbook_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetBookID resets all changes to the "book_id" field.
func (m *TxItemMutation) ResetBookID() {
	m.book_id = nil
	m.addbook_id = nil
}

// SetQuantity sets the "quantity" field.
func (m *TxItemMutation) SetQuantity(i int) {
	m.quantity = &i
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *TxItemMutation) Quantity() (r int, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the TxItem entity.
// If the TxItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TxItemMutation) OldQuantity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds i to the "quantity" field.
func (m *TxItemMutation) AddQuantity(i int) {
	if m.addquantity != nil {
		*m.addquantity += i
	} else {
		m.addquantity = &i
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *TxItemMutation) AddedQuantity() (r int, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *TxItemMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
}

// SetPrice sets the "price" field.
func (m *TxItemMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *TxItemMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the TxItem entity.
// If the TxItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TxItemMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *TxItemMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *TxItemMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *TxItemMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetIsbn sets the "isbn" field.
func (m *TxItemMutation) SetIsbn(s string) {
	m.isbn = &s
}

// Isbn returns the value of the "isbn" field in the mutation.
func (m *TxItemMutation) Isbn() (r string, exists bool) {
	v := m.isbn
	if v == nil {
		return
	}
	return *v, true
}

// OldIsbn returns the old "isbn" field's value of the TxItem entity.
// If the TxItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TxItemMutation) OldIsbn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsbn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsbn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsbn: %w", err)
	}
	return oldValue.Isbn, nil
}

// ResetIsbn resets all changes to the "isbn" field.
func (m *TxItemMutation) ResetIsbn() {
	m.isbn = nil
}

// SetTitle sets the "title" field.
func (m *TxItemMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TxItemMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the TxItem entity.
// If the TxItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TxItemMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *TxItemMutation) ResetTitle() {
	m.title = nil
}

// SetAuthor sets the "author" field.
func (m *TxItemMutation) SetAuthor(s string) {
	m.author = &s
}

// Author returns the value of the "author" field in the mutation.
func (m *TxItemMutation) Author() (r string, exists bool) {
	v := m.author
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthor returns the old "author" field's value of the TxItem entity.
// If the TxItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TxItemMutation) OldAuthor(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthor is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthor requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthor: %w", err)
	}
	return oldValue.Author, nil
}

// ResetAuthor resets all changes to the "author" field.
func (m *TxItemMutation) ResetAuthor() {
	m.author = nil
}

// SetPublisherID sets the "publisher_id" field.
func (m *TxItemMutation) SetPublisherID(i int64) {
	m.publisher_id = &i
	m.addpublisher_id = nil
}

// PublisherID returns the value of the "publisher_id" field in the mutation.
func (m *TxItemMutation) PublisherID() (r int64, exists bool) {
	v := m.publisher_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPublisherID returns the old "publisher_id" field's value of the TxItem entity.
// If the TxItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TxItemMutation) OldPublisherID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublisherID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublisherID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublisherID: %w", err)
	}
	return oldValue.PublisherID, nil
}

// AddPublisherID adds i to the "publisher_id" field.
func (m *TxItemMutation) AddPublisherID(i int64) {
	if m.addpublisher_id != nil {
		*m.addpublisher_id += i
	} else {
		m.addpublisher_id = &i
	}
}

// AddedPublisherID returns the value that was added to the "publisher_id" field in this mutation.
func (m *TxItemMutation) AddedPublisherID() (r int64, exists bool) {
	v := m.addpublisher_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearPublisherID clears the value of the "publisher_id" field.
func (m *TxItemMutation) ClearPublisherID() {
	m.publisher_id = nil
	m.addpublisher_id = nil
	m.clearedFields[txitem.FieldPublisherID] = struct{}{}
}

// PublisherIDCleared returns if the "publisher_id" field was cleared in this mutation.
func (m *TxItemMutation) PublisherIDCleared() bool {
	_, ok := m.clearedFields[txitem.FieldPublisherID]
	return ok
}

// ResetPublisherID resets all changes to the "publisher_id" field.
func (m *TxItemMutation) ResetPublisherID() {
	m.publisher_id = nil
	m.addpublisher_id = nil
	delete(m.clearedFields, txitem.FieldPublisherID)
}

// SetImageURL sets the "image_url" field.
func (m *TxItemMutation) SetImageURL(s string) {
	m.image_url = &s
}

// ImageURL returns the value of the "image_url" field in the mutation.
func (m *TxItemMutation) ImageURL() (r string, exists bool) {
	v := m.image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURL returns the old "image_url" field's value of the TxItem entity.
// If the TxItem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TxItemMutation) OldImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURL: %w", err)
	}
	return oldValue.ImageURL, nil
}

// ClearImageURL clears the value of the "image_url" field.
func (m *TxItemMutation) ClearImageURL() {
	m.image_url = nil
	m.clearedFields[txitem.FieldImageURL] = struct{}{}
}

// ImageURLCleared returns if the "image_url" field was cleared in this mutation.
func (m *TxItemMutation) ImageURLCleared() bool {
	_, ok := m.clearedFields[txitem.FieldImageURL]
	return ok
}

// ResetImageURL resets all changes to the "image_url" field.
func (m *TxItemMutation) ResetImageURL() {
	m.image_url = nil
	delete(m.clearedFields, txitem.FieldImageURL)
}

// Where appends a list predicates to the TxItemMutation builder.
func (m *TxItemMutation) Where(ps ...predicate.TxItem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TxItemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TxItemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TxItem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TxItemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TxItemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TxItem).
func (m *TxItemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TxItemMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.tx_type != nil {
		fields = append(fields, txitem.FieldTxType)
	}
	if m.tx_id != nil {
		fields = append(fields, txitem.FieldTxID)
	}
	if m.book_id != nil {
		fields = append(fields, txitem.FieldBookID)
	}
	if m.quantity != nil {
		fields = append(fields, txitem.FieldQuantity)
	}
	if m.price != nil {
		fields = append(fields, txitem.FieldPrice)
	}
	if m.isbn != nil {
		fields = append(fields, txitem.FieldIsbn)
	}
	if m.title != nil {
		fields = append(fields, txitem.FieldTitle)
	}
	if m.author != nil {
		fields = append(fields, txitem.FieldAuthor)
	}
	if m.publisher_id != nil {
		fields = append(fields, txitem.FieldPublisherID)
	}
	if m.image_url != nil {
		fields = append(fields, txitem.FieldImageURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TxItemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case txitem.FieldTxType:
		return m.TxType()
	case txitem.FieldTxID:
		return m.TxID()
	case txitem.FieldBookID:
		return m.BookID()
	case txitem.FieldQuantity:
		return m.Quantity()
	case txitem.FieldPrice:
		return m.Price()
	case txitem.FieldIsbn:
		return m.Isbn()
	case txitem.FieldTitle:
		return m.Title()
	case txitem.FieldAuthor:
		return m.Author()
	case txitem.FieldPublisherID:
		return m.PublisherID()
	case txitem.FieldImageURL:
		return m.ImageURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TxItemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case txitem.FieldTxType:
		return m.OldTxType(ctx)
	case txitem.FieldTxID:
		return m.OldTxID(ctx)
	case txitem.FieldBookID:
		return m.OldBookID(ctx)
	case txitem.FieldQuantity:
		return m.OldQuantity(ctx)
	case txitem.FieldPrice:
		return m.OldPrice(ctx)
	case txitem.FieldIsbn:
		return m.OldIsbn(ctx)
	case txitem.FieldTitle:
		return m.OldTitle(ctx)
	case txitem.FieldAuthor:
		return m.OldAuthor(ctx)
	case txitem.FieldPublisherID:
		return m.OldPublisherID(ctx)
	case txitem.FieldImageURL:
		return m.OldImageURL(ctx)
	}
	return nil, fmt.Errorf("unknown TxItem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TxItemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case txitem.FieldTxType:
		v, ok := value.(txitem.TxType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxType(v)
		return nil
	case txitem.FieldTxID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTxID(v)
		return nil
	case txitem.FieldBookID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBookID(v)
		return nil
	case txitem.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case txitem.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case txitem.FieldIsbn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsbn(v)
		return nil
	case txitem.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case txitem.FieldAuthor:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthor(v)
		return nil
	case txitem.FieldPublisherID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublisherID(v)
		return nil
	case txitem.FieldImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURL(v)
		return nil
	}
	return fmt.Errorf("unknown TxItem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TxItemMutation) AddedFields() []string {
	var fields []string
	if m.addtx_id != nil {
		fields = append(fields, txitem.FieldTxID)
	}
	if m.addbook_id != nil {
		fields = append(fields, txitem.FieldBookID)
	}
	if m.addquantity != nil {
		fields = append(fields, txitem.FieldQuantity)
	}
	if m.addprice != nil {
		fields = append(fields, txitem.FieldPrice)
	}
	if m.addpublisher_id != nil {
		fields = append(fields, txitem.FieldPublisherID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TxItemMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case txitem.FieldTxID:
		return m.AddedTxID()
	case txitem.FieldBookID:
		return m.AddedBookID()
	case txitem.FieldQuantity:
		return m.AddedQuantity()
	case txitem.FieldPrice:
		return m.AddedPrice()
	case txitem.FieldPublisherID:
		return m.AddedPublisherID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TxItemMutation) AddField(name string, value ent.Value) error {
	switch name {
	case txitem.FieldTxID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTxID(v)
		return nil
	case txitem.FieldBookID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBookID(v)
		return nil
	case txitem.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	case txitem.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case txitem.FieldPublisherID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPublisherID(v)
		return nil
	}
	return fmt.Errorf("unknown TxItem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TxItemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(txitem.FieldPublisherID) {
		fields = append(fields, txitem.FieldPublisherID)
	}
	if m.FieldCleared(txitem.FieldImageURL) {
		fields = append(fields, txitem.FieldImageURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TxItemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TxItemMutation) ClearField(name string) error {
	switch name {
	case txitem.FieldPublisherID:
		m.ClearPublisherID()
		return nil
	case txitem.FieldImageURL:
		m.ClearImageURL()
		return nil
	}
	return fmt.Errorf("unknown TxItem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TxItemMutation) ResetField(name string) error {
	switch name {
	case txitem.FieldTxType:
		m.ResetTxType()
		return nil
	case txitem.FieldTxID:
		m.ResetTxID()
		return nil
	case txitem.FieldBookID:
		m.ResetBookID()
		return nil
	case txitem.FieldQuantity:
		m.ResetQuantity()
		return nil
	case txitem.FieldPrice:
		m.ResetPrice()
		return nil
	case txitem.FieldIsbn:
		m.ResetIsbn()
		return nil
	case txitem.FieldTitle:
		m.ResetTitle()
		return nil
	case txitem.FieldAuthor:
		m.ResetAuthor()
		return nil
	case txitem.FieldPublisherID:
		m.ResetPublisherID()
		return nil
	case txitem.FieldImageURL:
		m.ResetImageURL()
		return nil
	}
	return fmt.Errorf("unknown TxItem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TxItemMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TxItemMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TxItemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TxItemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TxItemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TxItemMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TxItemMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TxItem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TxItemMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TxItem edge %s", name)
}
