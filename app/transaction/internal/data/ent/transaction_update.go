// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/order"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/predicate"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/transaction"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/txitem"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionMutation
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tu *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTxNo sets the "tx_no" field.
func (tu *TransactionUpdate) SetTxNo(s string) *TransactionUpdate {
	tu.mutation.SetTxNo(s)
	return tu
}

// SetNillableTxNo sets the "tx_no" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTxNo(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetTxNo(*s)
	}
	return tu
}

// SetTxType sets the "tx_type" field.
func (tu *TransactionUpdate) SetTxType(tt transaction.TxType) *TransactionUpdate {
	tu.mutation.SetTxType(tt)
	return tu
}

// SetNillableTxType sets the "tx_type" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTxType(tt *transaction.TxType) *TransactionUpdate {
	if tt != nil {
		tu.SetTxType(*tt)
	}
	return tu
}

// SetUserID sets the "user_id" field.
func (tu *TransactionUpdate) SetUserID(i int64) *TransactionUpdate {
	tu.mutation.ResetUserID()
	tu.mutation.SetUserID(i)
	return tu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableUserID(i *int64) *TransactionUpdate {
	if i != nil {
		tu.SetUserID(*i)
	}
	return tu
}

// AddUserID adds i to the "user_id" field.
func (tu *TransactionUpdate) AddUserID(i int64) *TransactionUpdate {
	tu.mutation.AddUserID(i)
	return tu
}

// SetQuantity sets the "quantity" field.
func (tu *TransactionUpdate) SetQuantity(i int) *TransactionUpdate {
	tu.mutation.ResetQuantity()
	tu.mutation.SetQuantity(i)
	return tu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableQuantity(i *int) *TransactionUpdate {
	if i != nil {
		tu.SetQuantity(*i)
	}
	return tu
}

// AddQuantity adds i to the "quantity" field.
func (tu *TransactionUpdate) AddQuantity(i int) *TransactionUpdate {
	tu.mutation.AddQuantity(i)
	return tu
}

// SetTxStatus sets the "tx_status" field.
func (tu *TransactionUpdate) SetTxStatus(ts transaction.TxStatus) *TransactionUpdate {
	tu.mutation.SetTxStatus(ts)
	return tu
}

// SetNillableTxStatus sets the "tx_status" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTxStatus(ts *transaction.TxStatus) *TransactionUpdate {
	if ts != nil {
		tu.SetTxStatus(*ts)
	}
	return tu
}

// SetTxDate sets the "tx_date" field.
func (tu *TransactionUpdate) SetTxDate(t time.Time) *TransactionUpdate {
	tu.mutation.SetTxDate(t)
	return tu
}

// SetNillableTxDate sets the "tx_date" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTxDate(t *time.Time) *TransactionUpdate {
	if t != nil {
		tu.SetTxDate(*t)
	}
	return tu
}

// ClearTxDate clears the value of the "tx_date" field.
func (tu *TransactionUpdate) ClearTxDate() *TransactionUpdate {
	tu.mutation.ClearTxDate()
	return tu
}

// SetTxAmount sets the "tx_amount" field.
func (tu *TransactionUpdate) SetTxAmount(f float64) *TransactionUpdate {
	tu.mutation.ResetTxAmount()
	tu.mutation.SetTxAmount(f)
	return tu
}

// SetNillableTxAmount sets the "tx_amount" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableTxAmount(f *float64) *TransactionUpdate {
	if f != nil {
		tu.SetTxAmount(*f)
	}
	return tu
}

// AddTxAmount adds f to the "tx_amount" field.
func (tu *TransactionUpdate) AddTxAmount(f float64) *TransactionUpdate {
	tu.mutation.AddTxAmount(f)
	return tu
}

// ClearTxAmount clears the value of the "tx_amount" field.
func (tu *TransactionUpdate) ClearTxAmount() *TransactionUpdate {
	tu.mutation.ClearTxAmount()
	return tu
}

// SetPaymentID sets the "payment_id" field.
func (tu *TransactionUpdate) SetPaymentID(i int64) *TransactionUpdate {
	tu.mutation.ResetPaymentID()
	tu.mutation.SetPaymentID(i)
	return tu
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillablePaymentID(i *int64) *TransactionUpdate {
	if i != nil {
		tu.SetPaymentID(*i)
	}
	return tu
}

// AddPaymentID adds i to the "payment_id" field.
func (tu *TransactionUpdate) AddPaymentID(i int64) *TransactionUpdate {
	tu.mutation.AddPaymentID(i)
	return tu
}

// ClearPaymentID clears the value of the "payment_id" field.
func (tu *TransactionUpdate) ClearPaymentID() *TransactionUpdate {
	tu.mutation.ClearPaymentID()
	return tu
}

// AddTxItemIDs adds the "txItems" edge to the TxItem entity by IDs.
func (tu *TransactionUpdate) AddTxItemIDs(ids ...int64) *TransactionUpdate {
	tu.mutation.AddTxItemIDs(ids...)
	return tu
}

// AddTxItems adds the "txItems" edges to the TxItem entity.
func (tu *TransactionUpdate) AddTxItems(t ...*TxItem) *TransactionUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTxItemIDs(ids...)
}

// AddTxOrderIDs adds the "txOrder" edge to the Order entity by IDs.
func (tu *TransactionUpdate) AddTxOrderIDs(ids ...int64) *TransactionUpdate {
	tu.mutation.AddTxOrderIDs(ids...)
	return tu
}

// AddTxOrder adds the "txOrder" edges to the Order entity.
func (tu *TransactionUpdate) AddTxOrder(o ...*Order) *TransactionUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tu.AddTxOrderIDs(ids...)
}

// Mutation returns the TransactionMutation object of the builder.
func (tu *TransactionUpdate) Mutation() *TransactionMutation {
	return tu.mutation
}

// ClearTxItems clears all "txItems" edges to the TxItem entity.
func (tu *TransactionUpdate) ClearTxItems() *TransactionUpdate {
	tu.mutation.ClearTxItems()
	return tu
}

// RemoveTxItemIDs removes the "txItems" edge to TxItem entities by IDs.
func (tu *TransactionUpdate) RemoveTxItemIDs(ids ...int64) *TransactionUpdate {
	tu.mutation.RemoveTxItemIDs(ids...)
	return tu
}

// RemoveTxItems removes "txItems" edges to TxItem entities.
func (tu *TransactionUpdate) RemoveTxItems(t ...*TxItem) *TransactionUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTxItemIDs(ids...)
}

// ClearTxOrder clears all "txOrder" edges to the Order entity.
func (tu *TransactionUpdate) ClearTxOrder() *TransactionUpdate {
	tu.mutation.ClearTxOrder()
	return tu
}

// RemoveTxOrderIDs removes the "txOrder" edge to Order entities by IDs.
func (tu *TransactionUpdate) RemoveTxOrderIDs(ids ...int64) *TransactionUpdate {
	tu.mutation.RemoveTxOrderIDs(ids...)
	return tu
}

// RemoveTxOrder removes "txOrder" edges to Order entities.
func (tu *TransactionUpdate) RemoveTxOrder(o ...*Order) *TransactionUpdate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tu.RemoveTxOrderIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TransactionUpdate) check() error {
	if v, ok := tu.mutation.TxType(); ok {
		if err := transaction.TxTypeValidator(v); err != nil {
			return &ValidationError{Name: "tx_type", err: fmt.Errorf(`ent: validator failed for field "Transaction.tx_type": %w`, err)}
		}
	}
	if v, ok := tu.mutation.TxStatus(); ok {
		if err := transaction.TxStatusValidator(v); err != nil {
			return &ValidationError{Name: "tx_status", err: fmt.Errorf(`ent: validator failed for field "Transaction.tx_status": %w`, err)}
		}
	}
	return nil
}

func (tu *TransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt64))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.TxNo(); ok {
		_spec.SetField(transaction.FieldTxNo, field.TypeString, value)
	}
	if value, ok := tu.mutation.TxType(); ok {
		_spec.SetField(transaction.FieldTxType, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.UserID(); ok {
		_spec.SetField(transaction.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedUserID(); ok {
		_spec.AddField(transaction.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.Quantity(); ok {
		_spec.SetField(transaction.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedQuantity(); ok {
		_spec.AddField(transaction.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := tu.mutation.TxStatus(); ok {
		_spec.SetField(transaction.FieldTxStatus, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.TxDate(); ok {
		_spec.SetField(transaction.FieldTxDate, field.TypeTime, value)
	}
	if tu.mutation.TxDateCleared() {
		_spec.ClearField(transaction.FieldTxDate, field.TypeTime)
	}
	if value, ok := tu.mutation.TxAmount(); ok {
		_spec.SetField(transaction.FieldTxAmount, field.TypeFloat64, value)
	}
	if value, ok := tu.mutation.AddedTxAmount(); ok {
		_spec.AddField(transaction.FieldTxAmount, field.TypeFloat64, value)
	}
	if tu.mutation.TxAmountCleared() {
		_spec.ClearField(transaction.FieldTxAmount, field.TypeFloat64)
	}
	if value, ok := tu.mutation.PaymentID(); ok {
		_spec.SetField(transaction.FieldPaymentID, field.TypeInt64, value)
	}
	if value, ok := tu.mutation.AddedPaymentID(); ok {
		_spec.AddField(transaction.FieldPaymentID, field.TypeInt64, value)
	}
	if tu.mutation.PaymentIDCleared() {
		_spec.ClearField(transaction.FieldPaymentID, field.TypeInt64)
	}
	if tu.mutation.TxItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TxItemsTable,
			Columns: []string{transaction.TxItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(txitem.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTxItemsIDs(); len(nodes) > 0 && !tu.mutation.TxItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TxItemsTable,
			Columns: []string{transaction.TxItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(txitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TxItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TxItemsTable,
			Columns: []string{transaction.TxItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(txitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TxOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TxOrderTable,
			Columns: []string{transaction.TxOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTxOrderIDs(); len(nodes) > 0 && !tu.mutation.TxOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TxOrderTable,
			Columns: []string{transaction.TxOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TxOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TxOrderTable,
			Columns: []string{transaction.TxOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionMutation
}

// SetTxNo sets the "tx_no" field.
func (tuo *TransactionUpdateOne) SetTxNo(s string) *TransactionUpdateOne {
	tuo.mutation.SetTxNo(s)
	return tuo
}

// SetNillableTxNo sets the "tx_no" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTxNo(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetTxNo(*s)
	}
	return tuo
}

// SetTxType sets the "tx_type" field.
func (tuo *TransactionUpdateOne) SetTxType(tt transaction.TxType) *TransactionUpdateOne {
	tuo.mutation.SetTxType(tt)
	return tuo
}

// SetNillableTxType sets the "tx_type" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTxType(tt *transaction.TxType) *TransactionUpdateOne {
	if tt != nil {
		tuo.SetTxType(*tt)
	}
	return tuo
}

// SetUserID sets the "user_id" field.
func (tuo *TransactionUpdateOne) SetUserID(i int64) *TransactionUpdateOne {
	tuo.mutation.ResetUserID()
	tuo.mutation.SetUserID(i)
	return tuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableUserID(i *int64) *TransactionUpdateOne {
	if i != nil {
		tuo.SetUserID(*i)
	}
	return tuo
}

// AddUserID adds i to the "user_id" field.
func (tuo *TransactionUpdateOne) AddUserID(i int64) *TransactionUpdateOne {
	tuo.mutation.AddUserID(i)
	return tuo
}

// SetQuantity sets the "quantity" field.
func (tuo *TransactionUpdateOne) SetQuantity(i int) *TransactionUpdateOne {
	tuo.mutation.ResetQuantity()
	tuo.mutation.SetQuantity(i)
	return tuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableQuantity(i *int) *TransactionUpdateOne {
	if i != nil {
		tuo.SetQuantity(*i)
	}
	return tuo
}

// AddQuantity adds i to the "quantity" field.
func (tuo *TransactionUpdateOne) AddQuantity(i int) *TransactionUpdateOne {
	tuo.mutation.AddQuantity(i)
	return tuo
}

// SetTxStatus sets the "tx_status" field.
func (tuo *TransactionUpdateOne) SetTxStatus(ts transaction.TxStatus) *TransactionUpdateOne {
	tuo.mutation.SetTxStatus(ts)
	return tuo
}

// SetNillableTxStatus sets the "tx_status" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTxStatus(ts *transaction.TxStatus) *TransactionUpdateOne {
	if ts != nil {
		tuo.SetTxStatus(*ts)
	}
	return tuo
}

// SetTxDate sets the "tx_date" field.
func (tuo *TransactionUpdateOne) SetTxDate(t time.Time) *TransactionUpdateOne {
	tuo.mutation.SetTxDate(t)
	return tuo
}

// SetNillableTxDate sets the "tx_date" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTxDate(t *time.Time) *TransactionUpdateOne {
	if t != nil {
		tuo.SetTxDate(*t)
	}
	return tuo
}

// ClearTxDate clears the value of the "tx_date" field.
func (tuo *TransactionUpdateOne) ClearTxDate() *TransactionUpdateOne {
	tuo.mutation.ClearTxDate()
	return tuo
}

// SetTxAmount sets the "tx_amount" field.
func (tuo *TransactionUpdateOne) SetTxAmount(f float64) *TransactionUpdateOne {
	tuo.mutation.ResetTxAmount()
	tuo.mutation.SetTxAmount(f)
	return tuo
}

// SetNillableTxAmount sets the "tx_amount" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableTxAmount(f *float64) *TransactionUpdateOne {
	if f != nil {
		tuo.SetTxAmount(*f)
	}
	return tuo
}

// AddTxAmount adds f to the "tx_amount" field.
func (tuo *TransactionUpdateOne) AddTxAmount(f float64) *TransactionUpdateOne {
	tuo.mutation.AddTxAmount(f)
	return tuo
}

// ClearTxAmount clears the value of the "tx_amount" field.
func (tuo *TransactionUpdateOne) ClearTxAmount() *TransactionUpdateOne {
	tuo.mutation.ClearTxAmount()
	return tuo
}

// SetPaymentID sets the "payment_id" field.
func (tuo *TransactionUpdateOne) SetPaymentID(i int64) *TransactionUpdateOne {
	tuo.mutation.ResetPaymentID()
	tuo.mutation.SetPaymentID(i)
	return tuo
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillablePaymentID(i *int64) *TransactionUpdateOne {
	if i != nil {
		tuo.SetPaymentID(*i)
	}
	return tuo
}

// AddPaymentID adds i to the "payment_id" field.
func (tuo *TransactionUpdateOne) AddPaymentID(i int64) *TransactionUpdateOne {
	tuo.mutation.AddPaymentID(i)
	return tuo
}

// ClearPaymentID clears the value of the "payment_id" field.
func (tuo *TransactionUpdateOne) ClearPaymentID() *TransactionUpdateOne {
	tuo.mutation.ClearPaymentID()
	return tuo
}

// AddTxItemIDs adds the "txItems" edge to the TxItem entity by IDs.
func (tuo *TransactionUpdateOne) AddTxItemIDs(ids ...int64) *TransactionUpdateOne {
	tuo.mutation.AddTxItemIDs(ids...)
	return tuo
}

// AddTxItems adds the "txItems" edges to the TxItem entity.
func (tuo *TransactionUpdateOne) AddTxItems(t ...*TxItem) *TransactionUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTxItemIDs(ids...)
}

// AddTxOrderIDs adds the "txOrder" edge to the Order entity by IDs.
func (tuo *TransactionUpdateOne) AddTxOrderIDs(ids ...int64) *TransactionUpdateOne {
	tuo.mutation.AddTxOrderIDs(ids...)
	return tuo
}

// AddTxOrder adds the "txOrder" edges to the Order entity.
func (tuo *TransactionUpdateOne) AddTxOrder(o ...*Order) *TransactionUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tuo.AddTxOrderIDs(ids...)
}

// Mutation returns the TransactionMutation object of the builder.
func (tuo *TransactionUpdateOne) Mutation() *TransactionMutation {
	return tuo.mutation
}

// ClearTxItems clears all "txItems" edges to the TxItem entity.
func (tuo *TransactionUpdateOne) ClearTxItems() *TransactionUpdateOne {
	tuo.mutation.ClearTxItems()
	return tuo
}

// RemoveTxItemIDs removes the "txItems" edge to TxItem entities by IDs.
func (tuo *TransactionUpdateOne) RemoveTxItemIDs(ids ...int64) *TransactionUpdateOne {
	tuo.mutation.RemoveTxItemIDs(ids...)
	return tuo
}

// RemoveTxItems removes "txItems" edges to TxItem entities.
func (tuo *TransactionUpdateOne) RemoveTxItems(t ...*TxItem) *TransactionUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTxItemIDs(ids...)
}

// ClearTxOrder clears all "txOrder" edges to the Order entity.
func (tuo *TransactionUpdateOne) ClearTxOrder() *TransactionUpdateOne {
	tuo.mutation.ClearTxOrder()
	return tuo
}

// RemoveTxOrderIDs removes the "txOrder" edge to Order entities by IDs.
func (tuo *TransactionUpdateOne) RemoveTxOrderIDs(ids ...int64) *TransactionUpdateOne {
	tuo.mutation.RemoveTxOrderIDs(ids...)
	return tuo
}

// RemoveTxOrder removes "txOrder" edges to Order entities.
func (tuo *TransactionUpdateOne) RemoveTxOrder(o ...*Order) *TransactionUpdateOne {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tuo.RemoveTxOrderIDs(ids...)
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tuo *TransactionUpdateOne) Where(ps ...predicate.Transaction) *TransactionUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transaction entity.
func (tuo *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TransactionUpdateOne) check() error {
	if v, ok := tuo.mutation.TxType(); ok {
		if err := transaction.TxTypeValidator(v); err != nil {
			return &ValidationError{Name: "tx_type", err: fmt.Errorf(`ent: validator failed for field "Transaction.tx_type": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.TxStatus(); ok {
		if err := transaction.TxStatusValidator(v); err != nil {
			return &ValidationError{Name: "tx_status", err: fmt.Errorf(`ent: validator failed for field "Transaction.tx_status": %w`, err)}
		}
	}
	return nil
}

func (tuo *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt64))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.TxNo(); ok {
		_spec.SetField(transaction.FieldTxNo, field.TypeString, value)
	}
	if value, ok := tuo.mutation.TxType(); ok {
		_spec.SetField(transaction.FieldTxType, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.UserID(); ok {
		_spec.SetField(transaction.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedUserID(); ok {
		_spec.AddField(transaction.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.Quantity(); ok {
		_spec.SetField(transaction.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedQuantity(); ok {
		_spec.AddField(transaction.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.TxStatus(); ok {
		_spec.SetField(transaction.FieldTxStatus, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.TxDate(); ok {
		_spec.SetField(transaction.FieldTxDate, field.TypeTime, value)
	}
	if tuo.mutation.TxDateCleared() {
		_spec.ClearField(transaction.FieldTxDate, field.TypeTime)
	}
	if value, ok := tuo.mutation.TxAmount(); ok {
		_spec.SetField(transaction.FieldTxAmount, field.TypeFloat64, value)
	}
	if value, ok := tuo.mutation.AddedTxAmount(); ok {
		_spec.AddField(transaction.FieldTxAmount, field.TypeFloat64, value)
	}
	if tuo.mutation.TxAmountCleared() {
		_spec.ClearField(transaction.FieldTxAmount, field.TypeFloat64)
	}
	if value, ok := tuo.mutation.PaymentID(); ok {
		_spec.SetField(transaction.FieldPaymentID, field.TypeInt64, value)
	}
	if value, ok := tuo.mutation.AddedPaymentID(); ok {
		_spec.AddField(transaction.FieldPaymentID, field.TypeInt64, value)
	}
	if tuo.mutation.PaymentIDCleared() {
		_spec.ClearField(transaction.FieldPaymentID, field.TypeInt64)
	}
	if tuo.mutation.TxItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TxItemsTable,
			Columns: []string{transaction.TxItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(txitem.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTxItemsIDs(); len(nodes) > 0 && !tuo.mutation.TxItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TxItemsTable,
			Columns: []string{transaction.TxItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(txitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TxItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TxItemsTable,
			Columns: []string{transaction.TxItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(txitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TxOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TxOrderTable,
			Columns: []string{transaction.TxOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTxOrderIDs(); len(nodes) > 0 && !tuo.mutation.TxOrderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TxOrderTable,
			Columns: []string{transaction.TxOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TxOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TxOrderTable,
			Columns: []string{transaction.TxOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transaction{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
