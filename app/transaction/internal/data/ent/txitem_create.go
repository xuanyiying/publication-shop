// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/txitem"
)

// TxItemCreate is the builder for creating a TxItem entity.
type TxItemCreate struct {
	config
	mutation *TxItemMutation
	hooks    []Hook
}

// SetTxType sets the "tx_type" field.
func (tic *TxItemCreate) SetTxType(tt txitem.TxType) *TxItemCreate {
	tic.mutation.SetTxType(tt)
	return tic
}

// SetTxID sets the "tx_id" field.
func (tic *TxItemCreate) SetTxID(i int64) *TxItemCreate {
	tic.mutation.SetTxID(i)
	return tic
}

// SetBookID sets the "book_id" field.
func (tic *TxItemCreate) SetBookID(i int64) *TxItemCreate {
	tic.mutation.SetBookID(i)
	return tic
}

// SetQuantity sets the "quantity" field.
func (tic *TxItemCreate) SetQuantity(i int) *TxItemCreate {
	tic.mutation.SetQuantity(i)
	return tic
}

// SetPrice sets the "price" field.
func (tic *TxItemCreate) SetPrice(f float64) *TxItemCreate {
	tic.mutation.SetPrice(f)
	return tic
}

// SetIsbn sets the "isbn" field.
func (tic *TxItemCreate) SetIsbn(s string) *TxItemCreate {
	tic.mutation.SetIsbn(s)
	return tic
}

// SetTitle sets the "title" field.
func (tic *TxItemCreate) SetTitle(s string) *TxItemCreate {
	tic.mutation.SetTitle(s)
	return tic
}

// SetAuthor sets the "author" field.
func (tic *TxItemCreate) SetAuthor(s string) *TxItemCreate {
	tic.mutation.SetAuthor(s)
	return tic
}

// SetPublisherID sets the "publisher_id" field.
func (tic *TxItemCreate) SetPublisherID(i int64) *TxItemCreate {
	tic.mutation.SetPublisherID(i)
	return tic
}

// SetNillablePublisherID sets the "publisher_id" field if the given value is not nil.
func (tic *TxItemCreate) SetNillablePublisherID(i *int64) *TxItemCreate {
	if i != nil {
		tic.SetPublisherID(*i)
	}
	return tic
}

// SetImageURL sets the "image_url" field.
func (tic *TxItemCreate) SetImageURL(s string) *TxItemCreate {
	tic.mutation.SetImageURL(s)
	return tic
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (tic *TxItemCreate) SetNillableImageURL(s *string) *TxItemCreate {
	if s != nil {
		tic.SetImageURL(*s)
	}
	return tic
}

// SetID sets the "id" field.
func (tic *TxItemCreate) SetID(i int64) *TxItemCreate {
	tic.mutation.SetID(i)
	return tic
}

// Mutation returns the TxItemMutation object of the builder.
func (tic *TxItemCreate) Mutation() *TxItemMutation {
	return tic.mutation
}

// Save creates the TxItem in the database.
func (tic *TxItemCreate) Save(ctx context.Context) (*TxItem, error) {
	return withHooks(ctx, tic.sqlSave, tic.mutation, tic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tic *TxItemCreate) SaveX(ctx context.Context) *TxItem {
	v, err := tic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tic *TxItemCreate) Exec(ctx context.Context) error {
	_, err := tic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tic *TxItemCreate) ExecX(ctx context.Context) {
	if err := tic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tic *TxItemCreate) check() error {
	if _, ok := tic.mutation.TxType(); !ok {
		return &ValidationError{Name: "tx_type", err: errors.New(`ent: missing required field "TxItem.tx_type"`)}
	}
	if v, ok := tic.mutation.TxType(); ok {
		if err := txitem.TxTypeValidator(v); err != nil {
			return &ValidationError{Name: "tx_type", err: fmt.Errorf(`ent: validator failed for field "TxItem.tx_type": %w`, err)}
		}
	}
	if _, ok := tic.mutation.TxID(); !ok {
		return &ValidationError{Name: "tx_id", err: errors.New(`ent: missing required field "TxItem.tx_id"`)}
	}
	if _, ok := tic.mutation.BookID(); !ok {
		return &ValidationError{Name: "book_id", err: errors.New(`ent: missing required field "TxItem.book_id"`)}
	}
	if _, ok := tic.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "TxItem.quantity"`)}
	}
	if _, ok := tic.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "TxItem.price"`)}
	}
	if _, ok := tic.mutation.Isbn(); !ok {
		return &ValidationError{Name: "isbn", err: errors.New(`ent: missing required field "TxItem.isbn"`)}
	}
	if _, ok := tic.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "TxItem.title"`)}
	}
	if _, ok := tic.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "TxItem.author"`)}
	}
	return nil
}

func (tic *TxItemCreate) sqlSave(ctx context.Context) (*TxItem, error) {
	if err := tic.check(); err != nil {
		return nil, err
	}
	_node, _spec := tic.createSpec()
	if err := sqlgraph.CreateNode(ctx, tic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	tic.mutation.id = &_node.ID
	tic.mutation.done = true
	return _node, nil
}

func (tic *TxItemCreate) createSpec() (*TxItem, *sqlgraph.CreateSpec) {
	var (
		_node = &TxItem{config: tic.config}
		_spec = sqlgraph.NewCreateSpec(txitem.Table, sqlgraph.NewFieldSpec(txitem.FieldID, field.TypeInt64))
	)
	if id, ok := tic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tic.mutation.TxType(); ok {
		_spec.SetField(txitem.FieldTxType, field.TypeEnum, value)
		_node.TxType = value
	}
	if value, ok := tic.mutation.TxID(); ok {
		_spec.SetField(txitem.FieldTxID, field.TypeInt64, value)
		_node.TxID = value
	}
	if value, ok := tic.mutation.BookID(); ok {
		_spec.SetField(txitem.FieldBookID, field.TypeInt64, value)
		_node.BookID = value
	}
	if value, ok := tic.mutation.Quantity(); ok {
		_spec.SetField(txitem.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if value, ok := tic.mutation.Price(); ok {
		_spec.SetField(txitem.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := tic.mutation.Isbn(); ok {
		_spec.SetField(txitem.FieldIsbn, field.TypeString, value)
		_node.Isbn = value
	}
	if value, ok := tic.mutation.Title(); ok {
		_spec.SetField(txitem.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tic.mutation.Author(); ok {
		_spec.SetField(txitem.FieldAuthor, field.TypeString, value)
		_node.Author = value
	}
	if value, ok := tic.mutation.PublisherID(); ok {
		_spec.SetField(txitem.FieldPublisherID, field.TypeInt64, value)
		_node.PublisherID = value
	}
	if value, ok := tic.mutation.ImageURL(); ok {
		_spec.SetField(txitem.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	return _node, _spec
}

// TxItemCreateBulk is the builder for creating many TxItem entities in bulk.
type TxItemCreateBulk struct {
	config
	err      error
	builders []*TxItemCreate
}

// Save creates the TxItem entities in the database.
func (ticb *TxItemCreateBulk) Save(ctx context.Context) ([]*TxItem, error) {
	if ticb.err != nil {
		return nil, ticb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ticb.builders))
	nodes := make([]*TxItem, len(ticb.builders))
	mutators := make([]Mutator, len(ticb.builders))
	for i := range ticb.builders {
		func(i int, root context.Context) {
			builder := ticb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TxItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ticb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ticb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ticb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ticb *TxItemCreateBulk) SaveX(ctx context.Context) []*TxItem {
	v, err := ticb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ticb *TxItemCreateBulk) Exec(ctx context.Context) error {
	_, err := ticb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ticb *TxItemCreateBulk) ExecX(ctx context.Context) {
	if err := ticb.Exec(ctx); err != nil {
		panic(err)
	}
}
