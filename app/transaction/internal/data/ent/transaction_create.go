// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/order"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/transaction"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/txitem"
)

// TransactionCreate is the builder for creating a Transaction entity.
type TransactionCreate struct {
	config
	mutation *TransactionMutation
	hooks    []Hook
}

// SetTxNo sets the "tx_no" field.
func (tc *TransactionCreate) SetTxNo(s string) *TransactionCreate {
	tc.mutation.SetTxNo(s)
	return tc
}

// SetTxType sets the "tx_type" field.
func (tc *TransactionCreate) SetTxType(tt transaction.TxType) *TransactionCreate {
	tc.mutation.SetTxType(tt)
	return tc
}

// SetUserID sets the "user_id" field.
func (tc *TransactionCreate) SetUserID(i int64) *TransactionCreate {
	tc.mutation.SetUserID(i)
	return tc
}

// SetQuantity sets the "quantity" field.
func (tc *TransactionCreate) SetQuantity(i int) *TransactionCreate {
	tc.mutation.SetQuantity(i)
	return tc
}

// SetTxStatus sets the "tx_status" field.
func (tc *TransactionCreate) SetTxStatus(ts transaction.TxStatus) *TransactionCreate {
	tc.mutation.SetTxStatus(ts)
	return tc
}

// SetTxDate sets the "tx_date" field.
func (tc *TransactionCreate) SetTxDate(t time.Time) *TransactionCreate {
	tc.mutation.SetTxDate(t)
	return tc
}

// SetNillableTxDate sets the "tx_date" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableTxDate(t *time.Time) *TransactionCreate {
	if t != nil {
		tc.SetTxDate(*t)
	}
	return tc
}

// SetTxAmount sets the "tx_amount" field.
func (tc *TransactionCreate) SetTxAmount(f float64) *TransactionCreate {
	tc.mutation.SetTxAmount(f)
	return tc
}

// SetNillableTxAmount sets the "tx_amount" field if the given value is not nil.
func (tc *TransactionCreate) SetNillableTxAmount(f *float64) *TransactionCreate {
	if f != nil {
		tc.SetTxAmount(*f)
	}
	return tc
}

// SetPaymentID sets the "payment_id" field.
func (tc *TransactionCreate) SetPaymentID(i int64) *TransactionCreate {
	tc.mutation.SetPaymentID(i)
	return tc
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (tc *TransactionCreate) SetNillablePaymentID(i *int64) *TransactionCreate {
	if i != nil {
		tc.SetPaymentID(*i)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TransactionCreate) SetID(i int64) *TransactionCreate {
	tc.mutation.SetID(i)
	return tc
}

// AddTxItemIDs adds the "txItems" edge to the TxItem entity by IDs.
func (tc *TransactionCreate) AddTxItemIDs(ids ...int64) *TransactionCreate {
	tc.mutation.AddTxItemIDs(ids...)
	return tc
}

// AddTxItems adds the "txItems" edges to the TxItem entity.
func (tc *TransactionCreate) AddTxItems(t ...*TxItem) *TransactionCreate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTxItemIDs(ids...)
}

// AddTxOrderIDs adds the "txOrder" edge to the Order entity by IDs.
func (tc *TransactionCreate) AddTxOrderIDs(ids ...int64) *TransactionCreate {
	tc.mutation.AddTxOrderIDs(ids...)
	return tc
}

// AddTxOrder adds the "txOrder" edges to the Order entity.
func (tc *TransactionCreate) AddTxOrder(o ...*Order) *TransactionCreate {
	ids := make([]int64, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return tc.AddTxOrderIDs(ids...)
}

// Mutation returns the TransactionMutation object of the builder.
func (tc *TransactionCreate) Mutation() *TransactionMutation {
	return tc.mutation
}

// Save creates the Transaction in the database.
func (tc *TransactionCreate) Save(ctx context.Context) (*Transaction, error) {
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransactionCreate) SaveX(ctx context.Context) *Transaction {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TransactionCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TransactionCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TransactionCreate) check() error {
	if _, ok := tc.mutation.TxNo(); !ok {
		return &ValidationError{Name: "tx_no", err: errors.New(`ent: missing required field "Transaction.tx_no"`)}
	}
	if _, ok := tc.mutation.TxType(); !ok {
		return &ValidationError{Name: "tx_type", err: errors.New(`ent: missing required field "Transaction.tx_type"`)}
	}
	if v, ok := tc.mutation.TxType(); ok {
		if err := transaction.TxTypeValidator(v); err != nil {
			return &ValidationError{Name: "tx_type", err: fmt.Errorf(`ent: validator failed for field "Transaction.tx_type": %w`, err)}
		}
	}
	if _, ok := tc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Transaction.user_id"`)}
	}
	if _, ok := tc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "Transaction.quantity"`)}
	}
	if _, ok := tc.mutation.TxStatus(); !ok {
		return &ValidationError{Name: "tx_status", err: errors.New(`ent: missing required field "Transaction.tx_status"`)}
	}
	if v, ok := tc.mutation.TxStatus(); ok {
		if err := transaction.TxStatusValidator(v); err != nil {
			return &ValidationError{Name: "tx_status", err: fmt.Errorf(`ent: validator failed for field "Transaction.tx_status": %w`, err)}
		}
	}
	return nil
}

func (tc *TransactionCreate) sqlSave(ctx context.Context) (*Transaction, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TransactionCreate) createSpec() (*Transaction, *sqlgraph.CreateSpec) {
	var (
		_node = &Transaction{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(transaction.Table, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt64))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.TxNo(); ok {
		_spec.SetField(transaction.FieldTxNo, field.TypeString, value)
		_node.TxNo = value
	}
	if value, ok := tc.mutation.TxType(); ok {
		_spec.SetField(transaction.FieldTxType, field.TypeEnum, value)
		_node.TxType = value
	}
	if value, ok := tc.mutation.UserID(); ok {
		_spec.SetField(transaction.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := tc.mutation.Quantity(); ok {
		_spec.SetField(transaction.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if value, ok := tc.mutation.TxStatus(); ok {
		_spec.SetField(transaction.FieldTxStatus, field.TypeEnum, value)
		_node.TxStatus = value
	}
	if value, ok := tc.mutation.TxDate(); ok {
		_spec.SetField(transaction.FieldTxDate, field.TypeTime, value)
		_node.TxDate = value
	}
	if value, ok := tc.mutation.TxAmount(); ok {
		_spec.SetField(transaction.FieldTxAmount, field.TypeFloat64, value)
		_node.TxAmount = value
	}
	if value, ok := tc.mutation.PaymentID(); ok {
		_spec.SetField(transaction.FieldPaymentID, field.TypeInt64, value)
		_node.PaymentID = value
	}
	if nodes := tc.mutation.TxItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TxItemsTable,
			Columns: []string{transaction.TxItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(txitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.TxOrderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.TxOrderTable,
			Columns: []string{transaction.TxOrderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TransactionCreateBulk is the builder for creating many Transaction entities in bulk.
type TransactionCreateBulk struct {
	config
	err      error
	builders []*TransactionCreate
}

// Save creates the Transaction entities in the database.
func (tcb *TransactionCreateBulk) Save(ctx context.Context) ([]*Transaction, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Transaction, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TransactionCreateBulk) SaveX(ctx context.Context) []*Transaction {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TransactionCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TransactionCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
