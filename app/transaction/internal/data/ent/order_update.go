// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/order"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/predicate"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/transaction"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/txitem"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetOrderNo sets the "order_no" field.
func (ou *OrderUpdate) SetOrderNo(s string) *OrderUpdate {
	ou.mutation.SetOrderNo(s)
	return ou
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderNo(s *string) *OrderUpdate {
	if s != nil {
		ou.SetOrderNo(*s)
	}
	return ou
}

// ClearOrderNo clears the value of the "order_no" field.
func (ou *OrderUpdate) ClearOrderNo() *OrderUpdate {
	ou.mutation.ClearOrderNo()
	return ou
}

// SetTxID sets the "tx_id" field.
func (ou *OrderUpdate) SetTxID(i int64) *OrderUpdate {
	ou.mutation.ResetTxID()
	ou.mutation.SetTxID(i)
	return ou
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTxID(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetTxID(*i)
	}
	return ou
}

// AddTxID adds i to the "tx_id" field.
func (ou *OrderUpdate) AddTxID(i int64) *OrderUpdate {
	ou.mutation.AddTxID(i)
	return ou
}

// SetOrderStatus sets the "order_status" field.
func (ou *OrderUpdate) SetOrderStatus(os order.OrderStatus) *OrderUpdate {
	ou.mutation.SetOrderStatus(os)
	return ou
}

// SetNillableOrderStatus sets the "order_status" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableOrderStatus(os *order.OrderStatus) *OrderUpdate {
	if os != nil {
		ou.SetOrderStatus(*os)
	}
	return ou
}

// SetDeliveredAddress sets the "delivered_address" field.
func (ou *OrderUpdate) SetDeliveredAddress(s string) *OrderUpdate {
	ou.mutation.SetDeliveredAddress(s)
	return ou
}

// SetNillableDeliveredAddress sets the "delivered_address" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableDeliveredAddress(s *string) *OrderUpdate {
	if s != nil {
		ou.SetDeliveredAddress(*s)
	}
	return ou
}

// ClearDeliveredAddress clears the value of the "delivered_address" field.
func (ou *OrderUpdate) ClearDeliveredAddress() *OrderUpdate {
	ou.mutation.ClearDeliveredAddress()
	return ou
}

// SetShippingCost sets the "shipping_cost" field.
func (ou *OrderUpdate) SetShippingCost(f float64) *OrderUpdate {
	ou.mutation.ResetShippingCost()
	ou.mutation.SetShippingCost(f)
	return ou
}

// SetNillableShippingCost sets the "shipping_cost" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippingCost(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetShippingCost(*f)
	}
	return ou
}

// AddShippingCost adds f to the "shipping_cost" field.
func (ou *OrderUpdate) AddShippingCost(f float64) *OrderUpdate {
	ou.mutation.AddShippingCost(f)
	return ou
}

// ClearShippingCost clears the value of the "shipping_cost" field.
func (ou *OrderUpdate) ClearShippingCost() *OrderUpdate {
	ou.mutation.ClearShippingCost()
	return ou
}

// SetTotalAmount sets the "total_amount" field.
func (ou *OrderUpdate) SetTotalAmount(f float64) *OrderUpdate {
	ou.mutation.ResetTotalAmount()
	ou.mutation.SetTotalAmount(f)
	return ou
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTotalAmount(f *float64) *OrderUpdate {
	if f != nil {
		ou.SetTotalAmount(*f)
	}
	return ou
}

// AddTotalAmount adds f to the "total_amount" field.
func (ou *OrderUpdate) AddTotalAmount(f float64) *OrderUpdate {
	ou.mutation.AddTotalAmount(f)
	return ou
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (ou *OrderUpdate) ClearTotalAmount() *OrderUpdate {
	ou.mutation.ClearTotalAmount()
	return ou
}

// SetPlacedUserID sets the "placed_user_id" field.
func (ou *OrderUpdate) SetPlacedUserID(i int64) *OrderUpdate {
	ou.mutation.ResetPlacedUserID()
	ou.mutation.SetPlacedUserID(i)
	return ou
}

// SetNillablePlacedUserID sets the "placed_user_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePlacedUserID(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetPlacedUserID(*i)
	}
	return ou
}

// AddPlacedUserID adds i to the "placed_user_id" field.
func (ou *OrderUpdate) AddPlacedUserID(i int64) *OrderUpdate {
	ou.mutation.AddPlacedUserID(i)
	return ou
}

// SetPlacedAt sets the "placed_at" field.
func (ou *OrderUpdate) SetPlacedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetPlacedAt(t)
	return ou
}

// SetNillablePlacedAt sets the "placed_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePlacedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetPlacedAt(*t)
	}
	return ou
}

// ClearPlacedAt clears the value of the "placed_at" field.
func (ou *OrderUpdate) ClearPlacedAt() *OrderUpdate {
	ou.mutation.ClearPlacedAt()
	return ou
}

// SetShippedAddress sets the "shipped_address" field.
func (ou *OrderUpdate) SetShippedAddress(s string) *OrderUpdate {
	ou.mutation.SetShippedAddress(s)
	return ou
}

// SetNillableShippedAddress sets the "shipped_address" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippedAddress(s *string) *OrderUpdate {
	if s != nil {
		ou.SetShippedAddress(*s)
	}
	return ou
}

// ClearShippedAddress clears the value of the "shipped_address" field.
func (ou *OrderUpdate) ClearShippedAddress() *OrderUpdate {
	ou.mutation.ClearShippedAddress()
	return ou
}

// SetShippedAt sets the "shipped_at" field.
func (ou *OrderUpdate) SetShippedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetShippedAt(t)
	return ou
}

// SetNillableShippedAt sets the "shipped_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableShippedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetShippedAt(*t)
	}
	return ou
}

// ClearShippedAt clears the value of the "shipped_at" field.
func (ou *OrderUpdate) ClearShippedAt() *OrderUpdate {
	ou.mutation.ClearShippedAt()
	return ou
}

// SetPaymentID sets the "payment_id" field.
func (ou *OrderUpdate) SetPaymentID(i int64) *OrderUpdate {
	ou.mutation.ResetPaymentID()
	ou.mutation.SetPaymentID(i)
	return ou
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePaymentID(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetPaymentID(*i)
	}
	return ou
}

// AddPaymentID adds i to the "payment_id" field.
func (ou *OrderUpdate) AddPaymentID(i int64) *OrderUpdate {
	ou.mutation.AddPaymentID(i)
	return ou
}

// ClearPaymentID clears the value of the "payment_id" field.
func (ou *OrderUpdate) ClearPaymentID() *OrderUpdate {
	ou.mutation.ClearPaymentID()
	return ou
}

// AddTransactionIDs adds the "transaction" edge to the Transaction entity by IDs.
func (ou *OrderUpdate) AddTransactionIDs(ids ...int64) *OrderUpdate {
	ou.mutation.AddTransactionIDs(ids...)
	return ou
}

// AddTransaction adds the "transaction" edges to the Transaction entity.
func (ou *OrderUpdate) AddTransaction(t ...*Transaction) *OrderUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ou.AddTransactionIDs(ids...)
}

// AddTxItemIDs adds the "txItems" edge to the TxItem entity by IDs.
func (ou *OrderUpdate) AddTxItemIDs(ids ...int64) *OrderUpdate {
	ou.mutation.AddTxItemIDs(ids...)
	return ou
}

// AddTxItems adds the "txItems" edges to the TxItem entity.
func (ou *OrderUpdate) AddTxItems(t ...*TxItem) *OrderUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ou.AddTxItemIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearTransaction clears all "transaction" edges to the Transaction entity.
func (ou *OrderUpdate) ClearTransaction() *OrderUpdate {
	ou.mutation.ClearTransaction()
	return ou
}

// RemoveTransactionIDs removes the "transaction" edge to Transaction entities by IDs.
func (ou *OrderUpdate) RemoveTransactionIDs(ids ...int64) *OrderUpdate {
	ou.mutation.RemoveTransactionIDs(ids...)
	return ou
}

// RemoveTransaction removes "transaction" edges to Transaction entities.
func (ou *OrderUpdate) RemoveTransaction(t ...*Transaction) *OrderUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ou.RemoveTransactionIDs(ids...)
}

// ClearTxItems clears all "txItems" edges to the TxItem entity.
func (ou *OrderUpdate) ClearTxItems() *OrderUpdate {
	ou.mutation.ClearTxItems()
	return ou
}

// RemoveTxItemIDs removes the "txItems" edge to TxItem entities by IDs.
func (ou *OrderUpdate) RemoveTxItemIDs(ids ...int64) *OrderUpdate {
	ou.mutation.RemoveTxItemIDs(ids...)
	return ou
}

// RemoveTxItems removes "txItems" edges to TxItem entities.
func (ou *OrderUpdate) RemoveTxItems(t ...*TxItem) *OrderUpdate {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ou.RemoveTxItemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if v, ok := ou.mutation.OrderStatus(); ok {
		if err := order.OrderStatusValidator(v); err != nil {
			return &ValidationError{Name: "order_status", err: fmt.Errorf(`ent: validator failed for field "Order.order_status": %w`, err)}
		}
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.OrderNo(); ok {
		_spec.SetField(order.FieldOrderNo, field.TypeString, value)
	}
	if ou.mutation.OrderNoCleared() {
		_spec.ClearField(order.FieldOrderNo, field.TypeString)
	}
	if value, ok := ou.mutation.TxID(); ok {
		_spec.SetField(order.FieldTxID, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedTxID(); ok {
		_spec.AddField(order.FieldTxID, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.OrderStatus(); ok {
		_spec.SetField(order.FieldOrderStatus, field.TypeEnum, value)
	}
	if value, ok := ou.mutation.DeliveredAddress(); ok {
		_spec.SetField(order.FieldDeliveredAddress, field.TypeString, value)
	}
	if ou.mutation.DeliveredAddressCleared() {
		_spec.ClearField(order.FieldDeliveredAddress, field.TypeString)
	}
	if value, ok := ou.mutation.ShippingCost(); ok {
		_spec.SetField(order.FieldShippingCost, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedShippingCost(); ok {
		_spec.AddField(order.FieldShippingCost, field.TypeFloat64, value)
	}
	if ou.mutation.ShippingCostCleared() {
		_spec.ClearField(order.FieldShippingCost, field.TypeFloat64)
	}
	if value, ok := ou.mutation.TotalAmount(); ok {
		_spec.SetField(order.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedTotalAmount(); ok {
		_spec.AddField(order.FieldTotalAmount, field.TypeFloat64, value)
	}
	if ou.mutation.TotalAmountCleared() {
		_spec.ClearField(order.FieldTotalAmount, field.TypeFloat64)
	}
	if value, ok := ou.mutation.PlacedUserID(); ok {
		_spec.SetField(order.FieldPlacedUserID, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedPlacedUserID(); ok {
		_spec.AddField(order.FieldPlacedUserID, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.PlacedAt(); ok {
		_spec.SetField(order.FieldPlacedAt, field.TypeTime, value)
	}
	if ou.mutation.PlacedAtCleared() {
		_spec.ClearField(order.FieldPlacedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.ShippedAddress(); ok {
		_spec.SetField(order.FieldShippedAddress, field.TypeString, value)
	}
	if ou.mutation.ShippedAddressCleared() {
		_spec.ClearField(order.FieldShippedAddress, field.TypeString)
	}
	if value, ok := ou.mutation.ShippedAt(); ok {
		_spec.SetField(order.FieldShippedAt, field.TypeTime, value)
	}
	if ou.mutation.ShippedAtCleared() {
		_spec.ClearField(order.FieldShippedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.PaymentID(); ok {
		_spec.SetField(order.FieldPaymentID, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedPaymentID(); ok {
		_spec.AddField(order.FieldPaymentID, field.TypeInt64, value)
	}
	if ou.mutation.PaymentIDCleared() {
		_spec.ClearField(order.FieldPaymentID, field.TypeInt64)
	}
	if ou.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.TransactionTable,
			Columns: []string{order.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedTransactionIDs(); len(nodes) > 0 && !ou.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.TransactionTable,
			Columns: []string{order.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.TransactionTable,
			Columns: []string{order.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.TxItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.TxItemsTable,
			Columns: []string{order.TxItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(txitem.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedTxItemsIDs(); len(nodes) > 0 && !ou.mutation.TxItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.TxItemsTable,
			Columns: []string{order.TxItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(txitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.TxItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.TxItemsTable,
			Columns: []string{order.TxItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(txitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetOrderNo sets the "order_no" field.
func (ouo *OrderUpdateOne) SetOrderNo(s string) *OrderUpdateOne {
	ouo.mutation.SetOrderNo(s)
	return ouo
}

// SetNillableOrderNo sets the "order_no" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderNo(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetOrderNo(*s)
	}
	return ouo
}

// ClearOrderNo clears the value of the "order_no" field.
func (ouo *OrderUpdateOne) ClearOrderNo() *OrderUpdateOne {
	ouo.mutation.ClearOrderNo()
	return ouo
}

// SetTxID sets the "tx_id" field.
func (ouo *OrderUpdateOne) SetTxID(i int64) *OrderUpdateOne {
	ouo.mutation.ResetTxID()
	ouo.mutation.SetTxID(i)
	return ouo
}

// SetNillableTxID sets the "tx_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTxID(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetTxID(*i)
	}
	return ouo
}

// AddTxID adds i to the "tx_id" field.
func (ouo *OrderUpdateOne) AddTxID(i int64) *OrderUpdateOne {
	ouo.mutation.AddTxID(i)
	return ouo
}

// SetOrderStatus sets the "order_status" field.
func (ouo *OrderUpdateOne) SetOrderStatus(os order.OrderStatus) *OrderUpdateOne {
	ouo.mutation.SetOrderStatus(os)
	return ouo
}

// SetNillableOrderStatus sets the "order_status" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableOrderStatus(os *order.OrderStatus) *OrderUpdateOne {
	if os != nil {
		ouo.SetOrderStatus(*os)
	}
	return ouo
}

// SetDeliveredAddress sets the "delivered_address" field.
func (ouo *OrderUpdateOne) SetDeliveredAddress(s string) *OrderUpdateOne {
	ouo.mutation.SetDeliveredAddress(s)
	return ouo
}

// SetNillableDeliveredAddress sets the "delivered_address" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableDeliveredAddress(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetDeliveredAddress(*s)
	}
	return ouo
}

// ClearDeliveredAddress clears the value of the "delivered_address" field.
func (ouo *OrderUpdateOne) ClearDeliveredAddress() *OrderUpdateOne {
	ouo.mutation.ClearDeliveredAddress()
	return ouo
}

// SetShippingCost sets the "shipping_cost" field.
func (ouo *OrderUpdateOne) SetShippingCost(f float64) *OrderUpdateOne {
	ouo.mutation.ResetShippingCost()
	ouo.mutation.SetShippingCost(f)
	return ouo
}

// SetNillableShippingCost sets the "shipping_cost" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippingCost(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetShippingCost(*f)
	}
	return ouo
}

// AddShippingCost adds f to the "shipping_cost" field.
func (ouo *OrderUpdateOne) AddShippingCost(f float64) *OrderUpdateOne {
	ouo.mutation.AddShippingCost(f)
	return ouo
}

// ClearShippingCost clears the value of the "shipping_cost" field.
func (ouo *OrderUpdateOne) ClearShippingCost() *OrderUpdateOne {
	ouo.mutation.ClearShippingCost()
	return ouo
}

// SetTotalAmount sets the "total_amount" field.
func (ouo *OrderUpdateOne) SetTotalAmount(f float64) *OrderUpdateOne {
	ouo.mutation.ResetTotalAmount()
	ouo.mutation.SetTotalAmount(f)
	return ouo
}

// SetNillableTotalAmount sets the "total_amount" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTotalAmount(f *float64) *OrderUpdateOne {
	if f != nil {
		ouo.SetTotalAmount(*f)
	}
	return ouo
}

// AddTotalAmount adds f to the "total_amount" field.
func (ouo *OrderUpdateOne) AddTotalAmount(f float64) *OrderUpdateOne {
	ouo.mutation.AddTotalAmount(f)
	return ouo
}

// ClearTotalAmount clears the value of the "total_amount" field.
func (ouo *OrderUpdateOne) ClearTotalAmount() *OrderUpdateOne {
	ouo.mutation.ClearTotalAmount()
	return ouo
}

// SetPlacedUserID sets the "placed_user_id" field.
func (ouo *OrderUpdateOne) SetPlacedUserID(i int64) *OrderUpdateOne {
	ouo.mutation.ResetPlacedUserID()
	ouo.mutation.SetPlacedUserID(i)
	return ouo
}

// SetNillablePlacedUserID sets the "placed_user_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePlacedUserID(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetPlacedUserID(*i)
	}
	return ouo
}

// AddPlacedUserID adds i to the "placed_user_id" field.
func (ouo *OrderUpdateOne) AddPlacedUserID(i int64) *OrderUpdateOne {
	ouo.mutation.AddPlacedUserID(i)
	return ouo
}

// SetPlacedAt sets the "placed_at" field.
func (ouo *OrderUpdateOne) SetPlacedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetPlacedAt(t)
	return ouo
}

// SetNillablePlacedAt sets the "placed_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePlacedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetPlacedAt(*t)
	}
	return ouo
}

// ClearPlacedAt clears the value of the "placed_at" field.
func (ouo *OrderUpdateOne) ClearPlacedAt() *OrderUpdateOne {
	ouo.mutation.ClearPlacedAt()
	return ouo
}

// SetShippedAddress sets the "shipped_address" field.
func (ouo *OrderUpdateOne) SetShippedAddress(s string) *OrderUpdateOne {
	ouo.mutation.SetShippedAddress(s)
	return ouo
}

// SetNillableShippedAddress sets the "shipped_address" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippedAddress(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetShippedAddress(*s)
	}
	return ouo
}

// ClearShippedAddress clears the value of the "shipped_address" field.
func (ouo *OrderUpdateOne) ClearShippedAddress() *OrderUpdateOne {
	ouo.mutation.ClearShippedAddress()
	return ouo
}

// SetShippedAt sets the "shipped_at" field.
func (ouo *OrderUpdateOne) SetShippedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetShippedAt(t)
	return ouo
}

// SetNillableShippedAt sets the "shipped_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableShippedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetShippedAt(*t)
	}
	return ouo
}

// ClearShippedAt clears the value of the "shipped_at" field.
func (ouo *OrderUpdateOne) ClearShippedAt() *OrderUpdateOne {
	ouo.mutation.ClearShippedAt()
	return ouo
}

// SetPaymentID sets the "payment_id" field.
func (ouo *OrderUpdateOne) SetPaymentID(i int64) *OrderUpdateOne {
	ouo.mutation.ResetPaymentID()
	ouo.mutation.SetPaymentID(i)
	return ouo
}

// SetNillablePaymentID sets the "payment_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePaymentID(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetPaymentID(*i)
	}
	return ouo
}

// AddPaymentID adds i to the "payment_id" field.
func (ouo *OrderUpdateOne) AddPaymentID(i int64) *OrderUpdateOne {
	ouo.mutation.AddPaymentID(i)
	return ouo
}

// ClearPaymentID clears the value of the "payment_id" field.
func (ouo *OrderUpdateOne) ClearPaymentID() *OrderUpdateOne {
	ouo.mutation.ClearPaymentID()
	return ouo
}

// AddTransactionIDs adds the "transaction" edge to the Transaction entity by IDs.
func (ouo *OrderUpdateOne) AddTransactionIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.AddTransactionIDs(ids...)
	return ouo
}

// AddTransaction adds the "transaction" edges to the Transaction entity.
func (ouo *OrderUpdateOne) AddTransaction(t ...*Transaction) *OrderUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouo.AddTransactionIDs(ids...)
}

// AddTxItemIDs adds the "txItems" edge to the TxItem entity by IDs.
func (ouo *OrderUpdateOne) AddTxItemIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.AddTxItemIDs(ids...)
	return ouo
}

// AddTxItems adds the "txItems" edges to the TxItem entity.
func (ouo *OrderUpdateOne) AddTxItems(t ...*TxItem) *OrderUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouo.AddTxItemIDs(ids...)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearTransaction clears all "transaction" edges to the Transaction entity.
func (ouo *OrderUpdateOne) ClearTransaction() *OrderUpdateOne {
	ouo.mutation.ClearTransaction()
	return ouo
}

// RemoveTransactionIDs removes the "transaction" edge to Transaction entities by IDs.
func (ouo *OrderUpdateOne) RemoveTransactionIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.RemoveTransactionIDs(ids...)
	return ouo
}

// RemoveTransaction removes "transaction" edges to Transaction entities.
func (ouo *OrderUpdateOne) RemoveTransaction(t ...*Transaction) *OrderUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouo.RemoveTransactionIDs(ids...)
}

// ClearTxItems clears all "txItems" edges to the TxItem entity.
func (ouo *OrderUpdateOne) ClearTxItems() *OrderUpdateOne {
	ouo.mutation.ClearTxItems()
	return ouo
}

// RemoveTxItemIDs removes the "txItems" edge to TxItem entities by IDs.
func (ouo *OrderUpdateOne) RemoveTxItemIDs(ids ...int64) *OrderUpdateOne {
	ouo.mutation.RemoveTxItemIDs(ids...)
	return ouo
}

// RemoveTxItems removes "txItems" edges to TxItem entities.
func (ouo *OrderUpdateOne) RemoveTxItems(t ...*TxItem) *OrderUpdateOne {
	ids := make([]int64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouo.RemoveTxItemIDs(ids...)
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if v, ok := ouo.mutation.OrderStatus(); ok {
		if err := order.OrderStatusValidator(v); err != nil {
			return &ValidationError{Name: "order_status", err: fmt.Errorf(`ent: validator failed for field "Order.order_status": %w`, err)}
		}
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt64))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.OrderNo(); ok {
		_spec.SetField(order.FieldOrderNo, field.TypeString, value)
	}
	if ouo.mutation.OrderNoCleared() {
		_spec.ClearField(order.FieldOrderNo, field.TypeString)
	}
	if value, ok := ouo.mutation.TxID(); ok {
		_spec.SetField(order.FieldTxID, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedTxID(); ok {
		_spec.AddField(order.FieldTxID, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.OrderStatus(); ok {
		_spec.SetField(order.FieldOrderStatus, field.TypeEnum, value)
	}
	if value, ok := ouo.mutation.DeliveredAddress(); ok {
		_spec.SetField(order.FieldDeliveredAddress, field.TypeString, value)
	}
	if ouo.mutation.DeliveredAddressCleared() {
		_spec.ClearField(order.FieldDeliveredAddress, field.TypeString)
	}
	if value, ok := ouo.mutation.ShippingCost(); ok {
		_spec.SetField(order.FieldShippingCost, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedShippingCost(); ok {
		_spec.AddField(order.FieldShippingCost, field.TypeFloat64, value)
	}
	if ouo.mutation.ShippingCostCleared() {
		_spec.ClearField(order.FieldShippingCost, field.TypeFloat64)
	}
	if value, ok := ouo.mutation.TotalAmount(); ok {
		_spec.SetField(order.FieldTotalAmount, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedTotalAmount(); ok {
		_spec.AddField(order.FieldTotalAmount, field.TypeFloat64, value)
	}
	if ouo.mutation.TotalAmountCleared() {
		_spec.ClearField(order.FieldTotalAmount, field.TypeFloat64)
	}
	if value, ok := ouo.mutation.PlacedUserID(); ok {
		_spec.SetField(order.FieldPlacedUserID, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedPlacedUserID(); ok {
		_spec.AddField(order.FieldPlacedUserID, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.PlacedAt(); ok {
		_spec.SetField(order.FieldPlacedAt, field.TypeTime, value)
	}
	if ouo.mutation.PlacedAtCleared() {
		_spec.ClearField(order.FieldPlacedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.ShippedAddress(); ok {
		_spec.SetField(order.FieldShippedAddress, field.TypeString, value)
	}
	if ouo.mutation.ShippedAddressCleared() {
		_spec.ClearField(order.FieldShippedAddress, field.TypeString)
	}
	if value, ok := ouo.mutation.ShippedAt(); ok {
		_spec.SetField(order.FieldShippedAt, field.TypeTime, value)
	}
	if ouo.mutation.ShippedAtCleared() {
		_spec.ClearField(order.FieldShippedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.PaymentID(); ok {
		_spec.SetField(order.FieldPaymentID, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedPaymentID(); ok {
		_spec.AddField(order.FieldPaymentID, field.TypeInt64, value)
	}
	if ouo.mutation.PaymentIDCleared() {
		_spec.ClearField(order.FieldPaymentID, field.TypeInt64)
	}
	if ouo.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.TransactionTable,
			Columns: []string{order.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedTransactionIDs(); len(nodes) > 0 && !ouo.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.TransactionTable,
			Columns: []string{order.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.TransactionTable,
			Columns: []string{order.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.TxItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.TxItemsTable,
			Columns: []string{order.TxItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(txitem.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedTxItemsIDs(); len(nodes) > 0 && !ouo.mutation.TxItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.TxItemsTable,
			Columns: []string{order.TxItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(txitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.TxItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   order.TxItemsTable,
			Columns: []string{order.TxItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(txitem.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
