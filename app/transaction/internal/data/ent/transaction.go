// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/transaction"
)

// Transaction is the model entity for the Transaction schema.
type Transaction struct {
	config `json:"-"`
	// ID of the ent.
	// 交易ID，主键
	ID int64 `json:"id,omitempty"`
	// 交易编号
	TxNo string `json:"tx_no,omitempty"`
	// 交易类型（买或卖）
	TxType transaction.TxType `json:"tx_type,omitempty"`
	// 用户ID
	UserID int64 `json:"user_id,omitempty"`
	// 交易数量
	Quantity int `json:"quantity,omitempty"`
	// 交易状态
	TxStatus transaction.TxStatus `json:"tx_status,omitempty"`
	// 交易日期
	TxDate time.Time `json:"tx_date,omitempty"`
	// 交易金额
	TxAmount float64 `json:"tx_amount,omitempty"`
	// 支付ID
	PaymentID int64 `json:"payment_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransactionQuery when eager-loading is set.
	Edges             TransactionEdges `json:"edges"`
	order_transaction *int64
	selectValues      sql.SelectValues
}

// TransactionEdges holds the relations/edges for other nodes in the graph.
type TransactionEdges struct {
	// TxItems holds the value of the txItems edge.
	TxItems []*TxItem `json:"txItems,omitempty"`
	// TxOrder holds the value of the txOrder edge.
	TxOrder []*Order `json:"txOrder,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TxItemsOrErr returns the TxItems value or an error if the edge
// was not loaded in eager-loading.
func (e TransactionEdges) TxItemsOrErr() ([]*TxItem, error) {
	if e.loadedTypes[0] {
		return e.TxItems, nil
	}
	return nil, &NotLoadedError{edge: "txItems"}
}

// TxOrderOrErr returns the TxOrder value or an error if the edge
// was not loaded in eager-loading.
func (e TransactionEdges) TxOrderOrErr() ([]*Order, error) {
	if e.loadedTypes[1] {
		return e.TxOrder, nil
	}
	return nil, &NotLoadedError{edge: "txOrder"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transaction.FieldTxAmount:
			values[i] = new(sql.NullFloat64)
		case transaction.FieldID, transaction.FieldUserID, transaction.FieldQuantity, transaction.FieldPaymentID:
			values[i] = new(sql.NullInt64)
		case transaction.FieldTxNo, transaction.FieldTxType, transaction.FieldTxStatus:
			values[i] = new(sql.NullString)
		case transaction.FieldTxDate:
			values[i] = new(sql.NullTime)
		case transaction.ForeignKeys[0]: // order_transaction
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transaction fields.
func (t *Transaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transaction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int64(value.Int64)
		case transaction.FieldTxNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tx_no", values[i])
			} else if value.Valid {
				t.TxNo = value.String
			}
		case transaction.FieldTxType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tx_type", values[i])
			} else if value.Valid {
				t.TxType = transaction.TxType(value.String)
			}
		case transaction.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				t.UserID = value.Int64
			}
		case transaction.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				t.Quantity = int(value.Int64)
			}
		case transaction.FieldTxStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tx_status", values[i])
			} else if value.Valid {
				t.TxStatus = transaction.TxStatus(value.String)
			}
		case transaction.FieldTxDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field tx_date", values[i])
			} else if value.Valid {
				t.TxDate = value.Time
			}
		case transaction.FieldTxAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field tx_amount", values[i])
			} else if value.Valid {
				t.TxAmount = value.Float64
			}
		case transaction.FieldPaymentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field payment_id", values[i])
			} else if value.Valid {
				t.PaymentID = value.Int64
			}
		case transaction.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field order_transaction", value)
			} else if value.Valid {
				t.order_transaction = new(int64)
				*t.order_transaction = int64(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Transaction.
// This includes values selected through modifiers, order, etc.
func (t *Transaction) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryTxItems queries the "txItems" edge of the Transaction entity.
func (t *Transaction) QueryTxItems() *TxItemQuery {
	return NewTransactionClient(t.config).QueryTxItems(t)
}

// QueryTxOrder queries the "txOrder" edge of the Transaction entity.
func (t *Transaction) QueryTxOrder() *OrderQuery {
	return NewTransactionClient(t.config).QueryTxOrder(t)
}

// Update returns a builder for updating this Transaction.
// Note that you need to call Transaction.Unwrap() before calling this method if this Transaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transaction) Update() *TransactionUpdateOne {
	return NewTransactionClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Transaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transaction) Unwrap() *Transaction {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transaction is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transaction) String() string {
	var builder strings.Builder
	builder.WriteString("Transaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("tx_no=")
	builder.WriteString(t.TxNo)
	builder.WriteString(", ")
	builder.WriteString("tx_type=")
	builder.WriteString(fmt.Sprintf("%v", t.TxType))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", t.UserID))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", t.Quantity))
	builder.WriteString(", ")
	builder.WriteString("tx_status=")
	builder.WriteString(fmt.Sprintf("%v", t.TxStatus))
	builder.WriteString(", ")
	builder.WriteString("tx_date=")
	builder.WriteString(t.TxDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("tx_amount=")
	builder.WriteString(fmt.Sprintf("%v", t.TxAmount))
	builder.WriteString(", ")
	builder.WriteString("payment_id=")
	builder.WriteString(fmt.Sprintf("%v", t.PaymentID))
	builder.WriteByte(')')
	return builder.String()
}

// Transactions is a parsable slice of Transaction.
type Transactions []*Transaction
