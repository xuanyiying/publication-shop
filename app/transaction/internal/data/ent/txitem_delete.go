// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/predicate"
	"github.com/xuanyiying/publication-shop/app/transaction/internal/data/ent/txitem"
)

// TxItemDelete is the builder for deleting a TxItem entity.
type TxItemDelete struct {
	config
	hooks    []Hook
	mutation *TxItemMutation
}

// Where appends a list predicates to the TxItemDelete builder.
func (tid *TxItemDelete) Where(ps ...predicate.TxItem) *TxItemDelete {
	tid.mutation.Where(ps...)
	return tid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tid *TxItemDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tid.sqlExec, tid.mutation, tid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tid *TxItemDelete) ExecX(ctx context.Context) int {
	n, err := tid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tid *TxItemDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(txitem.Table, sqlgraph.NewFieldSpec(txitem.FieldID, field.TypeInt64))
	if ps := tid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tid.mutation.done = true
	return affected, err
}

// TxItemDeleteOne is the builder for deleting a single TxItem entity.
type TxItemDeleteOne struct {
	tid *TxItemDelete
}

// Where appends a list predicates to the TxItemDelete builder.
func (tido *TxItemDeleteOne) Where(ps ...predicate.TxItem) *TxItemDeleteOne {
	tido.tid.mutation.Where(ps...)
	return tido
}

// Exec executes the deletion query.
func (tido *TxItemDeleteOne) Exec(ctx context.Context) error {
	n, err := tido.tid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{txitem.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tido *TxItemDeleteOne) ExecX(ctx context.Context) {
	if err := tido.Exec(ctx); err != nil {
		panic(err)
	}
}
