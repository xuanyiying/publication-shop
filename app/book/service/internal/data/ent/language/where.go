// Code generated by ent, DO NOT EDIT.

package language

import (
	"entgo.io/ent/dialect/sql"
	"github.com/xuanyiying/publication-shop/app/book/service/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Language {
	return predicate.Language(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Language {
	return predicate.Language(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Language {
	return predicate.Language(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Language {
	return predicate.Language(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Language {
	return predicate.Language(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Language {
	return predicate.Language(sql.FieldLTE(FieldID, id))
}

// LanguageName applies equality check predicate on the "language_name" field. It's identical to LanguageNameEQ.
func LanguageName(v string) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldLanguageName, v))
}

// LanguageCode applies equality check predicate on the "language_code" field. It's identical to LanguageCodeEQ.
func LanguageCode(v string) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldLanguageCode, v))
}

// LanguageNameEQ applies the EQ predicate on the "language_name" field.
func LanguageNameEQ(v string) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldLanguageName, v))
}

// LanguageNameNEQ applies the NEQ predicate on the "language_name" field.
func LanguageNameNEQ(v string) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldLanguageName, v))
}

// LanguageNameIn applies the In predicate on the "language_name" field.
func LanguageNameIn(vs ...string) predicate.Language {
	return predicate.Language(sql.FieldIn(FieldLanguageName, vs...))
}

// LanguageNameNotIn applies the NotIn predicate on the "language_name" field.
func LanguageNameNotIn(vs ...string) predicate.Language {
	return predicate.Language(sql.FieldNotIn(FieldLanguageName, vs...))
}

// LanguageNameGT applies the GT predicate on the "language_name" field.
func LanguageNameGT(v string) predicate.Language {
	return predicate.Language(sql.FieldGT(FieldLanguageName, v))
}

// LanguageNameGTE applies the GTE predicate on the "language_name" field.
func LanguageNameGTE(v string) predicate.Language {
	return predicate.Language(sql.FieldGTE(FieldLanguageName, v))
}

// LanguageNameLT applies the LT predicate on the "language_name" field.
func LanguageNameLT(v string) predicate.Language {
	return predicate.Language(sql.FieldLT(FieldLanguageName, v))
}

// LanguageNameLTE applies the LTE predicate on the "language_name" field.
func LanguageNameLTE(v string) predicate.Language {
	return predicate.Language(sql.FieldLTE(FieldLanguageName, v))
}

// LanguageNameContains applies the Contains predicate on the "language_name" field.
func LanguageNameContains(v string) predicate.Language {
	return predicate.Language(sql.FieldContains(FieldLanguageName, v))
}

// LanguageNameHasPrefix applies the HasPrefix predicate on the "language_name" field.
func LanguageNameHasPrefix(v string) predicate.Language {
	return predicate.Language(sql.FieldHasPrefix(FieldLanguageName, v))
}

// LanguageNameHasSuffix applies the HasSuffix predicate on the "language_name" field.
func LanguageNameHasSuffix(v string) predicate.Language {
	return predicate.Language(sql.FieldHasSuffix(FieldLanguageName, v))
}

// LanguageNameIsNil applies the IsNil predicate on the "language_name" field.
func LanguageNameIsNil() predicate.Language {
	return predicate.Language(sql.FieldIsNull(FieldLanguageName))
}

// LanguageNameNotNil applies the NotNil predicate on the "language_name" field.
func LanguageNameNotNil() predicate.Language {
	return predicate.Language(sql.FieldNotNull(FieldLanguageName))
}

// LanguageNameEqualFold applies the EqualFold predicate on the "language_name" field.
func LanguageNameEqualFold(v string) predicate.Language {
	return predicate.Language(sql.FieldEqualFold(FieldLanguageName, v))
}

// LanguageNameContainsFold applies the ContainsFold predicate on the "language_name" field.
func LanguageNameContainsFold(v string) predicate.Language {
	return predicate.Language(sql.FieldContainsFold(FieldLanguageName, v))
}

// LanguageCodeEQ applies the EQ predicate on the "language_code" field.
func LanguageCodeEQ(v string) predicate.Language {
	return predicate.Language(sql.FieldEQ(FieldLanguageCode, v))
}

// LanguageCodeNEQ applies the NEQ predicate on the "language_code" field.
func LanguageCodeNEQ(v string) predicate.Language {
	return predicate.Language(sql.FieldNEQ(FieldLanguageCode, v))
}

// LanguageCodeIn applies the In predicate on the "language_code" field.
func LanguageCodeIn(vs ...string) predicate.Language {
	return predicate.Language(sql.FieldIn(FieldLanguageCode, vs...))
}

// LanguageCodeNotIn applies the NotIn predicate on the "language_code" field.
func LanguageCodeNotIn(vs ...string) predicate.Language {
	return predicate.Language(sql.FieldNotIn(FieldLanguageCode, vs...))
}

// LanguageCodeGT applies the GT predicate on the "language_code" field.
func LanguageCodeGT(v string) predicate.Language {
	return predicate.Language(sql.FieldGT(FieldLanguageCode, v))
}

// LanguageCodeGTE applies the GTE predicate on the "language_code" field.
func LanguageCodeGTE(v string) predicate.Language {
	return predicate.Language(sql.FieldGTE(FieldLanguageCode, v))
}

// LanguageCodeLT applies the LT predicate on the "language_code" field.
func LanguageCodeLT(v string) predicate.Language {
	return predicate.Language(sql.FieldLT(FieldLanguageCode, v))
}

// LanguageCodeLTE applies the LTE predicate on the "language_code" field.
func LanguageCodeLTE(v string) predicate.Language {
	return predicate.Language(sql.FieldLTE(FieldLanguageCode, v))
}

// LanguageCodeContains applies the Contains predicate on the "language_code" field.
func LanguageCodeContains(v string) predicate.Language {
	return predicate.Language(sql.FieldContains(FieldLanguageCode, v))
}

// LanguageCodeHasPrefix applies the HasPrefix predicate on the "language_code" field.
func LanguageCodeHasPrefix(v string) predicate.Language {
	return predicate.Language(sql.FieldHasPrefix(FieldLanguageCode, v))
}

// LanguageCodeHasSuffix applies the HasSuffix predicate on the "language_code" field.
func LanguageCodeHasSuffix(v string) predicate.Language {
	return predicate.Language(sql.FieldHasSuffix(FieldLanguageCode, v))
}

// LanguageCodeIsNil applies the IsNil predicate on the "language_code" field.
func LanguageCodeIsNil() predicate.Language {
	return predicate.Language(sql.FieldIsNull(FieldLanguageCode))
}

// LanguageCodeNotNil applies the NotNil predicate on the "language_code" field.
func LanguageCodeNotNil() predicate.Language {
	return predicate.Language(sql.FieldNotNull(FieldLanguageCode))
}

// LanguageCodeEqualFold applies the EqualFold predicate on the "language_code" field.
func LanguageCodeEqualFold(v string) predicate.Language {
	return predicate.Language(sql.FieldEqualFold(FieldLanguageCode, v))
}

// LanguageCodeContainsFold applies the ContainsFold predicate on the "language_code" field.
func LanguageCodeContainsFold(v string) predicate.Language {
	return predicate.Language(sql.FieldContainsFold(FieldLanguageCode, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Language) predicate.Language {
	return predicate.Language(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Language) predicate.Language {
	return predicate.Language(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Language) predicate.Language {
	return predicate.Language(sql.NotPredicates(p))
}
