// Code generated by ent, DO NOT EDIT.

package category

import (
	"entgo.io/ent/dialect/sql"
	"github.com/xuanyiying/publication-shop/app/book/service/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldID, id))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldDescription, v))
}

// CatalogName applies equality check predicate on the "catalog_name" field. It's identical to CatalogNameEQ.
func CatalogName(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldCatalogName, v))
}

// ParentCatalogID applies equality check predicate on the "parent_catalog_id" field. It's identical to ParentCatalogIDEQ.
func ParentCatalogID(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldParentCatalogID, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Category {
	return predicate.Category(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Category {
	return predicate.Category(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Category {
	return predicate.Category(sql.FieldContainsFold(FieldDescription, v))
}

// CatalogNameEQ applies the EQ predicate on the "catalog_name" field.
func CatalogNameEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldCatalogName, v))
}

// CatalogNameNEQ applies the NEQ predicate on the "catalog_name" field.
func CatalogNameNEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldCatalogName, v))
}

// CatalogNameIn applies the In predicate on the "catalog_name" field.
func CatalogNameIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldCatalogName, vs...))
}

// CatalogNameNotIn applies the NotIn predicate on the "catalog_name" field.
func CatalogNameNotIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldCatalogName, vs...))
}

// CatalogNameGT applies the GT predicate on the "catalog_name" field.
func CatalogNameGT(v string) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldCatalogName, v))
}

// CatalogNameGTE applies the GTE predicate on the "catalog_name" field.
func CatalogNameGTE(v string) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldCatalogName, v))
}

// CatalogNameLT applies the LT predicate on the "catalog_name" field.
func CatalogNameLT(v string) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldCatalogName, v))
}

// CatalogNameLTE applies the LTE predicate on the "catalog_name" field.
func CatalogNameLTE(v string) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldCatalogName, v))
}

// CatalogNameContains applies the Contains predicate on the "catalog_name" field.
func CatalogNameContains(v string) predicate.Category {
	return predicate.Category(sql.FieldContains(FieldCatalogName, v))
}

// CatalogNameHasPrefix applies the HasPrefix predicate on the "catalog_name" field.
func CatalogNameHasPrefix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasPrefix(FieldCatalogName, v))
}

// CatalogNameHasSuffix applies the HasSuffix predicate on the "catalog_name" field.
func CatalogNameHasSuffix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasSuffix(FieldCatalogName, v))
}

// CatalogNameIsNil applies the IsNil predicate on the "catalog_name" field.
func CatalogNameIsNil() predicate.Category {
	return predicate.Category(sql.FieldIsNull(FieldCatalogName))
}

// CatalogNameNotNil applies the NotNil predicate on the "catalog_name" field.
func CatalogNameNotNil() predicate.Category {
	return predicate.Category(sql.FieldNotNull(FieldCatalogName))
}

// CatalogNameEqualFold applies the EqualFold predicate on the "catalog_name" field.
func CatalogNameEqualFold(v string) predicate.Category {
	return predicate.Category(sql.FieldEqualFold(FieldCatalogName, v))
}

// CatalogNameContainsFold applies the ContainsFold predicate on the "catalog_name" field.
func CatalogNameContainsFold(v string) predicate.Category {
	return predicate.Category(sql.FieldContainsFold(FieldCatalogName, v))
}

// ParentCatalogIDEQ applies the EQ predicate on the "parent_catalog_id" field.
func ParentCatalogIDEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldEQ(FieldParentCatalogID, v))
}

// ParentCatalogIDNEQ applies the NEQ predicate on the "parent_catalog_id" field.
func ParentCatalogIDNEQ(v string) predicate.Category {
	return predicate.Category(sql.FieldNEQ(FieldParentCatalogID, v))
}

// ParentCatalogIDIn applies the In predicate on the "parent_catalog_id" field.
func ParentCatalogIDIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldIn(FieldParentCatalogID, vs...))
}

// ParentCatalogIDNotIn applies the NotIn predicate on the "parent_catalog_id" field.
func ParentCatalogIDNotIn(vs ...string) predicate.Category {
	return predicate.Category(sql.FieldNotIn(FieldParentCatalogID, vs...))
}

// ParentCatalogIDGT applies the GT predicate on the "parent_catalog_id" field.
func ParentCatalogIDGT(v string) predicate.Category {
	return predicate.Category(sql.FieldGT(FieldParentCatalogID, v))
}

// ParentCatalogIDGTE applies the GTE predicate on the "parent_catalog_id" field.
func ParentCatalogIDGTE(v string) predicate.Category {
	return predicate.Category(sql.FieldGTE(FieldParentCatalogID, v))
}

// ParentCatalogIDLT applies the LT predicate on the "parent_catalog_id" field.
func ParentCatalogIDLT(v string) predicate.Category {
	return predicate.Category(sql.FieldLT(FieldParentCatalogID, v))
}

// ParentCatalogIDLTE applies the LTE predicate on the "parent_catalog_id" field.
func ParentCatalogIDLTE(v string) predicate.Category {
	return predicate.Category(sql.FieldLTE(FieldParentCatalogID, v))
}

// ParentCatalogIDContains applies the Contains predicate on the "parent_catalog_id" field.
func ParentCatalogIDContains(v string) predicate.Category {
	return predicate.Category(sql.FieldContains(FieldParentCatalogID, v))
}

// ParentCatalogIDHasPrefix applies the HasPrefix predicate on the "parent_catalog_id" field.
func ParentCatalogIDHasPrefix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasPrefix(FieldParentCatalogID, v))
}

// ParentCatalogIDHasSuffix applies the HasSuffix predicate on the "parent_catalog_id" field.
func ParentCatalogIDHasSuffix(v string) predicate.Category {
	return predicate.Category(sql.FieldHasSuffix(FieldParentCatalogID, v))
}

// ParentCatalogIDEqualFold applies the EqualFold predicate on the "parent_catalog_id" field.
func ParentCatalogIDEqualFold(v string) predicate.Category {
	return predicate.Category(sql.FieldEqualFold(FieldParentCatalogID, v))
}

// ParentCatalogIDContainsFold applies the ContainsFold predicate on the "parent_catalog_id" field.
func ParentCatalogIDContainsFold(v string) predicate.Category {
	return predicate.Category(sql.FieldContainsFold(FieldParentCatalogID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Category) predicate.Category {
	return predicate.Category(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Category) predicate.Category {
	return predicate.Category(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Category) predicate.Category {
	return predicate.Category(sql.NotPredicates(p))
}
