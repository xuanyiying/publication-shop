// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xuanyiying/publication-shop/app/book/service/internal/data/ent/bookxclassic"
	"github.com/xuanyiying/publication-shop/app/book/service/internal/data/ent/predicate"
)

// BookXClassicDelete is the builder for deleting a BookXClassic entity.
type BookXClassicDelete struct {
	config
	hooks    []Hook
	mutation *BookXClassicMutation
}

// Where appends a list predicates to the BookXClassicDelete builder.
func (bxd *BookXClassicDelete) Where(ps ...predicate.BookXClassic) *BookXClassicDelete {
	bxd.mutation.Where(ps...)
	return bxd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bxd *BookXClassicDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bxd.sqlExec, bxd.mutation, bxd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bxd *BookXClassicDelete) ExecX(ctx context.Context) int {
	n, err := bxd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bxd *BookXClassicDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(bookxclassic.Table, sqlgraph.NewFieldSpec(bookxclassic.FieldID, field.TypeInt))
	if ps := bxd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bxd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bxd.mutation.done = true
	return affected, err
}

// BookXClassicDeleteOne is the builder for deleting a single BookXClassic entity.
type BookXClassicDeleteOne struct {
	bxd *BookXClassicDelete
}

// Where appends a list predicates to the BookXClassicDelete builder.
func (bxdo *BookXClassicDeleteOne) Where(ps ...predicate.BookXClassic) *BookXClassicDeleteOne {
	bxdo.bxd.mutation.Where(ps...)
	return bxdo
}

// Exec executes the deletion query.
func (bxdo *BookXClassicDeleteOne) Exec(ctx context.Context) error {
	n, err := bxdo.bxd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{bookxclassic.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bxdo *BookXClassicDeleteOne) ExecX(ctx context.Context) {
	if err := bxdo.Exec(ctx); err != nil {
		panic(err)
	}
}
