// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/xuanyiying/publication-shop/app/book/service/internal/data/ent/bookstock"
)

// BookStock is the model entity for the BookStock schema.
type BookStock struct {
	config `json:"-"`
	// ID of the ent.
	// 库存Id
	ID int `json:"id,omitempty"`
	// 国际标准书号
	Isbn string `json:"isbn,omitempty"`
	// 数量
	Quantity int `json:"quantity,omitempty"`
	// 出版物ID
	BookID       int `json:"book_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BookStock) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bookstock.FieldID, bookstock.FieldQuantity, bookstock.FieldBookID:
			values[i] = new(sql.NullInt64)
		case bookstock.FieldIsbn:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BookStock fields.
func (bs *BookStock) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bookstock.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bs.ID = int(value.Int64)
		case bookstock.FieldIsbn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isbn", values[i])
			} else if value.Valid {
				bs.Isbn = value.String
			}
		case bookstock.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				bs.Quantity = int(value.Int64)
			}
		case bookstock.FieldBookID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field book_id", values[i])
			} else if value.Valid {
				bs.BookID = int(value.Int64)
			}
		default:
			bs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BookStock.
// This includes values selected through modifiers, order, etc.
func (bs *BookStock) Value(name string) (ent.Value, error) {
	return bs.selectValues.Get(name)
}

// Update returns a builder for updating this BookStock.
// Note that you need to call BookStock.Unwrap() before calling this method if this BookStock
// was returned from a transaction, and the transaction was committed or rolled back.
func (bs *BookStock) Update() *BookStockUpdateOne {
	return NewBookStockClient(bs.config).UpdateOne(bs)
}

// Unwrap unwraps the BookStock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bs *BookStock) Unwrap() *BookStock {
	_tx, ok := bs.config.driver.(*txDriver)
	if !ok {
		panic("ent: BookStock is not a transactional entity")
	}
	bs.config.driver = _tx.drv
	return bs
}

// String implements the fmt.Stringer.
func (bs *BookStock) String() string {
	var builder strings.Builder
	builder.WriteString("BookStock(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bs.ID))
	builder.WriteString("isbn=")
	builder.WriteString(bs.Isbn)
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", bs.Quantity))
	builder.WriteString(", ")
	builder.WriteString("book_id=")
	builder.WriteString(fmt.Sprintf("%v", bs.BookID))
	builder.WriteByte(')')
	return builder.String()
}

// BookStocks is a parsable slice of BookStock.
type BookStocks []*BookStock
