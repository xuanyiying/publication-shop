// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xuanyiying/publication-shop/app/book/service/internal/data/ent/predicate"
	"github.com/xuanyiying/publication-shop/app/book/service/internal/data/ent/publisher"
)

// PublisherUpdate is the builder for updating Publisher entities.
type PublisherUpdate struct {
	config
	hooks    []Hook
	mutation *PublisherMutation
}

// Where appends a list predicates to the PublisherUpdate builder.
func (pu *PublisherUpdate) Where(ps ...predicate.Publisher) *PublisherUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetPublisherName sets the "publisher_name" field.
func (pu *PublisherUpdate) SetPublisherName(s string) *PublisherUpdate {
	pu.mutation.SetPublisherName(s)
	return pu
}

// SetNillablePublisherName sets the "publisher_name" field if the given value is not nil.
func (pu *PublisherUpdate) SetNillablePublisherName(s *string) *PublisherUpdate {
	if s != nil {
		pu.SetPublisherName(*s)
	}
	return pu
}

// SetPublisherAddress sets the "publisher_address" field.
func (pu *PublisherUpdate) SetPublisherAddress(s string) *PublisherUpdate {
	pu.mutation.SetPublisherAddress(s)
	return pu
}

// SetNillablePublisherAddress sets the "publisher_address" field if the given value is not nil.
func (pu *PublisherUpdate) SetNillablePublisherAddress(s *string) *PublisherUpdate {
	if s != nil {
		pu.SetPublisherAddress(*s)
	}
	return pu
}

// ClearPublisherAddress clears the value of the "publisher_address" field.
func (pu *PublisherUpdate) ClearPublisherAddress() *PublisherUpdate {
	pu.mutation.ClearPublisherAddress()
	return pu
}

// SetPublisherPhone sets the "publisher_phone" field.
func (pu *PublisherUpdate) SetPublisherPhone(s string) *PublisherUpdate {
	pu.mutation.SetPublisherPhone(s)
	return pu
}

// SetNillablePublisherPhone sets the "publisher_phone" field if the given value is not nil.
func (pu *PublisherUpdate) SetNillablePublisherPhone(s *string) *PublisherUpdate {
	if s != nil {
		pu.SetPublisherPhone(*s)
	}
	return pu
}

// ClearPublisherPhone clears the value of the "publisher_phone" field.
func (pu *PublisherUpdate) ClearPublisherPhone() *PublisherUpdate {
	pu.mutation.ClearPublisherPhone()
	return pu
}

// SetPublisherEmail sets the "publisher_email" field.
func (pu *PublisherUpdate) SetPublisherEmail(s string) *PublisherUpdate {
	pu.mutation.SetPublisherEmail(s)
	return pu
}

// SetNillablePublisherEmail sets the "publisher_email" field if the given value is not nil.
func (pu *PublisherUpdate) SetNillablePublisherEmail(s *string) *PublisherUpdate {
	if s != nil {
		pu.SetPublisherEmail(*s)
	}
	return pu
}

// ClearPublisherEmail clears the value of the "publisher_email" field.
func (pu *PublisherUpdate) ClearPublisherEmail() *PublisherUpdate {
	pu.mutation.ClearPublisherEmail()
	return pu
}

// SetPublisherWebsite sets the "publisher_website" field.
func (pu *PublisherUpdate) SetPublisherWebsite(s string) *PublisherUpdate {
	pu.mutation.SetPublisherWebsite(s)
	return pu
}

// SetNillablePublisherWebsite sets the "publisher_website" field if the given value is not nil.
func (pu *PublisherUpdate) SetNillablePublisherWebsite(s *string) *PublisherUpdate {
	if s != nil {
		pu.SetPublisherWebsite(*s)
	}
	return pu
}

// ClearPublisherWebsite clears the value of the "publisher_website" field.
func (pu *PublisherUpdate) ClearPublisherWebsite() *PublisherUpdate {
	pu.mutation.ClearPublisherWebsite()
	return pu
}

// Mutation returns the PublisherMutation object of the builder.
func (pu *PublisherUpdate) Mutation() *PublisherMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PublisherUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PublisherUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PublisherUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PublisherUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PublisherUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(publisher.Table, publisher.Columns, sqlgraph.NewFieldSpec(publisher.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.PublisherName(); ok {
		_spec.SetField(publisher.FieldPublisherName, field.TypeString, value)
	}
	if value, ok := pu.mutation.PublisherAddress(); ok {
		_spec.SetField(publisher.FieldPublisherAddress, field.TypeString, value)
	}
	if pu.mutation.PublisherAddressCleared() {
		_spec.ClearField(publisher.FieldPublisherAddress, field.TypeString)
	}
	if value, ok := pu.mutation.PublisherPhone(); ok {
		_spec.SetField(publisher.FieldPublisherPhone, field.TypeString, value)
	}
	if pu.mutation.PublisherPhoneCleared() {
		_spec.ClearField(publisher.FieldPublisherPhone, field.TypeString)
	}
	if value, ok := pu.mutation.PublisherEmail(); ok {
		_spec.SetField(publisher.FieldPublisherEmail, field.TypeString, value)
	}
	if pu.mutation.PublisherEmailCleared() {
		_spec.ClearField(publisher.FieldPublisherEmail, field.TypeString)
	}
	if value, ok := pu.mutation.PublisherWebsite(); ok {
		_spec.SetField(publisher.FieldPublisherWebsite, field.TypeString, value)
	}
	if pu.mutation.PublisherWebsiteCleared() {
		_spec.ClearField(publisher.FieldPublisherWebsite, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publisher.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PublisherUpdateOne is the builder for updating a single Publisher entity.
type PublisherUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PublisherMutation
}

// SetPublisherName sets the "publisher_name" field.
func (puo *PublisherUpdateOne) SetPublisherName(s string) *PublisherUpdateOne {
	puo.mutation.SetPublisherName(s)
	return puo
}

// SetNillablePublisherName sets the "publisher_name" field if the given value is not nil.
func (puo *PublisherUpdateOne) SetNillablePublisherName(s *string) *PublisherUpdateOne {
	if s != nil {
		puo.SetPublisherName(*s)
	}
	return puo
}

// SetPublisherAddress sets the "publisher_address" field.
func (puo *PublisherUpdateOne) SetPublisherAddress(s string) *PublisherUpdateOne {
	puo.mutation.SetPublisherAddress(s)
	return puo
}

// SetNillablePublisherAddress sets the "publisher_address" field if the given value is not nil.
func (puo *PublisherUpdateOne) SetNillablePublisherAddress(s *string) *PublisherUpdateOne {
	if s != nil {
		puo.SetPublisherAddress(*s)
	}
	return puo
}

// ClearPublisherAddress clears the value of the "publisher_address" field.
func (puo *PublisherUpdateOne) ClearPublisherAddress() *PublisherUpdateOne {
	puo.mutation.ClearPublisherAddress()
	return puo
}

// SetPublisherPhone sets the "publisher_phone" field.
func (puo *PublisherUpdateOne) SetPublisherPhone(s string) *PublisherUpdateOne {
	puo.mutation.SetPublisherPhone(s)
	return puo
}

// SetNillablePublisherPhone sets the "publisher_phone" field if the given value is not nil.
func (puo *PublisherUpdateOne) SetNillablePublisherPhone(s *string) *PublisherUpdateOne {
	if s != nil {
		puo.SetPublisherPhone(*s)
	}
	return puo
}

// ClearPublisherPhone clears the value of the "publisher_phone" field.
func (puo *PublisherUpdateOne) ClearPublisherPhone() *PublisherUpdateOne {
	puo.mutation.ClearPublisherPhone()
	return puo
}

// SetPublisherEmail sets the "publisher_email" field.
func (puo *PublisherUpdateOne) SetPublisherEmail(s string) *PublisherUpdateOne {
	puo.mutation.SetPublisherEmail(s)
	return puo
}

// SetNillablePublisherEmail sets the "publisher_email" field if the given value is not nil.
func (puo *PublisherUpdateOne) SetNillablePublisherEmail(s *string) *PublisherUpdateOne {
	if s != nil {
		puo.SetPublisherEmail(*s)
	}
	return puo
}

// ClearPublisherEmail clears the value of the "publisher_email" field.
func (puo *PublisherUpdateOne) ClearPublisherEmail() *PublisherUpdateOne {
	puo.mutation.ClearPublisherEmail()
	return puo
}

// SetPublisherWebsite sets the "publisher_website" field.
func (puo *PublisherUpdateOne) SetPublisherWebsite(s string) *PublisherUpdateOne {
	puo.mutation.SetPublisherWebsite(s)
	return puo
}

// SetNillablePublisherWebsite sets the "publisher_website" field if the given value is not nil.
func (puo *PublisherUpdateOne) SetNillablePublisherWebsite(s *string) *PublisherUpdateOne {
	if s != nil {
		puo.SetPublisherWebsite(*s)
	}
	return puo
}

// ClearPublisherWebsite clears the value of the "publisher_website" field.
func (puo *PublisherUpdateOne) ClearPublisherWebsite() *PublisherUpdateOne {
	puo.mutation.ClearPublisherWebsite()
	return puo
}

// Mutation returns the PublisherMutation object of the builder.
func (puo *PublisherUpdateOne) Mutation() *PublisherMutation {
	return puo.mutation
}

// Where appends a list predicates to the PublisherUpdate builder.
func (puo *PublisherUpdateOne) Where(ps ...predicate.Publisher) *PublisherUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PublisherUpdateOne) Select(field string, fields ...string) *PublisherUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Publisher entity.
func (puo *PublisherUpdateOne) Save(ctx context.Context) (*Publisher, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PublisherUpdateOne) SaveX(ctx context.Context) *Publisher {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PublisherUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PublisherUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PublisherUpdateOne) sqlSave(ctx context.Context) (_node *Publisher, err error) {
	_spec := sqlgraph.NewUpdateSpec(publisher.Table, publisher.Columns, sqlgraph.NewFieldSpec(publisher.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Publisher.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, publisher.FieldID)
		for _, f := range fields {
			if !publisher.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != publisher.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.PublisherName(); ok {
		_spec.SetField(publisher.FieldPublisherName, field.TypeString, value)
	}
	if value, ok := puo.mutation.PublisherAddress(); ok {
		_spec.SetField(publisher.FieldPublisherAddress, field.TypeString, value)
	}
	if puo.mutation.PublisherAddressCleared() {
		_spec.ClearField(publisher.FieldPublisherAddress, field.TypeString)
	}
	if value, ok := puo.mutation.PublisherPhone(); ok {
		_spec.SetField(publisher.FieldPublisherPhone, field.TypeString, value)
	}
	if puo.mutation.PublisherPhoneCleared() {
		_spec.ClearField(publisher.FieldPublisherPhone, field.TypeString)
	}
	if value, ok := puo.mutation.PublisherEmail(); ok {
		_spec.SetField(publisher.FieldPublisherEmail, field.TypeString, value)
	}
	if puo.mutation.PublisherEmailCleared() {
		_spec.ClearField(publisher.FieldPublisherEmail, field.TypeString)
	}
	if value, ok := puo.mutation.PublisherWebsite(); ok {
		_spec.SetField(publisher.FieldPublisherWebsite, field.TypeString, value)
	}
	if puo.mutation.PublisherWebsiteCleared() {
		_spec.ClearField(publisher.FieldPublisherWebsite, field.TypeString)
	}
	_node = &Publisher{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publisher.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
