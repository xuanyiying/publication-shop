// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/xuanyiying/publication-shop/app/book/service/internal/data/ent/publisher"
)

// Publisher is the model entity for the Publisher schema.
type Publisher struct {
	config `json:"-"`
	// ID of the ent.
	// 出版社ID，主键
	ID int `json:"id,omitempty"`
	// 出版社名称
	PublisherName string `json:"publisher_name,omitempty"`
	// 出版社地址
	PublisherAddress string `json:"publisher_address,omitempty"`
	// 出版社联系电话
	PublisherPhone string `json:"publisher_phone,omitempty"`
	// 出版社邮箱
	PublisherEmail string `json:"publisher_email,omitempty"`
	// 出版社网站
	PublisherWebsite string `json:"publisher_website,omitempty"`
	selectValues     sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Publisher) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case publisher.FieldID:
			values[i] = new(sql.NullInt64)
		case publisher.FieldPublisherName, publisher.FieldPublisherAddress, publisher.FieldPublisherPhone, publisher.FieldPublisherEmail, publisher.FieldPublisherWebsite:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Publisher fields.
func (pu *Publisher) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case publisher.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pu.ID = int(value.Int64)
		case publisher.FieldPublisherName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field publisher_name", values[i])
			} else if value.Valid {
				pu.PublisherName = value.String
			}
		case publisher.FieldPublisherAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field publisher_address", values[i])
			} else if value.Valid {
				pu.PublisherAddress = value.String
			}
		case publisher.FieldPublisherPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field publisher_phone", values[i])
			} else if value.Valid {
				pu.PublisherPhone = value.String
			}
		case publisher.FieldPublisherEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field publisher_email", values[i])
			} else if value.Valid {
				pu.PublisherEmail = value.String
			}
		case publisher.FieldPublisherWebsite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field publisher_website", values[i])
			} else if value.Valid {
				pu.PublisherWebsite = value.String
			}
		default:
			pu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Publisher.
// This includes values selected through modifiers, order, etc.
func (pu *Publisher) Value(name string) (ent.Value, error) {
	return pu.selectValues.Get(name)
}

// Update returns a builder for updating this Publisher.
// Note that you need to call Publisher.Unwrap() before calling this method if this Publisher
// was returned from a transaction, and the transaction was committed or rolled back.
func (pu *Publisher) Update() *PublisherUpdateOne {
	return NewPublisherClient(pu.config).UpdateOne(pu)
}

// Unwrap unwraps the Publisher entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pu *Publisher) Unwrap() *Publisher {
	_tx, ok := pu.config.driver.(*txDriver)
	if !ok {
		panic("ent: Publisher is not a transactional entity")
	}
	pu.config.driver = _tx.drv
	return pu
}

// String implements the fmt.Stringer.
func (pu *Publisher) String() string {
	var builder strings.Builder
	builder.WriteString("Publisher(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pu.ID))
	builder.WriteString("publisher_name=")
	builder.WriteString(pu.PublisherName)
	builder.WriteString(", ")
	builder.WriteString("publisher_address=")
	builder.WriteString(pu.PublisherAddress)
	builder.WriteString(", ")
	builder.WriteString("publisher_phone=")
	builder.WriteString(pu.PublisherPhone)
	builder.WriteString(", ")
	builder.WriteString("publisher_email=")
	builder.WriteString(pu.PublisherEmail)
	builder.WriteString(", ")
	builder.WriteString("publisher_website=")
	builder.WriteString(pu.PublisherWebsite)
	builder.WriteByte(')')
	return builder.String()
}

// Publishers is a parsable slice of Publisher.
type Publishers []*Publisher
