// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/bookdetail"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/predicate"
)

// BookDetailDelete is the builder for deleting a BookDetail entity.
type BookDetailDelete struct {
	config
	hooks    []Hook
	mutation *BookDetailMutation
}

// Where appends a list predicates to the BookDetailDelete builder.
func (bdd *BookDetailDelete) Where(ps ...predicate.BookDetail) *BookDetailDelete {
	bdd.mutation.Where(ps...)
	return bdd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bdd *BookDetailDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bdd.sqlExec, bdd.mutation, bdd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bdd *BookDetailDelete) ExecX(ctx context.Context) int {
	n, err := bdd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bdd *BookDetailDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(bookdetail.Table, sqlgraph.NewFieldSpec(bookdetail.FieldID, field.TypeInt))
	if ps := bdd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bdd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bdd.mutation.done = true
	return affected, err
}

// BookDetailDeleteOne is the builder for deleting a single BookDetail entity.
type BookDetailDeleteOne struct {
	bdd *BookDetailDelete
}

// Where appends a list predicates to the BookDetailDelete builder.
func (bddo *BookDetailDeleteOne) Where(ps ...predicate.BookDetail) *BookDetailDeleteOne {
	bddo.bdd.mutation.Where(ps...)
	return bddo
}

// Exec executes the deletion query.
func (bddo *BookDetailDeleteOne) Exec(ctx context.Context) error {
	n, err := bddo.bdd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{bookdetail.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bddo *BookDetailDeleteOne) ExecX(ctx context.Context) {
	if err := bddo.Exec(ctx); err != nil {
		panic(err)
	}
}
