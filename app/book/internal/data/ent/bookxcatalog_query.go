// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/bookxcatalog"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/predicate"
)

// BookXCatalogQuery is the builder for querying BookXCatalog entities.
type BookXCatalogQuery struct {
	config
	ctx        *QueryContext
	order      []bookxcatalog.OrderOption
	inters     []Interceptor
	predicates []predicate.BookXCatalog
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the BookXCatalogQuery builder.
func (bxq *BookXCatalogQuery) Where(ps ...predicate.BookXCatalog) *BookXCatalogQuery {
	bxq.predicates = append(bxq.predicates, ps...)
	return bxq
}

// Limit the number of records to be returned by this query.
func (bxq *BookXCatalogQuery) Limit(limit int) *BookXCatalogQuery {
	bxq.ctx.Limit = &limit
	return bxq
}

// Offset to start from.
func (bxq *BookXCatalogQuery) Offset(offset int) *BookXCatalogQuery {
	bxq.ctx.Offset = &offset
	return bxq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (bxq *BookXCatalogQuery) Unique(unique bool) *BookXCatalogQuery {
	bxq.ctx.Unique = &unique
	return bxq
}

// Order specifies how the records should be ordered.
func (bxq *BookXCatalogQuery) Order(o ...bookxcatalog.OrderOption) *BookXCatalogQuery {
	bxq.order = append(bxq.order, o...)
	return bxq
}

// First returns the first BookXCatalog entity from the query.
// Returns a *NotFoundError when no BookXCatalog was found.
func (bxq *BookXCatalogQuery) First(ctx context.Context) (*BookXCatalog, error) {
	nodes, err := bxq.Limit(1).All(setContextOp(ctx, bxq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{bookxcatalog.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (bxq *BookXCatalogQuery) FirstX(ctx context.Context) *BookXCatalog {
	node, err := bxq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first BookXCatalog ID from the query.
// Returns a *NotFoundError when no BookXCatalog ID was found.
func (bxq *BookXCatalogQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = bxq.Limit(1).IDs(setContextOp(ctx, bxq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{bookxcatalog.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (bxq *BookXCatalogQuery) FirstIDX(ctx context.Context) int {
	id, err := bxq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single BookXCatalog entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one BookXCatalog entity is found.
// Returns a *NotFoundError when no BookXCatalog entities are found.
func (bxq *BookXCatalogQuery) Only(ctx context.Context) (*BookXCatalog, error) {
	nodes, err := bxq.Limit(2).All(setContextOp(ctx, bxq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{bookxcatalog.Label}
	default:
		return nil, &NotSingularError{bookxcatalog.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (bxq *BookXCatalogQuery) OnlyX(ctx context.Context) *BookXCatalog {
	node, err := bxq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only BookXCatalog ID in the query.
// Returns a *NotSingularError when more than one BookXCatalog ID is found.
// Returns a *NotFoundError when no entities are found.
func (bxq *BookXCatalogQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = bxq.Limit(2).IDs(setContextOp(ctx, bxq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{bookxcatalog.Label}
	default:
		err = &NotSingularError{bookxcatalog.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (bxq *BookXCatalogQuery) OnlyIDX(ctx context.Context) int {
	id, err := bxq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of BookXCatalogs.
func (bxq *BookXCatalogQuery) All(ctx context.Context) ([]*BookXCatalog, error) {
	ctx = setContextOp(ctx, bxq.ctx, "All")
	if err := bxq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*BookXCatalog, *BookXCatalogQuery]()
	return withInterceptors[[]*BookXCatalog](ctx, bxq, qr, bxq.inters)
}

// AllX is like All, but panics if an error occurs.
func (bxq *BookXCatalogQuery) AllX(ctx context.Context) []*BookXCatalog {
	nodes, err := bxq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of BookXCatalog IDs.
func (bxq *BookXCatalogQuery) IDs(ctx context.Context) (ids []int, err error) {
	if bxq.ctx.Unique == nil && bxq.path != nil {
		bxq.Unique(true)
	}
	ctx = setContextOp(ctx, bxq.ctx, "IDs")
	if err = bxq.Select(bookxcatalog.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (bxq *BookXCatalogQuery) IDsX(ctx context.Context) []int {
	ids, err := bxq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (bxq *BookXCatalogQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, bxq.ctx, "Count")
	if err := bxq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, bxq, querierCount[*BookXCatalogQuery](), bxq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (bxq *BookXCatalogQuery) CountX(ctx context.Context) int {
	count, err := bxq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (bxq *BookXCatalogQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, bxq.ctx, "Exist")
	switch _, err := bxq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (bxq *BookXCatalogQuery) ExistX(ctx context.Context) bool {
	exist, err := bxq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the BookXCatalogQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (bxq *BookXCatalogQuery) Clone() *BookXCatalogQuery {
	if bxq == nil {
		return nil
	}
	return &BookXCatalogQuery{
		config:     bxq.config,
		ctx:        bxq.ctx.Clone(),
		order:      append([]bookxcatalog.OrderOption{}, bxq.order...),
		inters:     append([]Interceptor{}, bxq.inters...),
		predicates: append([]predicate.BookXCatalog{}, bxq.predicates...),
		// clone intermediate query.
		sql:  bxq.sql.Clone(),
		path: bxq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CatalogID int `json:"catalog_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.BookXCatalog.Query().
//		GroupBy(bookxcatalog.FieldCatalogID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (bxq *BookXCatalogQuery) GroupBy(field string, fields ...string) *BookXCatalogGroupBy {
	bxq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &BookXCatalogGroupBy{build: bxq}
	grbuild.flds = &bxq.ctx.Fields
	grbuild.label = bookxcatalog.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CatalogID int `json:"catalog_id,omitempty"`
//	}
//
//	client.BookXCatalog.Query().
//		Select(bookxcatalog.FieldCatalogID).
//		Scan(ctx, &v)
func (bxq *BookXCatalogQuery) Select(fields ...string) *BookXCatalogSelect {
	bxq.ctx.Fields = append(bxq.ctx.Fields, fields...)
	sbuild := &BookXCatalogSelect{BookXCatalogQuery: bxq}
	sbuild.label = bookxcatalog.Label
	sbuild.flds, sbuild.scan = &bxq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a BookXCatalogSelect configured with the given aggregations.
func (bxq *BookXCatalogQuery) Aggregate(fns ...AggregateFunc) *BookXCatalogSelect {
	return bxq.Select().Aggregate(fns...)
}

func (bxq *BookXCatalogQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range bxq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, bxq); err != nil {
				return err
			}
		}
	}
	for _, f := range bxq.ctx.Fields {
		if !bookxcatalog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if bxq.path != nil {
		prev, err := bxq.path(ctx)
		if err != nil {
			return err
		}
		bxq.sql = prev
	}
	return nil
}

func (bxq *BookXCatalogQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*BookXCatalog, error) {
	var (
		nodes = []*BookXCatalog{}
		_spec = bxq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*BookXCatalog).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &BookXCatalog{config: bxq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, bxq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (bxq *BookXCatalogQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := bxq.querySpec()
	_spec.Node.Columns = bxq.ctx.Fields
	if len(bxq.ctx.Fields) > 0 {
		_spec.Unique = bxq.ctx.Unique != nil && *bxq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, bxq.driver, _spec)
}

func (bxq *BookXCatalogQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(bookxcatalog.Table, bookxcatalog.Columns, sqlgraph.NewFieldSpec(bookxcatalog.FieldID, field.TypeInt))
	_spec.From = bxq.sql
	if unique := bxq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if bxq.path != nil {
		_spec.Unique = true
	}
	if fields := bxq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bookxcatalog.FieldID)
		for i := range fields {
			if fields[i] != bookxcatalog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := bxq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := bxq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := bxq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := bxq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (bxq *BookXCatalogQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(bxq.driver.Dialect())
	t1 := builder.Table(bookxcatalog.Table)
	columns := bxq.ctx.Fields
	if len(columns) == 0 {
		columns = bookxcatalog.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if bxq.sql != nil {
		selector = bxq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if bxq.ctx.Unique != nil && *bxq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range bxq.predicates {
		p(selector)
	}
	for _, p := range bxq.order {
		p(selector)
	}
	if offset := bxq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := bxq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// BookXCatalogGroupBy is the group-by builder for BookXCatalog entities.
type BookXCatalogGroupBy struct {
	selector
	build *BookXCatalogQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (bxgb *BookXCatalogGroupBy) Aggregate(fns ...AggregateFunc) *BookXCatalogGroupBy {
	bxgb.fns = append(bxgb.fns, fns...)
	return bxgb
}

// Scan applies the selector query and scans the result into the given value.
func (bxgb *BookXCatalogGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bxgb.build.ctx, "GroupBy")
	if err := bxgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BookXCatalogQuery, *BookXCatalogGroupBy](ctx, bxgb.build, bxgb, bxgb.build.inters, v)
}

func (bxgb *BookXCatalogGroupBy) sqlScan(ctx context.Context, root *BookXCatalogQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(bxgb.fns))
	for _, fn := range bxgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*bxgb.flds)+len(bxgb.fns))
		for _, f := range *bxgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*bxgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bxgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// BookXCatalogSelect is the builder for selecting fields of BookXCatalog entities.
type BookXCatalogSelect struct {
	*BookXCatalogQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (bxs *BookXCatalogSelect) Aggregate(fns ...AggregateFunc) *BookXCatalogSelect {
	bxs.fns = append(bxs.fns, fns...)
	return bxs
}

// Scan applies the selector query and scans the result into the given value.
func (bxs *BookXCatalogSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, bxs.ctx, "Select")
	if err := bxs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*BookXCatalogQuery, *BookXCatalogSelect](ctx, bxs.BookXCatalogQuery, bxs, bxs.inters, v)
}

func (bxs *BookXCatalogSelect) sqlScan(ctx context.Context, root *BookXCatalogQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(bxs.fns))
	for _, fn := range bxs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*bxs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := bxs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
