// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/bookxcatalog"
)

// BookXCatalog is the model entity for the BookXCatalog schema.
type BookXCatalog struct {
	config `json:"-"`
	// ID of the ent.
	// 出版物分类关系ID
	ID int `json:"id,omitempty"`
	// 详情ID
	CatalogID int `json:"catalog_id,omitempty"`
	// 国际标准书号
	Isbn string `json:"isbn,omitempty"`
	// 详情
	CatalogName string `json:"catalog_name,omitempty"`
	// 出版物ID
	BookID       int `json:"book_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BookXCatalog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bookxcatalog.FieldID, bookxcatalog.FieldCatalogID, bookxcatalog.FieldBookID:
			values[i] = new(sql.NullInt64)
		case bookxcatalog.FieldIsbn, bookxcatalog.FieldCatalogName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BookXCatalog fields.
func (bx *BookXCatalog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bookxcatalog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bx.ID = int(value.Int64)
		case bookxcatalog.FieldCatalogID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field catalog_id", values[i])
			} else if value.Valid {
				bx.CatalogID = int(value.Int64)
			}
		case bookxcatalog.FieldIsbn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isbn", values[i])
			} else if value.Valid {
				bx.Isbn = value.String
			}
		case bookxcatalog.FieldCatalogName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field catalog_name", values[i])
			} else if value.Valid {
				bx.CatalogName = value.String
			}
		case bookxcatalog.FieldBookID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field book_id", values[i])
			} else if value.Valid {
				bx.BookID = int(value.Int64)
			}
		default:
			bx.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BookXCatalog.
// This includes values selected through modifiers, order, etc.
func (bx *BookXCatalog) Value(name string) (ent.Value, error) {
	return bx.selectValues.Get(name)
}

// Update returns a builder for updating this BookXCatalog.
// Note that you need to call BookXCatalog.Unwrap() before calling this method if this BookXCatalog
// was returned from a transaction, and the transaction was committed or rolled back.
func (bx *BookXCatalog) Update() *BookXCatalogUpdateOne {
	return NewBookXCatalogClient(bx.config).UpdateOne(bx)
}

// Unwrap unwraps the BookXCatalog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bx *BookXCatalog) Unwrap() *BookXCatalog {
	_tx, ok := bx.config.driver.(*txDriver)
	if !ok {
		panic("ent: BookXCatalog is not a transactional entity")
	}
	bx.config.driver = _tx.drv
	return bx
}

// String implements the fmt.Stringer.
func (bx *BookXCatalog) String() string {
	var builder strings.Builder
	builder.WriteString("BookXCatalog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bx.ID))
	builder.WriteString("catalog_id=")
	builder.WriteString(fmt.Sprintf("%v", bx.CatalogID))
	builder.WriteString(", ")
	builder.WriteString("isbn=")
	builder.WriteString(bx.Isbn)
	builder.WriteString(", ")
	builder.WriteString("catalog_name=")
	builder.WriteString(bx.CatalogName)
	builder.WriteString(", ")
	builder.WriteString("book_id=")
	builder.WriteString(fmt.Sprintf("%v", bx.BookID))
	builder.WriteByte(')')
	return builder.String()
}

// BookXCatalogs is a parsable slice of BookXCatalog.
type BookXCatalogs []*BookXCatalog
