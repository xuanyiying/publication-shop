// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/book"
)

// Book is the model entity for the Book schema.
type Book struct {
	config `json:"-"`
	// ID of the ent.
	// 书籍ID，主键
	ID int `json:"id,omitempty"`
	// ISBN，唯一
	Isbn string `json:"isbn,omitempty"`
	// 书名
	Title string `json:"title,omitempty"`
	// 主编
	Author string `json:"author,omitempty"`
	// 译者
	Translator string `json:"translator,omitempty"`
	// 出版社ID
	PublisherID int `json:"publisher_id,omitempty"`
	// 出版社
	Publisher string `json:"publisher,omitempty"`
	// 出版年份
	PublicationYear int16 `json:"publication_year,omitempty"`
	// 出版日期
	PublicationDate time.Time `json:"publication_date,omitempty"`
	// 版次
	Edition int8 `json:"edition,omitempty"`
	// 类别
	Category string `json:"category,omitempty"`
	// 价格
	Price float64 `json:"price,omitempty"`
	// 库存量
	StockQuantity int32 `json:"stock_quantity,omitempty"`
	// 书籍描述
	Description string `json:"description,omitempty"`
	// 添加时间
	AddedOn time.Time `json:"added_on,omitempty"`
	// 图书封面图片URL
	CoverImage string `json:"cover_image,omitempty"`
	// 页数
	PageCount int32 `json:"page_count,omitempty"`
	// 语言
	LanguageID int `json:"language_id,omitempty"`
	// 语言
	Language string `json:"language,omitempty"`
	// 作者ID，外键约束确保其与实际作者表关联
	AuthorID int `json:"author_id,omitempty"`
	// 图书类别ID，外键约束确保其与实际类别表关联
	CategoryID   int `json:"category_id,omitempty"`
	selectValues sql.SelectValues
	PublishDate  int16 `json:"publish_date,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Book) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case book.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case book.FieldID, book.FieldPublisherID, book.FieldPublicationYear, book.FieldEdition, book.FieldStockQuantity, book.FieldPageCount, book.FieldLanguageID, book.FieldAuthorID, book.FieldCategoryID:
			values[i] = new(sql.NullInt64)
		case book.FieldIsbn, book.FieldTitle, book.FieldAuthor, book.FieldTranslator, book.FieldPublisher, book.FieldCategory, book.FieldDescription, book.FieldCoverImage, book.FieldLanguage:
			values[i] = new(sql.NullString)
		case book.FieldPublicationDate, book.FieldAddedOn:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Book fields.
func (b *Book) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case book.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case book.FieldIsbn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isbn", values[i])
			} else if value.Valid {
				b.Isbn = value.String
			}
		case book.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				b.Title = value.String
			}
		case book.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				b.Author = value.String
			}
		case book.FieldTranslator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field translator", values[i])
			} else if value.Valid {
				b.Translator = value.String
			}
		case book.FieldPublisherID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field publisher_id", values[i])
			} else if value.Valid {
				b.PublisherID = int(value.Int64)
			}
		case book.FieldPublisher:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field publisher", values[i])
			} else if value.Valid {
				b.Publisher = value.String
			}
		case book.FieldPublicationYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field publication_year", values[i])
			} else if value.Valid {
				b.PublicationYear = int16(value.Int64)
			}
		case book.FieldPublicationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field publication_date", values[i])
			} else if value.Valid {
				b.PublicationDate = value.Time
			}
		case book.FieldEdition:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field edition", values[i])
			} else if value.Valid {
				b.Edition = int8(value.Int64)
			}
		case book.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				b.Category = value.String
			}
		case book.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				b.Price = value.Float64
			}
		case book.FieldStockQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field stock_quantity", values[i])
			} else if value.Valid {
				b.StockQuantity = int32(value.Int64)
			}
		case book.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				b.Description = value.String
			}
		case book.FieldAddedOn:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field added_on", values[i])
			} else if value.Valid {
				b.AddedOn = value.Time
			}
		case book.FieldCoverImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cover_image", values[i])
			} else if value.Valid {
				b.CoverImage = value.String
			}
		case book.FieldPageCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field page_count", values[i])
			} else if value.Valid {
				b.PageCount = int32(value.Int64)
			}
		case book.FieldLanguageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field language_id", values[i])
			} else if value.Valid {
				b.LanguageID = int(value.Int64)
			}
		case book.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				b.Language = value.String
			}
		case book.FieldAuthorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field author_id", values[i])
			} else if value.Valid {
				b.AuthorID = int(value.Int64)
			}
		case book.FieldCategoryID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				b.CategoryID = int(value.Int64)
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Book.
// This includes values selected through modifiers, order, etc.
func (b *Book) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// Update returns a builder for updating this Book.
// Note that you need to call Book.Unwrap() before calling this method if this Book
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Book) Update() *BookUpdateOne {
	return NewBookClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Book entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Book) Unwrap() *Book {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Book is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Book) String() string {
	var builder strings.Builder
	builder.WriteString("Book(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("isbn=")
	builder.WriteString(b.Isbn)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(b.Title)
	builder.WriteString(", ")
	builder.WriteString("author=")
	builder.WriteString(b.Author)
	builder.WriteString(", ")
	builder.WriteString("translator=")
	builder.WriteString(b.Translator)
	builder.WriteString(", ")
	builder.WriteString("publisher_id=")
	builder.WriteString(fmt.Sprintf("%v", b.PublisherID))
	builder.WriteString(", ")
	builder.WriteString("publisher=")
	builder.WriteString(b.Publisher)
	builder.WriteString(", ")
	builder.WriteString("publication_year=")
	builder.WriteString(fmt.Sprintf("%v", b.PublicationYear))
	builder.WriteString(", ")
	builder.WriteString("publication_date=")
	builder.WriteString(b.PublicationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("edition=")
	builder.WriteString(fmt.Sprintf("%v", b.Edition))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(b.Category)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", b.Price))
	builder.WriteString(", ")
	builder.WriteString("stock_quantity=")
	builder.WriteString(fmt.Sprintf("%v", b.StockQuantity))
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(b.Description)
	builder.WriteString(", ")
	builder.WriteString("added_on=")
	builder.WriteString(b.AddedOn.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("cover_image=")
	builder.WriteString(b.CoverImage)
	builder.WriteString(", ")
	builder.WriteString("page_count=")
	builder.WriteString(fmt.Sprintf("%v", b.PageCount))
	builder.WriteString(", ")
	builder.WriteString("language_id=")
	builder.WriteString(fmt.Sprintf("%v", b.LanguageID))
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(b.Language)
	builder.WriteString(", ")
	builder.WriteString("author_id=")
	builder.WriteString(fmt.Sprintf("%v", b.AuthorID))
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", b.CategoryID))
	builder.WriteByte(')')
	return builder.String()
}

// Books is a parsable slice of Book.
type Books []*Book
