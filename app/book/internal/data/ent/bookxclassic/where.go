// Code generated by ent, DO NOT EDIT.

package bookxclassic

import (
	"entgo.io/ent/dialect/sql"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldLTE(FieldID, id))
}

// ClassicID applies equality check predicate on the "classic_id" field. It's identical to ClassicIDEQ.
func ClassicID(v int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldEQ(FieldClassicID, v))
}

// Isbn applies equality check predicate on the "isbn" field. It's identical to IsbnEQ.
func Isbn(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldEQ(FieldIsbn, v))
}

// ClassicName applies equality check predicate on the "classic_name" field. It's identical to ClassicNameEQ.
func ClassicName(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldEQ(FieldClassicName, v))
}

// BookID applies equality check predicate on the "book_id" field. It's identical to BookIDEQ.
func BookID(v int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldEQ(FieldBookID, v))
}

// ClassicIDEQ applies the EQ predicate on the "classic_id" field.
func ClassicIDEQ(v int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldEQ(FieldClassicID, v))
}

// ClassicIDNEQ applies the NEQ predicate on the "classic_id" field.
func ClassicIDNEQ(v int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldNEQ(FieldClassicID, v))
}

// ClassicIDIn applies the In predicate on the "classic_id" field.
func ClassicIDIn(vs ...int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldIn(FieldClassicID, vs...))
}

// ClassicIDNotIn applies the NotIn predicate on the "classic_id" field.
func ClassicIDNotIn(vs ...int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldNotIn(FieldClassicID, vs...))
}

// ClassicIDGT applies the GT predicate on the "classic_id" field.
func ClassicIDGT(v int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldGT(FieldClassicID, v))
}

// ClassicIDGTE applies the GTE predicate on the "classic_id" field.
func ClassicIDGTE(v int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldGTE(FieldClassicID, v))
}

// ClassicIDLT applies the LT predicate on the "classic_id" field.
func ClassicIDLT(v int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldLT(FieldClassicID, v))
}

// ClassicIDLTE applies the LTE predicate on the "classic_id" field.
func ClassicIDLTE(v int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldLTE(FieldClassicID, v))
}

// IsbnEQ applies the EQ predicate on the "isbn" field.
func IsbnEQ(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldEQ(FieldIsbn, v))
}

// IsbnNEQ applies the NEQ predicate on the "isbn" field.
func IsbnNEQ(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldNEQ(FieldIsbn, v))
}

// IsbnIn applies the In predicate on the "isbn" field.
func IsbnIn(vs ...string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldIn(FieldIsbn, vs...))
}

// IsbnNotIn applies the NotIn predicate on the "isbn" field.
func IsbnNotIn(vs ...string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldNotIn(FieldIsbn, vs...))
}

// IsbnGT applies the GT predicate on the "isbn" field.
func IsbnGT(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldGT(FieldIsbn, v))
}

// IsbnGTE applies the GTE predicate on the "isbn" field.
func IsbnGTE(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldGTE(FieldIsbn, v))
}

// IsbnLT applies the LT predicate on the "isbn" field.
func IsbnLT(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldLT(FieldIsbn, v))
}

// IsbnLTE applies the LTE predicate on the "isbn" field.
func IsbnLTE(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldLTE(FieldIsbn, v))
}

// IsbnContains applies the Contains predicate on the "isbn" field.
func IsbnContains(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldContains(FieldIsbn, v))
}

// IsbnHasPrefix applies the HasPrefix predicate on the "isbn" field.
func IsbnHasPrefix(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldHasPrefix(FieldIsbn, v))
}

// IsbnHasSuffix applies the HasSuffix predicate on the "isbn" field.
func IsbnHasSuffix(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldHasSuffix(FieldIsbn, v))
}

// IsbnEqualFold applies the EqualFold predicate on the "isbn" field.
func IsbnEqualFold(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldEqualFold(FieldIsbn, v))
}

// IsbnContainsFold applies the ContainsFold predicate on the "isbn" field.
func IsbnContainsFold(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldContainsFold(FieldIsbn, v))
}

// ClassicNameEQ applies the EQ predicate on the "classic_name" field.
func ClassicNameEQ(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldEQ(FieldClassicName, v))
}

// ClassicNameNEQ applies the NEQ predicate on the "classic_name" field.
func ClassicNameNEQ(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldNEQ(FieldClassicName, v))
}

// ClassicNameIn applies the In predicate on the "classic_name" field.
func ClassicNameIn(vs ...string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldIn(FieldClassicName, vs...))
}

// ClassicNameNotIn applies the NotIn predicate on the "classic_name" field.
func ClassicNameNotIn(vs ...string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldNotIn(FieldClassicName, vs...))
}

// ClassicNameGT applies the GT predicate on the "classic_name" field.
func ClassicNameGT(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldGT(FieldClassicName, v))
}

// ClassicNameGTE applies the GTE predicate on the "classic_name" field.
func ClassicNameGTE(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldGTE(FieldClassicName, v))
}

// ClassicNameLT applies the LT predicate on the "classic_name" field.
func ClassicNameLT(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldLT(FieldClassicName, v))
}

// ClassicNameLTE applies the LTE predicate on the "classic_name" field.
func ClassicNameLTE(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldLTE(FieldClassicName, v))
}

// ClassicNameContains applies the Contains predicate on the "classic_name" field.
func ClassicNameContains(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldContains(FieldClassicName, v))
}

// ClassicNameHasPrefix applies the HasPrefix predicate on the "classic_name" field.
func ClassicNameHasPrefix(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldHasPrefix(FieldClassicName, v))
}

// ClassicNameHasSuffix applies the HasSuffix predicate on the "classic_name" field.
func ClassicNameHasSuffix(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldHasSuffix(FieldClassicName, v))
}

// ClassicNameIsNil applies the IsNil predicate on the "classic_name" field.
func ClassicNameIsNil() predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldIsNull(FieldClassicName))
}

// ClassicNameNotNil applies the NotNil predicate on the "classic_name" field.
func ClassicNameNotNil() predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldNotNull(FieldClassicName))
}

// ClassicNameEqualFold applies the EqualFold predicate on the "classic_name" field.
func ClassicNameEqualFold(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldEqualFold(FieldClassicName, v))
}

// ClassicNameContainsFold applies the ContainsFold predicate on the "classic_name" field.
func ClassicNameContainsFold(v string) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldContainsFold(FieldClassicName, v))
}

// BookIDEQ applies the EQ predicate on the "book_id" field.
func BookIDEQ(v int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldEQ(FieldBookID, v))
}

// BookIDNEQ applies the NEQ predicate on the "book_id" field.
func BookIDNEQ(v int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldNEQ(FieldBookID, v))
}

// BookIDIn applies the In predicate on the "book_id" field.
func BookIDIn(vs ...int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldIn(FieldBookID, vs...))
}

// BookIDNotIn applies the NotIn predicate on the "book_id" field.
func BookIDNotIn(vs ...int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldNotIn(FieldBookID, vs...))
}

// BookIDGT applies the GT predicate on the "book_id" field.
func BookIDGT(v int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldGT(FieldBookID, v))
}

// BookIDGTE applies the GTE predicate on the "book_id" field.
func BookIDGTE(v int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldGTE(FieldBookID, v))
}

// BookIDLT applies the LT predicate on the "book_id" field.
func BookIDLT(v int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldLT(FieldBookID, v))
}

// BookIDLTE applies the LTE predicate on the "book_id" field.
func BookIDLTE(v int) predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldLTE(FieldBookID, v))
}

// BookIDIsNil applies the IsNil predicate on the "book_id" field.
func BookIDIsNil() predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldIsNull(FieldBookID))
}

// BookIDNotNil applies the NotNil predicate on the "book_id" field.
func BookIDNotNil() predicate.BookXClassic {
	return predicate.BookXClassic(sql.FieldNotNull(FieldBookID))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BookXClassic) predicate.BookXClassic {
	return predicate.BookXClassic(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BookXClassic) predicate.BookXClassic {
	return predicate.BookXClassic(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BookXClassic) predicate.BookXClassic {
	return predicate.BookXClassic(sql.NotPredicates(p))
}
