// Code generated by ent, DO NOT EDIT.

package category

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the category type in the database.
	Label = "category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "catalog_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCatalogName holds the string denoting the catalog_name field in the database.
	FieldCatalogName = "catalog_name"
	// FieldParentCatalogID holds the string denoting the parent_catalog_id field in the database.
	FieldParentCatalogID = "parent_catalog_id"
	// Table holds the table name of the category in the database.
	Table = "categories"
)

// Columns holds all SQL columns for category fields.
var Columns = []string{
	FieldID,
	FieldDescription,
	FieldCatalogName,
	FieldParentCatalogID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Category queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCatalogName orders the results by the catalog_name field.
func ByCatalogName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCatalogName, opts...).ToFunc()
}

// ByParentCatalogID orders the results by the parent_catalog_id field.
func ByParentCatalogID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentCatalogID, opts...).ToFunc()
}
