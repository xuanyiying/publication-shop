// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/bookxclassic"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/predicate"
)

// BookXClassicUpdate is the builder for updating BookXClassic entities.
type BookXClassicUpdate struct {
	config
	hooks    []Hook
	mutation *BookXClassicMutation
}

// Where appends a list predicates to the BookXClassicUpdate builder.
func (bxu *BookXClassicUpdate) Where(ps ...predicate.BookXClassic) *BookXClassicUpdate {
	bxu.mutation.Where(ps...)
	return bxu
}

// SetClassicID sets the "classic_id" field.
func (bxu *BookXClassicUpdate) SetClassicID(i int) *BookXClassicUpdate {
	bxu.mutation.ResetClassicID()
	bxu.mutation.SetClassicID(i)
	return bxu
}

// SetNillableClassicID sets the "classic_id" field if the given value is not nil.
func (bxu *BookXClassicUpdate) SetNillableClassicID(i *int) *BookXClassicUpdate {
	if i != nil {
		bxu.SetClassicID(*i)
	}
	return bxu
}

// AddClassicID adds i to the "classic_id" field.
func (bxu *BookXClassicUpdate) AddClassicID(i int) *BookXClassicUpdate {
	bxu.mutation.AddClassicID(i)
	return bxu
}

// SetIsbn sets the "isbn" field.
func (bxu *BookXClassicUpdate) SetIsbn(s string) *BookXClassicUpdate {
	bxu.mutation.SetIsbn(s)
	return bxu
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (bxu *BookXClassicUpdate) SetNillableIsbn(s *string) *BookXClassicUpdate {
	if s != nil {
		bxu.SetIsbn(*s)
	}
	return bxu
}

// SetClassicName sets the "classic_name" field.
func (bxu *BookXClassicUpdate) SetClassicName(s string) *BookXClassicUpdate {
	bxu.mutation.SetClassicName(s)
	return bxu
}

// SetNillableClassicName sets the "classic_name" field if the given value is not nil.
func (bxu *BookXClassicUpdate) SetNillableClassicName(s *string) *BookXClassicUpdate {
	if s != nil {
		bxu.SetClassicName(*s)
	}
	return bxu
}

// ClearClassicName clears the value of the "classic_name" field.
func (bxu *BookXClassicUpdate) ClearClassicName() *BookXClassicUpdate {
	bxu.mutation.ClearClassicName()
	return bxu
}

// SetBookID sets the "book_id" field.
func (bxu *BookXClassicUpdate) SetBookID(i int) *BookXClassicUpdate {
	bxu.mutation.ResetBookID()
	bxu.mutation.SetBookID(i)
	return bxu
}

// SetNillableBookID sets the "book_id" field if the given value is not nil.
func (bxu *BookXClassicUpdate) SetNillableBookID(i *int) *BookXClassicUpdate {
	if i != nil {
		bxu.SetBookID(*i)
	}
	return bxu
}

// AddBookID adds i to the "book_id" field.
func (bxu *BookXClassicUpdate) AddBookID(i int) *BookXClassicUpdate {
	bxu.mutation.AddBookID(i)
	return bxu
}

// ClearBookID clears the value of the "book_id" field.
func (bxu *BookXClassicUpdate) ClearBookID() *BookXClassicUpdate {
	bxu.mutation.ClearBookID()
	return bxu
}

// Mutation returns the BookXClassicMutation object of the builder.
func (bxu *BookXClassicUpdate) Mutation() *BookXClassicMutation {
	return bxu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bxu *BookXClassicUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bxu.sqlSave, bxu.mutation, bxu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bxu *BookXClassicUpdate) SaveX(ctx context.Context) int {
	affected, err := bxu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bxu *BookXClassicUpdate) Exec(ctx context.Context) error {
	_, err := bxu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bxu *BookXClassicUpdate) ExecX(ctx context.Context) {
	if err := bxu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bxu *BookXClassicUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(bookxclassic.Table, bookxclassic.Columns, sqlgraph.NewFieldSpec(bookxclassic.FieldID, field.TypeInt))
	if ps := bxu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bxu.mutation.ClassicID(); ok {
		_spec.SetField(bookxclassic.FieldClassicID, field.TypeInt, value)
	}
	if value, ok := bxu.mutation.AddedClassicID(); ok {
		_spec.AddField(bookxclassic.FieldClassicID, field.TypeInt, value)
	}
	if value, ok := bxu.mutation.Isbn(); ok {
		_spec.SetField(bookxclassic.FieldIsbn, field.TypeString, value)
	}
	if value, ok := bxu.mutation.ClassicName(); ok {
		_spec.SetField(bookxclassic.FieldClassicName, field.TypeString, value)
	}
	if bxu.mutation.ClassicNameCleared() {
		_spec.ClearField(bookxclassic.FieldClassicName, field.TypeString)
	}
	if value, ok := bxu.mutation.BookID(); ok {
		_spec.SetField(bookxclassic.FieldBookID, field.TypeInt, value)
	}
	if value, ok := bxu.mutation.AddedBookID(); ok {
		_spec.AddField(bookxclassic.FieldBookID, field.TypeInt, value)
	}
	if bxu.mutation.BookIDCleared() {
		_spec.ClearField(bookxclassic.FieldBookID, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bxu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookxclassic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bxu.mutation.done = true
	return n, nil
}

// BookXClassicUpdateOne is the builder for updating a single BookXClassic entity.
type BookXClassicUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookXClassicMutation
}

// SetClassicID sets the "classic_id" field.
func (bxuo *BookXClassicUpdateOne) SetClassicID(i int) *BookXClassicUpdateOne {
	bxuo.mutation.ResetClassicID()
	bxuo.mutation.SetClassicID(i)
	return bxuo
}

// SetNillableClassicID sets the "classic_id" field if the given value is not nil.
func (bxuo *BookXClassicUpdateOne) SetNillableClassicID(i *int) *BookXClassicUpdateOne {
	if i != nil {
		bxuo.SetClassicID(*i)
	}
	return bxuo
}

// AddClassicID adds i to the "classic_id" field.
func (bxuo *BookXClassicUpdateOne) AddClassicID(i int) *BookXClassicUpdateOne {
	bxuo.mutation.AddClassicID(i)
	return bxuo
}

// SetIsbn sets the "isbn" field.
func (bxuo *BookXClassicUpdateOne) SetIsbn(s string) *BookXClassicUpdateOne {
	bxuo.mutation.SetIsbn(s)
	return bxuo
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (bxuo *BookXClassicUpdateOne) SetNillableIsbn(s *string) *BookXClassicUpdateOne {
	if s != nil {
		bxuo.SetIsbn(*s)
	}
	return bxuo
}

// SetClassicName sets the "classic_name" field.
func (bxuo *BookXClassicUpdateOne) SetClassicName(s string) *BookXClassicUpdateOne {
	bxuo.mutation.SetClassicName(s)
	return bxuo
}

// SetNillableClassicName sets the "classic_name" field if the given value is not nil.
func (bxuo *BookXClassicUpdateOne) SetNillableClassicName(s *string) *BookXClassicUpdateOne {
	if s != nil {
		bxuo.SetClassicName(*s)
	}
	return bxuo
}

// ClearClassicName clears the value of the "classic_name" field.
func (bxuo *BookXClassicUpdateOne) ClearClassicName() *BookXClassicUpdateOne {
	bxuo.mutation.ClearClassicName()
	return bxuo
}

// SetBookID sets the "book_id" field.
func (bxuo *BookXClassicUpdateOne) SetBookID(i int) *BookXClassicUpdateOne {
	bxuo.mutation.ResetBookID()
	bxuo.mutation.SetBookID(i)
	return bxuo
}

// SetNillableBookID sets the "book_id" field if the given value is not nil.
func (bxuo *BookXClassicUpdateOne) SetNillableBookID(i *int) *BookXClassicUpdateOne {
	if i != nil {
		bxuo.SetBookID(*i)
	}
	return bxuo
}

// AddBookID adds i to the "book_id" field.
func (bxuo *BookXClassicUpdateOne) AddBookID(i int) *BookXClassicUpdateOne {
	bxuo.mutation.AddBookID(i)
	return bxuo
}

// ClearBookID clears the value of the "book_id" field.
func (bxuo *BookXClassicUpdateOne) ClearBookID() *BookXClassicUpdateOne {
	bxuo.mutation.ClearBookID()
	return bxuo
}

// Mutation returns the BookXClassicMutation object of the builder.
func (bxuo *BookXClassicUpdateOne) Mutation() *BookXClassicMutation {
	return bxuo.mutation
}

// Where appends a list predicates to the BookXClassicUpdate builder.
func (bxuo *BookXClassicUpdateOne) Where(ps ...predicate.BookXClassic) *BookXClassicUpdateOne {
	bxuo.mutation.Where(ps...)
	return bxuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bxuo *BookXClassicUpdateOne) Select(field string, fields ...string) *BookXClassicUpdateOne {
	bxuo.fields = append([]string{field}, fields...)
	return bxuo
}

// Save executes the query and returns the updated BookXClassic entity.
func (bxuo *BookXClassicUpdateOne) Save(ctx context.Context) (*BookXClassic, error) {
	return withHooks(ctx, bxuo.sqlSave, bxuo.mutation, bxuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bxuo *BookXClassicUpdateOne) SaveX(ctx context.Context) *BookXClassic {
	node, err := bxuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bxuo *BookXClassicUpdateOne) Exec(ctx context.Context) error {
	_, err := bxuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bxuo *BookXClassicUpdateOne) ExecX(ctx context.Context) {
	if err := bxuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bxuo *BookXClassicUpdateOne) sqlSave(ctx context.Context) (_node *BookXClassic, err error) {
	_spec := sqlgraph.NewUpdateSpec(bookxclassic.Table, bookxclassic.Columns, sqlgraph.NewFieldSpec(bookxclassic.FieldID, field.TypeInt))
	id, ok := bxuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BookXClassic.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bxuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bookxclassic.FieldID)
		for _, f := range fields {
			if !bookxclassic.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bookxclassic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bxuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bxuo.mutation.ClassicID(); ok {
		_spec.SetField(bookxclassic.FieldClassicID, field.TypeInt, value)
	}
	if value, ok := bxuo.mutation.AddedClassicID(); ok {
		_spec.AddField(bookxclassic.FieldClassicID, field.TypeInt, value)
	}
	if value, ok := bxuo.mutation.Isbn(); ok {
		_spec.SetField(bookxclassic.FieldIsbn, field.TypeString, value)
	}
	if value, ok := bxuo.mutation.ClassicName(); ok {
		_spec.SetField(bookxclassic.FieldClassicName, field.TypeString, value)
	}
	if bxuo.mutation.ClassicNameCleared() {
		_spec.ClearField(bookxclassic.FieldClassicName, field.TypeString)
	}
	if value, ok := bxuo.mutation.BookID(); ok {
		_spec.SetField(bookxclassic.FieldBookID, field.TypeInt, value)
	}
	if value, ok := bxuo.mutation.AddedBookID(); ok {
		_spec.AddField(bookxclassic.FieldBookID, field.TypeInt, value)
	}
	if bxuo.mutation.BookIDCleared() {
		_spec.ClearField(bookxclassic.FieldBookID, field.TypeInt)
	}
	_node = &BookXClassic{config: bxuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bxuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookxclassic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bxuo.mutation.done = true
	return _node, nil
}
