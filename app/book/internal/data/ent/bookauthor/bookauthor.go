// Code generated by ent, DO NOT EDIT.

package bookauthor

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the bookauthor type in the database.
	Label = "book_author"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "book_author_id"
	// FieldAuthorID holds the string denoting the author_id field in the database.
	FieldAuthorID = "author_id"
	// FieldIsbn holds the string denoting the isbn field in the database.
	FieldIsbn = "isbn"
	// FieldBookID holds the string denoting the book_id field in the database.
	FieldBookID = "book_id"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldAuthorAbout holds the string denoting the author_about field in the database.
	FieldAuthorAbout = "author_about"
	// Table holds the table name of the bookauthor in the database.
	Table = "book_authors"
)

// Columns holds all SQL columns for bookauthor fields.
var Columns = []string{
	FieldID,
	FieldAuthorID,
	FieldIsbn,
	FieldBookID,
	FieldAuthor,
	FieldAuthorAbout,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the BookAuthor queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAuthorID orders the results by the author_id field.
func ByAuthorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorID, opts...).ToFunc()
}

// ByIsbn orders the results by the isbn field.
func ByIsbn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsbn, opts...).ToFunc()
}

// ByBookID orders the results by the book_id field.
func ByBookID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBookID, opts...).ToFunc()
}

// ByAuthor orders the results by the author field.
func ByAuthor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthor, opts...).ToFunc()
}

// ByAuthorAbout orders the results by the author_about field.
func ByAuthorAbout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorAbout, opts...).ToFunc()
}
