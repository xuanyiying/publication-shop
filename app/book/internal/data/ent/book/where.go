// Code generated by ent, DO NOT EDIT.

package book

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldID, id))
}

// Isbn applies equality check predicate on the "isbn" field. It's identical to IsbnEQ.
func Isbn(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldIsbn, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldTitle, v))
}

// Author applies equality check predicate on the "author" field. It's identical to AuthorEQ.
func Author(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldAuthor, v))
}

// Translator applies equality check predicate on the "translator" field. It's identical to TranslatorEQ.
func Translator(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldTranslator, v))
}

// PublisherID applies equality check predicate on the "publisher_id" field. It's identical to PublisherIDEQ.
func PublisherID(v int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPublisherID, v))
}

// Publisher applies equality check predicate on the "publisher" field. It's identical to PublisherEQ.
func Publisher(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPublisher, v))
}

// PublicationYear applies equality check predicate on the "publication_year" field. It's identical to PublicationYearEQ.
func PublicationYear(v int16) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPublicationYear, v))
}

// PublicationDate applies equality check predicate on the "publication_date" field. It's identical to PublicationDateEQ.
func PublicationDate(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPublicationDate, v))
}

// Edition applies equality check predicate on the "edition" field. It's identical to EditionEQ.
func Edition(v int8) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldEdition, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldCategory, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPrice, v))
}

// StockQuantity applies equality check predicate on the "stock_quantity" field. It's identical to StockQuantityEQ.
func StockQuantity(v int32) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldStockQuantity, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldDescription, v))
}

// AddedOn applies equality check predicate on the "added_on" field. It's identical to AddedOnEQ.
func AddedOn(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldAddedOn, v))
}

// CoverImage applies equality check predicate on the "cover_image" field. It's identical to CoverImageEQ.
func CoverImage(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldCoverImage, v))
}

// PageCount applies equality check predicate on the "page_count" field. It's identical to PageCountEQ.
func PageCount(v int32) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPageCount, v))
}

// LanguageID applies equality check predicate on the "language_id" field. It's identical to LanguageIDEQ.
func LanguageID(v int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldLanguageID, v))
}

// Language applies equality check predicate on the "language" field. It's identical to LanguageEQ.
func Language(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldLanguage, v))
}

// AuthorID applies equality check predicate on the "author_id" field. It's identical to AuthorIDEQ.
func AuthorID(v int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldAuthorID, v))
}

// CategoryID applies equality check predicate on the "category_id" field. It's identical to CategoryIDEQ.
func CategoryID(v int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldCategoryID, v))
}

// IsbnEQ applies the EQ predicate on the "isbn" field.
func IsbnEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldIsbn, v))
}

// IsbnNEQ applies the NEQ predicate on the "isbn" field.
func IsbnNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldIsbn, v))
}

// IsbnIn applies the In predicate on the "isbn" field.
func IsbnIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldIsbn, vs...))
}

// IsbnNotIn applies the NotIn predicate on the "isbn" field.
func IsbnNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldIsbn, vs...))
}

// IsbnGT applies the GT predicate on the "isbn" field.
func IsbnGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldIsbn, v))
}

// IsbnGTE applies the GTE predicate on the "isbn" field.
func IsbnGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldIsbn, v))
}

// IsbnLT applies the LT predicate on the "isbn" field.
func IsbnLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldIsbn, v))
}

// IsbnLTE applies the LTE predicate on the "isbn" field.
func IsbnLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldIsbn, v))
}

// IsbnContains applies the Contains predicate on the "isbn" field.
func IsbnContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldIsbn, v))
}

// IsbnHasPrefix applies the HasPrefix predicate on the "isbn" field.
func IsbnHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldIsbn, v))
}

// IsbnHasSuffix applies the HasSuffix predicate on the "isbn" field.
func IsbnHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldIsbn, v))
}

// IsbnEqualFold applies the EqualFold predicate on the "isbn" field.
func IsbnEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldIsbn, v))
}

// IsbnContainsFold applies the ContainsFold predicate on the "isbn" field.
func IsbnContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldIsbn, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldTitle, v))
}

// AuthorEQ applies the EQ predicate on the "author" field.
func AuthorEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldAuthor, v))
}

// AuthorNEQ applies the NEQ predicate on the "author" field.
func AuthorNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldAuthor, v))
}

// AuthorIn applies the In predicate on the "author" field.
func AuthorIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldAuthor, vs...))
}

// AuthorNotIn applies the NotIn predicate on the "author" field.
func AuthorNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldAuthor, vs...))
}

// AuthorGT applies the GT predicate on the "author" field.
func AuthorGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldAuthor, v))
}

// AuthorGTE applies the GTE predicate on the "author" field.
func AuthorGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldAuthor, v))
}

// AuthorLT applies the LT predicate on the "author" field.
func AuthorLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldAuthor, v))
}

// AuthorLTE applies the LTE predicate on the "author" field.
func AuthorLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldAuthor, v))
}

// AuthorContains applies the Contains predicate on the "author" field.
func AuthorContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldAuthor, v))
}

// AuthorHasPrefix applies the HasPrefix predicate on the "author" field.
func AuthorHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldAuthor, v))
}

// AuthorHasSuffix applies the HasSuffix predicate on the "author" field.
func AuthorHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldAuthor, v))
}

// AuthorEqualFold applies the EqualFold predicate on the "author" field.
func AuthorEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldAuthor, v))
}

// AuthorContainsFold applies the ContainsFold predicate on the "author" field.
func AuthorContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldAuthor, v))
}

// TranslatorEQ applies the EQ predicate on the "translator" field.
func TranslatorEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldTranslator, v))
}

// TranslatorNEQ applies the NEQ predicate on the "translator" field.
func TranslatorNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldTranslator, v))
}

// TranslatorIn applies the In predicate on the "translator" field.
func TranslatorIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldTranslator, vs...))
}

// TranslatorNotIn applies the NotIn predicate on the "translator" field.
func TranslatorNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldTranslator, vs...))
}

// TranslatorGT applies the GT predicate on the "translator" field.
func TranslatorGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldTranslator, v))
}

// TranslatorGTE applies the GTE predicate on the "translator" field.
func TranslatorGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldTranslator, v))
}

// TranslatorLT applies the LT predicate on the "translator" field.
func TranslatorLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldTranslator, v))
}

// TranslatorLTE applies the LTE predicate on the "translator" field.
func TranslatorLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldTranslator, v))
}

// TranslatorContains applies the Contains predicate on the "translator" field.
func TranslatorContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldTranslator, v))
}

// TranslatorHasPrefix applies the HasPrefix predicate on the "translator" field.
func TranslatorHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldTranslator, v))
}

// TranslatorHasSuffix applies the HasSuffix predicate on the "translator" field.
func TranslatorHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldTranslator, v))
}

// TranslatorIsNil applies the IsNil predicate on the "translator" field.
func TranslatorIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldTranslator))
}

// TranslatorNotNil applies the NotNil predicate on the "translator" field.
func TranslatorNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldTranslator))
}

// TranslatorEqualFold applies the EqualFold predicate on the "translator" field.
func TranslatorEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldTranslator, v))
}

// TranslatorContainsFold applies the ContainsFold predicate on the "translator" field.
func TranslatorContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldTranslator, v))
}

// PublisherIDEQ applies the EQ predicate on the "publisher_id" field.
func PublisherIDEQ(v int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPublisherID, v))
}

// PublisherIDNEQ applies the NEQ predicate on the "publisher_id" field.
func PublisherIDNEQ(v int) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldPublisherID, v))
}

// PublisherIDIn applies the In predicate on the "publisher_id" field.
func PublisherIDIn(vs ...int) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldPublisherID, vs...))
}

// PublisherIDNotIn applies the NotIn predicate on the "publisher_id" field.
func PublisherIDNotIn(vs ...int) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldPublisherID, vs...))
}

// PublisherIDGT applies the GT predicate on the "publisher_id" field.
func PublisherIDGT(v int) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldPublisherID, v))
}

// PublisherIDGTE applies the GTE predicate on the "publisher_id" field.
func PublisherIDGTE(v int) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldPublisherID, v))
}

// PublisherIDLT applies the LT predicate on the "publisher_id" field.
func PublisherIDLT(v int) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldPublisherID, v))
}

// PublisherIDLTE applies the LTE predicate on the "publisher_id" field.
func PublisherIDLTE(v int) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldPublisherID, v))
}

// PublisherIDIsNil applies the IsNil predicate on the "publisher_id" field.
func PublisherIDIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldPublisherID))
}

// PublisherIDNotNil applies the NotNil predicate on the "publisher_id" field.
func PublisherIDNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldPublisherID))
}

// PublisherEQ applies the EQ predicate on the "publisher" field.
func PublisherEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPublisher, v))
}

// PublisherNEQ applies the NEQ predicate on the "publisher" field.
func PublisherNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldPublisher, v))
}

// PublisherIn applies the In predicate on the "publisher" field.
func PublisherIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldPublisher, vs...))
}

// PublisherNotIn applies the NotIn predicate on the "publisher" field.
func PublisherNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldPublisher, vs...))
}

// PublisherGT applies the GT predicate on the "publisher" field.
func PublisherGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldPublisher, v))
}

// PublisherGTE applies the GTE predicate on the "publisher" field.
func PublisherGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldPublisher, v))
}

// PublisherLT applies the LT predicate on the "publisher" field.
func PublisherLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldPublisher, v))
}

// PublisherLTE applies the LTE predicate on the "publisher" field.
func PublisherLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldPublisher, v))
}

// PublisherContains applies the Contains predicate on the "publisher" field.
func PublisherContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldPublisher, v))
}

// PublisherHasPrefix applies the HasPrefix predicate on the "publisher" field.
func PublisherHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldPublisher, v))
}

// PublisherHasSuffix applies the HasSuffix predicate on the "publisher" field.
func PublisherHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldPublisher, v))
}

// PublisherIsNil applies the IsNil predicate on the "publisher" field.
func PublisherIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldPublisher))
}

// PublisherNotNil applies the NotNil predicate on the "publisher" field.
func PublisherNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldPublisher))
}

// PublisherEqualFold applies the EqualFold predicate on the "publisher" field.
func PublisherEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldPublisher, v))
}

// PublisherContainsFold applies the ContainsFold predicate on the "publisher" field.
func PublisherContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldPublisher, v))
}

// PublicationYearEQ applies the EQ predicate on the "publication_year" field.
func PublicationYearEQ(v int16) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPublicationYear, v))
}

// PublicationYearNEQ applies the NEQ predicate on the "publication_year" field.
func PublicationYearNEQ(v int16) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldPublicationYear, v))
}

// PublicationYearIn applies the In predicate on the "publication_year" field.
func PublicationYearIn(vs ...int16) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldPublicationYear, vs...))
}

// PublicationYearNotIn applies the NotIn predicate on the "publication_year" field.
func PublicationYearNotIn(vs ...int16) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldPublicationYear, vs...))
}

// PublicationYearGT applies the GT predicate on the "publication_year" field.
func PublicationYearGT(v int16) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldPublicationYear, v))
}

// PublicationYearGTE applies the GTE predicate on the "publication_year" field.
func PublicationYearGTE(v int16) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldPublicationYear, v))
}

// PublicationYearLT applies the LT predicate on the "publication_year" field.
func PublicationYearLT(v int16) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldPublicationYear, v))
}

// PublicationYearLTE applies the LTE predicate on the "publication_year" field.
func PublicationYearLTE(v int16) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldPublicationYear, v))
}

// PublicationYearIsNil applies the IsNil predicate on the "publication_year" field.
func PublicationYearIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldPublicationYear))
}

// PublicationYearNotNil applies the NotNil predicate on the "publication_year" field.
func PublicationYearNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldPublicationYear))
}

// PublicationDateEQ applies the EQ predicate on the "publication_date" field.
func PublicationDateEQ(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPublicationDate, v))
}

// PublicationDateNEQ applies the NEQ predicate on the "publication_date" field.
func PublicationDateNEQ(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldPublicationDate, v))
}

// PublicationDateIn applies the In predicate on the "publication_date" field.
func PublicationDateIn(vs ...time.Time) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldPublicationDate, vs...))
}

// PublicationDateNotIn applies the NotIn predicate on the "publication_date" field.
func PublicationDateNotIn(vs ...time.Time) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldPublicationDate, vs...))
}

// PublicationDateGT applies the GT predicate on the "publication_date" field.
func PublicationDateGT(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldPublicationDate, v))
}

// PublicationDateGTE applies the GTE predicate on the "publication_date" field.
func PublicationDateGTE(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldPublicationDate, v))
}

// PublicationDateLT applies the LT predicate on the "publication_date" field.
func PublicationDateLT(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldPublicationDate, v))
}

// PublicationDateLTE applies the LTE predicate on the "publication_date" field.
func PublicationDateLTE(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldPublicationDate, v))
}

// EditionEQ applies the EQ predicate on the "edition" field.
func EditionEQ(v int8) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldEdition, v))
}

// EditionNEQ applies the NEQ predicate on the "edition" field.
func EditionNEQ(v int8) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldEdition, v))
}

// EditionIn applies the In predicate on the "edition" field.
func EditionIn(vs ...int8) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldEdition, vs...))
}

// EditionNotIn applies the NotIn predicate on the "edition" field.
func EditionNotIn(vs ...int8) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldEdition, vs...))
}

// EditionGT applies the GT predicate on the "edition" field.
func EditionGT(v int8) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldEdition, v))
}

// EditionGTE applies the GTE predicate on the "edition" field.
func EditionGTE(v int8) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldEdition, v))
}

// EditionLT applies the LT predicate on the "edition" field.
func EditionLT(v int8) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldEdition, v))
}

// EditionLTE applies the LTE predicate on the "edition" field.
func EditionLTE(v int8) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldEdition, v))
}

// EditionIsNil applies the IsNil predicate on the "edition" field.
func EditionIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldEdition))
}

// EditionNotNil applies the NotNil predicate on the "edition" field.
func EditionNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldEdition))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryIsNil applies the IsNil predicate on the "category" field.
func CategoryIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldCategory))
}

// CategoryNotNil applies the NotNil predicate on the "category" field.
func CategoryNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldCategory))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldCategory, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldPrice, v))
}

// PriceIsNil applies the IsNil predicate on the "price" field.
func PriceIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldPrice))
}

// PriceNotNil applies the NotNil predicate on the "price" field.
func PriceNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldPrice))
}

// StockQuantityEQ applies the EQ predicate on the "stock_quantity" field.
func StockQuantityEQ(v int32) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldStockQuantity, v))
}

// StockQuantityNEQ applies the NEQ predicate on the "stock_quantity" field.
func StockQuantityNEQ(v int32) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldStockQuantity, v))
}

// StockQuantityIn applies the In predicate on the "stock_quantity" field.
func StockQuantityIn(vs ...int32) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldStockQuantity, vs...))
}

// StockQuantityNotIn applies the NotIn predicate on the "stock_quantity" field.
func StockQuantityNotIn(vs ...int32) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldStockQuantity, vs...))
}

// StockQuantityGT applies the GT predicate on the "stock_quantity" field.
func StockQuantityGT(v int32) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldStockQuantity, v))
}

// StockQuantityGTE applies the GTE predicate on the "stock_quantity" field.
func StockQuantityGTE(v int32) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldStockQuantity, v))
}

// StockQuantityLT applies the LT predicate on the "stock_quantity" field.
func StockQuantityLT(v int32) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldStockQuantity, v))
}

// StockQuantityLTE applies the LTE predicate on the "stock_quantity" field.
func StockQuantityLTE(v int32) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldStockQuantity, v))
}

// StockQuantityIsNil applies the IsNil predicate on the "stock_quantity" field.
func StockQuantityIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldStockQuantity))
}

// StockQuantityNotNil applies the NotNil predicate on the "stock_quantity" field.
func StockQuantityNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldStockQuantity))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldDescription, v))
}

// AddedOnEQ applies the EQ predicate on the "added_on" field.
func AddedOnEQ(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldAddedOn, v))
}

// AddedOnNEQ applies the NEQ predicate on the "added_on" field.
func AddedOnNEQ(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldAddedOn, v))
}

// AddedOnIn applies the In predicate on the "added_on" field.
func AddedOnIn(vs ...time.Time) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldAddedOn, vs...))
}

// AddedOnNotIn applies the NotIn predicate on the "added_on" field.
func AddedOnNotIn(vs ...time.Time) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldAddedOn, vs...))
}

// AddedOnGT applies the GT predicate on the "added_on" field.
func AddedOnGT(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldAddedOn, v))
}

// AddedOnGTE applies the GTE predicate on the "added_on" field.
func AddedOnGTE(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldAddedOn, v))
}

// AddedOnLT applies the LT predicate on the "added_on" field.
func AddedOnLT(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldAddedOn, v))
}

// AddedOnLTE applies the LTE predicate on the "added_on" field.
func AddedOnLTE(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldAddedOn, v))
}

// AddedOnIsNil applies the IsNil predicate on the "added_on" field.
func AddedOnIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldAddedOn))
}

// AddedOnNotNil applies the NotNil predicate on the "added_on" field.
func AddedOnNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldAddedOn))
}

// CoverImageEQ applies the EQ predicate on the "cover_image" field.
func CoverImageEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldCoverImage, v))
}

// CoverImageNEQ applies the NEQ predicate on the "cover_image" field.
func CoverImageNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldCoverImage, v))
}

// CoverImageIn applies the In predicate on the "cover_image" field.
func CoverImageIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldCoverImage, vs...))
}

// CoverImageNotIn applies the NotIn predicate on the "cover_image" field.
func CoverImageNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldCoverImage, vs...))
}

// CoverImageGT applies the GT predicate on the "cover_image" field.
func CoverImageGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldCoverImage, v))
}

// CoverImageGTE applies the GTE predicate on the "cover_image" field.
func CoverImageGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldCoverImage, v))
}

// CoverImageLT applies the LT predicate on the "cover_image" field.
func CoverImageLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldCoverImage, v))
}

// CoverImageLTE applies the LTE predicate on the "cover_image" field.
func CoverImageLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldCoverImage, v))
}

// CoverImageContains applies the Contains predicate on the "cover_image" field.
func CoverImageContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldCoverImage, v))
}

// CoverImageHasPrefix applies the HasPrefix predicate on the "cover_image" field.
func CoverImageHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldCoverImage, v))
}

// CoverImageHasSuffix applies the HasSuffix predicate on the "cover_image" field.
func CoverImageHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldCoverImage, v))
}

// CoverImageIsNil applies the IsNil predicate on the "cover_image" field.
func CoverImageIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldCoverImage))
}

// CoverImageNotNil applies the NotNil predicate on the "cover_image" field.
func CoverImageNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldCoverImage))
}

// CoverImageEqualFold applies the EqualFold predicate on the "cover_image" field.
func CoverImageEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldCoverImage, v))
}

// CoverImageContainsFold applies the ContainsFold predicate on the "cover_image" field.
func CoverImageContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldCoverImage, v))
}

// PageCountEQ applies the EQ predicate on the "page_count" field.
func PageCountEQ(v int32) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPageCount, v))
}

// PageCountNEQ applies the NEQ predicate on the "page_count" field.
func PageCountNEQ(v int32) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldPageCount, v))
}

// PageCountIn applies the In predicate on the "page_count" field.
func PageCountIn(vs ...int32) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldPageCount, vs...))
}

// PageCountNotIn applies the NotIn predicate on the "page_count" field.
func PageCountNotIn(vs ...int32) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldPageCount, vs...))
}

// PageCountGT applies the GT predicate on the "page_count" field.
func PageCountGT(v int32) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldPageCount, v))
}

// PageCountGTE applies the GTE predicate on the "page_count" field.
func PageCountGTE(v int32) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldPageCount, v))
}

// PageCountLT applies the LT predicate on the "page_count" field.
func PageCountLT(v int32) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldPageCount, v))
}

// PageCountLTE applies the LTE predicate on the "page_count" field.
func PageCountLTE(v int32) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldPageCount, v))
}

// LanguageIDEQ applies the EQ predicate on the "language_id" field.
func LanguageIDEQ(v int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldLanguageID, v))
}

// LanguageIDNEQ applies the NEQ predicate on the "language_id" field.
func LanguageIDNEQ(v int) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldLanguageID, v))
}

// LanguageIDIn applies the In predicate on the "language_id" field.
func LanguageIDIn(vs ...int) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldLanguageID, vs...))
}

// LanguageIDNotIn applies the NotIn predicate on the "language_id" field.
func LanguageIDNotIn(vs ...int) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldLanguageID, vs...))
}

// LanguageIDGT applies the GT predicate on the "language_id" field.
func LanguageIDGT(v int) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldLanguageID, v))
}

// LanguageIDGTE applies the GTE predicate on the "language_id" field.
func LanguageIDGTE(v int) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldLanguageID, v))
}

// LanguageIDLT applies the LT predicate on the "language_id" field.
func LanguageIDLT(v int) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldLanguageID, v))
}

// LanguageIDLTE applies the LTE predicate on the "language_id" field.
func LanguageIDLTE(v int) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldLanguageID, v))
}

// LanguageEQ applies the EQ predicate on the "language" field.
func LanguageEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldLanguage, v))
}

// LanguageNEQ applies the NEQ predicate on the "language" field.
func LanguageNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldLanguage, v))
}

// LanguageIn applies the In predicate on the "language" field.
func LanguageIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldLanguage, vs...))
}

// LanguageNotIn applies the NotIn predicate on the "language" field.
func LanguageNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldLanguage, vs...))
}

// LanguageGT applies the GT predicate on the "language" field.
func LanguageGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldLanguage, v))
}

// LanguageGTE applies the GTE predicate on the "language" field.
func LanguageGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldLanguage, v))
}

// LanguageLT applies the LT predicate on the "language" field.
func LanguageLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldLanguage, v))
}

// LanguageLTE applies the LTE predicate on the "language" field.
func LanguageLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldLanguage, v))
}

// LanguageContains applies the Contains predicate on the "language" field.
func LanguageContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldLanguage, v))
}

// LanguageHasPrefix applies the HasPrefix predicate on the "language" field.
func LanguageHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldLanguage, v))
}

// LanguageHasSuffix applies the HasSuffix predicate on the "language" field.
func LanguageHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldLanguage, v))
}

// LanguageEqualFold applies the EqualFold predicate on the "language" field.
func LanguageEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldLanguage, v))
}

// LanguageContainsFold applies the ContainsFold predicate on the "language" field.
func LanguageContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldLanguage, v))
}

// AuthorIDEQ applies the EQ predicate on the "author_id" field.
func AuthorIDEQ(v int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldAuthorID, v))
}

// AuthorIDNEQ applies the NEQ predicate on the "author_id" field.
func AuthorIDNEQ(v int) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldAuthorID, v))
}

// AuthorIDIn applies the In predicate on the "author_id" field.
func AuthorIDIn(vs ...int) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldAuthorID, vs...))
}

// AuthorIDNotIn applies the NotIn predicate on the "author_id" field.
func AuthorIDNotIn(vs ...int) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldAuthorID, vs...))
}

// AuthorIDGT applies the GT predicate on the "author_id" field.
func AuthorIDGT(v int) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldAuthorID, v))
}

// AuthorIDGTE applies the GTE predicate on the "author_id" field.
func AuthorIDGTE(v int) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldAuthorID, v))
}

// AuthorIDLT applies the LT predicate on the "author_id" field.
func AuthorIDLT(v int) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldAuthorID, v))
}

// AuthorIDLTE applies the LTE predicate on the "author_id" field.
func AuthorIDLTE(v int) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldAuthorID, v))
}

// CategoryIDEQ applies the EQ predicate on the "category_id" field.
func CategoryIDEQ(v int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldCategoryID, v))
}

// CategoryIDNEQ applies the NEQ predicate on the "category_id" field.
func CategoryIDNEQ(v int) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldCategoryID, v))
}

// CategoryIDIn applies the In predicate on the "category_id" field.
func CategoryIDIn(vs ...int) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldCategoryID, vs...))
}

// CategoryIDNotIn applies the NotIn predicate on the "category_id" field.
func CategoryIDNotIn(vs ...int) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldCategoryID, vs...))
}

// CategoryIDGT applies the GT predicate on the "category_id" field.
func CategoryIDGT(v int) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldCategoryID, v))
}

// CategoryIDGTE applies the GTE predicate on the "category_id" field.
func CategoryIDGTE(v int) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldCategoryID, v))
}

// CategoryIDLT applies the LT predicate on the "category_id" field.
func CategoryIDLT(v int) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldCategoryID, v))
}

// CategoryIDLTE applies the LTE predicate on the "category_id" field.
func CategoryIDLTE(v int) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldCategoryID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Book) predicate.Book {
	return predicate.Book(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Book) predicate.Book {
	return predicate.Book(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Book) predicate.Book {
	return predicate.Book(sql.NotPredicates(p))
}
