// Code generated by ent, DO NOT EDIT.

package book

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the book type in the database.
	Label = "book"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "book_id"
	// FieldIsbn holds the string denoting the isbn field in the database.
	FieldIsbn = "isbn"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldAuthor holds the string denoting the author field in the database.
	FieldAuthor = "author"
	// FieldTranslator holds the string denoting the translator field in the database.
	FieldTranslator = "translator"
	// FieldPublisherID holds the string denoting the publisher_id field in the database.
	FieldPublisherID = "publisher_id"
	// FieldPublisher holds the string denoting the publisher field in the database.
	FieldPublisher = "publisher"
	// FieldPublicationYear holds the string denoting the publication_year field in the database.
	FieldPublicationYear = "publication_year"
	// FieldPublicationDate holds the string denoting the publication_date field in the database.
	FieldPublicationDate = "publication_date"
	// FieldEdition holds the string denoting the edition field in the database.
	FieldEdition = "edition"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldStockQuantity holds the string denoting the stock_quantity field in the database.
	FieldStockQuantity = "stock_quantity"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldAddedOn holds the string denoting the added_on field in the database.
	FieldAddedOn = "added_on"
	// FieldCoverImage holds the string denoting the cover_image field in the database.
	FieldCoverImage = "cover_image"
	// FieldPageCount holds the string denoting the page_count field in the database.
	FieldPageCount = "page_count"
	// FieldLanguageID holds the string denoting the language_id field in the database.
	FieldLanguageID = "language_id"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldAuthorID holds the string denoting the author_id field in the database.
	FieldAuthorID = "author_id"
	// FieldCategoryID holds the string denoting the category_id field in the database.
	FieldCategoryID = "category_id"
	// Table holds the table name of the book in the database.
	Table = "books"
)

// Columns holds all SQL columns for book fields.
var Columns = []string{
	FieldID,
	FieldIsbn,
	FieldTitle,
	FieldAuthor,
	FieldTranslator,
	FieldPublisherID,
	FieldPublisher,
	FieldPublicationYear,
	FieldPublicationDate,
	FieldEdition,
	FieldCategory,
	FieldPrice,
	FieldStockQuantity,
	FieldDescription,
	FieldAddedOn,
	FieldCoverImage,
	FieldPageCount,
	FieldLanguageID,
	FieldLanguage,
	FieldAuthorID,
	FieldCategoryID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Book queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIsbn orders the results by the isbn field.
func ByIsbn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsbn, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByAuthor orders the results by the author field.
func ByAuthor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthor, opts...).ToFunc()
}

// ByTranslator orders the results by the translator field.
func ByTranslator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTranslator, opts...).ToFunc()
}

// ByPublisherID orders the results by the publisher_id field.
func ByPublisherID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublisherID, opts...).ToFunc()
}

// ByPublisher orders the results by the publisher field.
func ByPublisher(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublisher, opts...).ToFunc()
}

// ByPublicationYear orders the results by the publication_year field.
func ByPublicationYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicationYear, opts...).ToFunc()
}

// ByPublicationDate orders the results by the publication_date field.
func ByPublicationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicationDate, opts...).ToFunc()
}

// ByEdition orders the results by the edition field.
func ByEdition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEdition, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByStockQuantity orders the results by the stock_quantity field.
func ByStockQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStockQuantity, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByAddedOn orders the results by the added_on field.
func ByAddedOn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddedOn, opts...).ToFunc()
}

// ByCoverImage orders the results by the cover_image field.
func ByCoverImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoverImage, opts...).ToFunc()
}

// ByPageCount orders the results by the page_count field.
func ByPageCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPageCount, opts...).ToFunc()
}

// ByLanguageID orders the results by the language_id field.
func ByLanguageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguageID, opts...).ToFunc()
}

// ByLanguage orders the results by the language field.
func ByLanguage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLanguage, opts...).ToFunc()
}

// ByAuthorID orders the results by the author_id field.
func ByAuthorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuthorID, opts...).ToFunc()
}

// ByCategoryID orders the results by the category_id field.
func ByCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryID, opts...).ToFunc()
}
