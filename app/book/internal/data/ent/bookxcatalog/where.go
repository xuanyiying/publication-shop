// Code generated by ent, DO NOT EDIT.

package bookxcatalog

import (
	"entgo.io/ent/dialect/sql"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldLTE(FieldID, id))
}

// CatalogID applies equality check predicate on the "catalog_id" field. It's identical to CatalogIDEQ.
func CatalogID(v int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldEQ(FieldCatalogID, v))
}

// Isbn applies equality check predicate on the "isbn" field. It's identical to IsbnEQ.
func Isbn(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldEQ(FieldIsbn, v))
}

// CatalogName applies equality check predicate on the "catalog_name" field. It's identical to CatalogNameEQ.
func CatalogName(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldEQ(FieldCatalogName, v))
}

// BookID applies equality check predicate on the "book_id" field. It's identical to BookIDEQ.
func BookID(v int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldEQ(FieldBookID, v))
}

// CatalogIDEQ applies the EQ predicate on the "catalog_id" field.
func CatalogIDEQ(v int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldEQ(FieldCatalogID, v))
}

// CatalogIDNEQ applies the NEQ predicate on the "catalog_id" field.
func CatalogIDNEQ(v int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldNEQ(FieldCatalogID, v))
}

// CatalogIDIn applies the In predicate on the "catalog_id" field.
func CatalogIDIn(vs ...int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldIn(FieldCatalogID, vs...))
}

// CatalogIDNotIn applies the NotIn predicate on the "catalog_id" field.
func CatalogIDNotIn(vs ...int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldNotIn(FieldCatalogID, vs...))
}

// CatalogIDGT applies the GT predicate on the "catalog_id" field.
func CatalogIDGT(v int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldGT(FieldCatalogID, v))
}

// CatalogIDGTE applies the GTE predicate on the "catalog_id" field.
func CatalogIDGTE(v int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldGTE(FieldCatalogID, v))
}

// CatalogIDLT applies the LT predicate on the "catalog_id" field.
func CatalogIDLT(v int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldLT(FieldCatalogID, v))
}

// CatalogIDLTE applies the LTE predicate on the "catalog_id" field.
func CatalogIDLTE(v int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldLTE(FieldCatalogID, v))
}

// IsbnEQ applies the EQ predicate on the "isbn" field.
func IsbnEQ(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldEQ(FieldIsbn, v))
}

// IsbnNEQ applies the NEQ predicate on the "isbn" field.
func IsbnNEQ(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldNEQ(FieldIsbn, v))
}

// IsbnIn applies the In predicate on the "isbn" field.
func IsbnIn(vs ...string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldIn(FieldIsbn, vs...))
}

// IsbnNotIn applies the NotIn predicate on the "isbn" field.
func IsbnNotIn(vs ...string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldNotIn(FieldIsbn, vs...))
}

// IsbnGT applies the GT predicate on the "isbn" field.
func IsbnGT(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldGT(FieldIsbn, v))
}

// IsbnGTE applies the GTE predicate on the "isbn" field.
func IsbnGTE(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldGTE(FieldIsbn, v))
}

// IsbnLT applies the LT predicate on the "isbn" field.
func IsbnLT(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldLT(FieldIsbn, v))
}

// IsbnLTE applies the LTE predicate on the "isbn" field.
func IsbnLTE(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldLTE(FieldIsbn, v))
}

// IsbnContains applies the Contains predicate on the "isbn" field.
func IsbnContains(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldContains(FieldIsbn, v))
}

// IsbnHasPrefix applies the HasPrefix predicate on the "isbn" field.
func IsbnHasPrefix(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldHasPrefix(FieldIsbn, v))
}

// IsbnHasSuffix applies the HasSuffix predicate on the "isbn" field.
func IsbnHasSuffix(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldHasSuffix(FieldIsbn, v))
}

// IsbnEqualFold applies the EqualFold predicate on the "isbn" field.
func IsbnEqualFold(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldEqualFold(FieldIsbn, v))
}

// IsbnContainsFold applies the ContainsFold predicate on the "isbn" field.
func IsbnContainsFold(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldContainsFold(FieldIsbn, v))
}

// CatalogNameEQ applies the EQ predicate on the "catalog_name" field.
func CatalogNameEQ(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldEQ(FieldCatalogName, v))
}

// CatalogNameNEQ applies the NEQ predicate on the "catalog_name" field.
func CatalogNameNEQ(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldNEQ(FieldCatalogName, v))
}

// CatalogNameIn applies the In predicate on the "catalog_name" field.
func CatalogNameIn(vs ...string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldIn(FieldCatalogName, vs...))
}

// CatalogNameNotIn applies the NotIn predicate on the "catalog_name" field.
func CatalogNameNotIn(vs ...string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldNotIn(FieldCatalogName, vs...))
}

// CatalogNameGT applies the GT predicate on the "catalog_name" field.
func CatalogNameGT(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldGT(FieldCatalogName, v))
}

// CatalogNameGTE applies the GTE predicate on the "catalog_name" field.
func CatalogNameGTE(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldGTE(FieldCatalogName, v))
}

// CatalogNameLT applies the LT predicate on the "catalog_name" field.
func CatalogNameLT(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldLT(FieldCatalogName, v))
}

// CatalogNameLTE applies the LTE predicate on the "catalog_name" field.
func CatalogNameLTE(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldLTE(FieldCatalogName, v))
}

// CatalogNameContains applies the Contains predicate on the "catalog_name" field.
func CatalogNameContains(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldContains(FieldCatalogName, v))
}

// CatalogNameHasPrefix applies the HasPrefix predicate on the "catalog_name" field.
func CatalogNameHasPrefix(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldHasPrefix(FieldCatalogName, v))
}

// CatalogNameHasSuffix applies the HasSuffix predicate on the "catalog_name" field.
func CatalogNameHasSuffix(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldHasSuffix(FieldCatalogName, v))
}

// CatalogNameIsNil applies the IsNil predicate on the "catalog_name" field.
func CatalogNameIsNil() predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldIsNull(FieldCatalogName))
}

// CatalogNameNotNil applies the NotNil predicate on the "catalog_name" field.
func CatalogNameNotNil() predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldNotNull(FieldCatalogName))
}

// CatalogNameEqualFold applies the EqualFold predicate on the "catalog_name" field.
func CatalogNameEqualFold(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldEqualFold(FieldCatalogName, v))
}

// CatalogNameContainsFold applies the ContainsFold predicate on the "catalog_name" field.
func CatalogNameContainsFold(v string) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldContainsFold(FieldCatalogName, v))
}

// BookIDEQ applies the EQ predicate on the "book_id" field.
func BookIDEQ(v int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldEQ(FieldBookID, v))
}

// BookIDNEQ applies the NEQ predicate on the "book_id" field.
func BookIDNEQ(v int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldNEQ(FieldBookID, v))
}

// BookIDIn applies the In predicate on the "book_id" field.
func BookIDIn(vs ...int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldIn(FieldBookID, vs...))
}

// BookIDNotIn applies the NotIn predicate on the "book_id" field.
func BookIDNotIn(vs ...int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldNotIn(FieldBookID, vs...))
}

// BookIDGT applies the GT predicate on the "book_id" field.
func BookIDGT(v int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldGT(FieldBookID, v))
}

// BookIDGTE applies the GTE predicate on the "book_id" field.
func BookIDGTE(v int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldGTE(FieldBookID, v))
}

// BookIDLT applies the LT predicate on the "book_id" field.
func BookIDLT(v int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldLT(FieldBookID, v))
}

// BookIDLTE applies the LTE predicate on the "book_id" field.
func BookIDLTE(v int) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldLTE(FieldBookID, v))
}

// BookIDIsNil applies the IsNil predicate on the "book_id" field.
func BookIDIsNil() predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldIsNull(FieldBookID))
}

// BookIDNotNil applies the NotNil predicate on the "book_id" field.
func BookIDNotNil() predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.FieldNotNull(FieldBookID))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BookXCatalog) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BookXCatalog) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BookXCatalog) predicate.BookXCatalog {
	return predicate.BookXCatalog(sql.NotPredicates(p))
}
