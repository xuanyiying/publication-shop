// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/bookdetail"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/predicate"
)

// BookDetailUpdate is the builder for updating BookDetail entities.
type BookDetailUpdate struct {
	config
	hooks    []Hook
	mutation *BookDetailMutation
}

// Where appends a list predicates to the BookDetailUpdate builder.
func (bdu *BookDetailUpdate) Where(ps ...predicate.BookDetail) *BookDetailUpdate {
	bdu.mutation.Where(ps...)
	return bdu
}

// SetIsbn sets the "isbn" field.
func (bdu *BookDetailUpdate) SetIsbn(s string) *BookDetailUpdate {
	bdu.mutation.SetIsbn(s)
	return bdu
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (bdu *BookDetailUpdate) SetNillableIsbn(s *string) *BookDetailUpdate {
	if s != nil {
		bdu.SetIsbn(*s)
	}
	return bdu
}

// SetDetailHTML sets the "detail_html" field.
func (bdu *BookDetailUpdate) SetDetailHTML(s string) *BookDetailUpdate {
	bdu.mutation.SetDetailHTML(s)
	return bdu
}

// SetNillableDetailHTML sets the "detail_html" field if the given value is not nil.
func (bdu *BookDetailUpdate) SetNillableDetailHTML(s *string) *BookDetailUpdate {
	if s != nil {
		bdu.SetDetailHTML(*s)
	}
	return bdu
}

// ClearDetailHTML clears the value of the "detail_html" field.
func (bdu *BookDetailUpdate) ClearDetailHTML() *BookDetailUpdate {
	bdu.mutation.ClearDetailHTML()
	return bdu
}

// SetDetailImg sets the "detail_img" field.
func (bdu *BookDetailUpdate) SetDetailImg(s string) *BookDetailUpdate {
	bdu.mutation.SetDetailImg(s)
	return bdu
}

// SetNillableDetailImg sets the "detail_img" field if the given value is not nil.
func (bdu *BookDetailUpdate) SetNillableDetailImg(s *string) *BookDetailUpdate {
	if s != nil {
		bdu.SetDetailImg(*s)
	}
	return bdu
}

// ClearDetailImg clears the value of the "detail_img" field.
func (bdu *BookDetailUpdate) ClearDetailImg() *BookDetailUpdate {
	bdu.mutation.ClearDetailImg()
	return bdu
}

// SetBookID sets the "book_id" field.
func (bdu *BookDetailUpdate) SetBookID(i int) *BookDetailUpdate {
	bdu.mutation.ResetBookID()
	bdu.mutation.SetBookID(i)
	return bdu
}

// SetNillableBookID sets the "book_id" field if the given value is not nil.
func (bdu *BookDetailUpdate) SetNillableBookID(i *int) *BookDetailUpdate {
	if i != nil {
		bdu.SetBookID(*i)
	}
	return bdu
}

// AddBookID adds i to the "book_id" field.
func (bdu *BookDetailUpdate) AddBookID(i int) *BookDetailUpdate {
	bdu.mutation.AddBookID(i)
	return bdu
}

// ClearBookID clears the value of the "book_id" field.
func (bdu *BookDetailUpdate) ClearBookID() *BookDetailUpdate {
	bdu.mutation.ClearBookID()
	return bdu
}

// Mutation returns the BookDetailMutation object of the builder.
func (bdu *BookDetailUpdate) Mutation() *BookDetailMutation {
	return bdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bdu *BookDetailUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bdu.sqlSave, bdu.mutation, bdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bdu *BookDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := bdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bdu *BookDetailUpdate) Exec(ctx context.Context) error {
	_, err := bdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bdu *BookDetailUpdate) ExecX(ctx context.Context) {
	if err := bdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bdu *BookDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(bookdetail.Table, bookdetail.Columns, sqlgraph.NewFieldSpec(bookdetail.FieldID, field.TypeInt))
	if ps := bdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bdu.mutation.Isbn(); ok {
		_spec.SetField(bookdetail.FieldIsbn, field.TypeString, value)
	}
	if value, ok := bdu.mutation.DetailHTML(); ok {
		_spec.SetField(bookdetail.FieldDetailHTML, field.TypeString, value)
	}
	if bdu.mutation.DetailHTMLCleared() {
		_spec.ClearField(bookdetail.FieldDetailHTML, field.TypeString)
	}
	if value, ok := bdu.mutation.DetailImg(); ok {
		_spec.SetField(bookdetail.FieldDetailImg, field.TypeString, value)
	}
	if bdu.mutation.DetailImgCleared() {
		_spec.ClearField(bookdetail.FieldDetailImg, field.TypeString)
	}
	if value, ok := bdu.mutation.BookID(); ok {
		_spec.SetField(bookdetail.FieldBookID, field.TypeInt, value)
	}
	if value, ok := bdu.mutation.AddedBookID(); ok {
		_spec.AddField(bookdetail.FieldBookID, field.TypeInt, value)
	}
	if bdu.mutation.BookIDCleared() {
		_spec.ClearField(bookdetail.FieldBookID, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bdu.mutation.done = true
	return n, nil
}

// BookDetailUpdateOne is the builder for updating a single BookDetail entity.
type BookDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookDetailMutation
}

// SetIsbn sets the "isbn" field.
func (bduo *BookDetailUpdateOne) SetIsbn(s string) *BookDetailUpdateOne {
	bduo.mutation.SetIsbn(s)
	return bduo
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (bduo *BookDetailUpdateOne) SetNillableIsbn(s *string) *BookDetailUpdateOne {
	if s != nil {
		bduo.SetIsbn(*s)
	}
	return bduo
}

// SetDetailHTML sets the "detail_html" field.
func (bduo *BookDetailUpdateOne) SetDetailHTML(s string) *BookDetailUpdateOne {
	bduo.mutation.SetDetailHTML(s)
	return bduo
}

// SetNillableDetailHTML sets the "detail_html" field if the given value is not nil.
func (bduo *BookDetailUpdateOne) SetNillableDetailHTML(s *string) *BookDetailUpdateOne {
	if s != nil {
		bduo.SetDetailHTML(*s)
	}
	return bduo
}

// ClearDetailHTML clears the value of the "detail_html" field.
func (bduo *BookDetailUpdateOne) ClearDetailHTML() *BookDetailUpdateOne {
	bduo.mutation.ClearDetailHTML()
	return bduo
}

// SetDetailImg sets the "detail_img" field.
func (bduo *BookDetailUpdateOne) SetDetailImg(s string) *BookDetailUpdateOne {
	bduo.mutation.SetDetailImg(s)
	return bduo
}

// SetNillableDetailImg sets the "detail_img" field if the given value is not nil.
func (bduo *BookDetailUpdateOne) SetNillableDetailImg(s *string) *BookDetailUpdateOne {
	if s != nil {
		bduo.SetDetailImg(*s)
	}
	return bduo
}

// ClearDetailImg clears the value of the "detail_img" field.
func (bduo *BookDetailUpdateOne) ClearDetailImg() *BookDetailUpdateOne {
	bduo.mutation.ClearDetailImg()
	return bduo
}

// SetBookID sets the "book_id" field.
func (bduo *BookDetailUpdateOne) SetBookID(i int) *BookDetailUpdateOne {
	bduo.mutation.ResetBookID()
	bduo.mutation.SetBookID(i)
	return bduo
}

// SetNillableBookID sets the "book_id" field if the given value is not nil.
func (bduo *BookDetailUpdateOne) SetNillableBookID(i *int) *BookDetailUpdateOne {
	if i != nil {
		bduo.SetBookID(*i)
	}
	return bduo
}

// AddBookID adds i to the "book_id" field.
func (bduo *BookDetailUpdateOne) AddBookID(i int) *BookDetailUpdateOne {
	bduo.mutation.AddBookID(i)
	return bduo
}

// ClearBookID clears the value of the "book_id" field.
func (bduo *BookDetailUpdateOne) ClearBookID() *BookDetailUpdateOne {
	bduo.mutation.ClearBookID()
	return bduo
}

// Mutation returns the BookDetailMutation object of the builder.
func (bduo *BookDetailUpdateOne) Mutation() *BookDetailMutation {
	return bduo.mutation
}

// Where appends a list predicates to the BookDetailUpdate builder.
func (bduo *BookDetailUpdateOne) Where(ps ...predicate.BookDetail) *BookDetailUpdateOne {
	bduo.mutation.Where(ps...)
	return bduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bduo *BookDetailUpdateOne) Select(field string, fields ...string) *BookDetailUpdateOne {
	bduo.fields = append([]string{field}, fields...)
	return bduo
}

// Save executes the query and returns the updated BookDetail entity.
func (bduo *BookDetailUpdateOne) Save(ctx context.Context) (*BookDetail, error) {
	return withHooks(ctx, bduo.sqlSave, bduo.mutation, bduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bduo *BookDetailUpdateOne) SaveX(ctx context.Context) *BookDetail {
	node, err := bduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bduo *BookDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := bduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bduo *BookDetailUpdateOne) ExecX(ctx context.Context) {
	if err := bduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bduo *BookDetailUpdateOne) sqlSave(ctx context.Context) (_node *BookDetail, err error) {
	_spec := sqlgraph.NewUpdateSpec(bookdetail.Table, bookdetail.Columns, sqlgraph.NewFieldSpec(bookdetail.FieldID, field.TypeInt))
	id, ok := bduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BookDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bookdetail.FieldID)
		for _, f := range fields {
			if !bookdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bookdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bduo.mutation.Isbn(); ok {
		_spec.SetField(bookdetail.FieldIsbn, field.TypeString, value)
	}
	if value, ok := bduo.mutation.DetailHTML(); ok {
		_spec.SetField(bookdetail.FieldDetailHTML, field.TypeString, value)
	}
	if bduo.mutation.DetailHTMLCleared() {
		_spec.ClearField(bookdetail.FieldDetailHTML, field.TypeString)
	}
	if value, ok := bduo.mutation.DetailImg(); ok {
		_spec.SetField(bookdetail.FieldDetailImg, field.TypeString, value)
	}
	if bduo.mutation.DetailImgCleared() {
		_spec.ClearField(bookdetail.FieldDetailImg, field.TypeString)
	}
	if value, ok := bduo.mutation.BookID(); ok {
		_spec.SetField(bookdetail.FieldBookID, field.TypeInt, value)
	}
	if value, ok := bduo.mutation.AddedBookID(); ok {
		_spec.AddField(bookdetail.FieldBookID, field.TypeInt, value)
	}
	if bduo.mutation.BookIDCleared() {
		_spec.ClearField(bookdetail.FieldBookID, field.TypeInt)
	}
	_node = &BookDetail{config: bduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bduo.mutation.done = true
	return _node, nil
}
