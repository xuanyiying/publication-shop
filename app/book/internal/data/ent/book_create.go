// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/book"
)

// BookCreate is the builder for creating a Book entity.
type BookCreate struct {
	config
	mutation *BookMutation
	hooks    []Hook
}

// SetIsbn sets the "isbn" field.
func (bc *BookCreate) SetIsbn(s string) *BookCreate {
	bc.mutation.SetIsbn(s)
	return bc
}

// SetTitle sets the "title" field.
func (bc *BookCreate) SetTitle(s string) *BookCreate {
	bc.mutation.SetTitle(s)
	return bc
}

// SetAuthor sets the "author" field.
func (bc *BookCreate) SetAuthor(s string) *BookCreate {
	bc.mutation.SetAuthor(s)
	return bc
}

// SetTranslator sets the "translator" field.
func (bc *BookCreate) SetTranslator(s string) *BookCreate {
	bc.mutation.SetTranslator(s)
	return bc
}

// SetNillableTranslator sets the "translator" field if the given value is not nil.
func (bc *BookCreate) SetNillableTranslator(s *string) *BookCreate {
	if s != nil {
		bc.SetTranslator(*s)
	}
	return bc
}

// SetPublisherID sets the "publisher_id" field.
func (bc *BookCreate) SetPublisherID(i int) *BookCreate {
	bc.mutation.SetPublisherID(i)
	return bc
}

// SetNillablePublisherID sets the "publisher_id" field if the given value is not nil.
func (bc *BookCreate) SetNillablePublisherID(i *int) *BookCreate {
	if i != nil {
		bc.SetPublisherID(*i)
	}
	return bc
}

// SetPublisher sets the "publisher" field.
func (bc *BookCreate) SetPublisher(s string) *BookCreate {
	bc.mutation.SetPublisher(s)
	return bc
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (bc *BookCreate) SetNillablePublisher(s *string) *BookCreate {
	if s != nil {
		bc.SetPublisher(*s)
	}
	return bc
}

// SetPublicationYear sets the "publication_year" field.
func (bc *BookCreate) SetPublicationYear(i int16) *BookCreate {
	bc.mutation.SetPublicationYear(i)
	return bc
}

// SetNillablePublicationYear sets the "publication_year" field if the given value is not nil.
func (bc *BookCreate) SetNillablePublicationYear(i *int16) *BookCreate {
	if i != nil {
		bc.SetPublicationYear(*i)
	}
	return bc
}

// SetPublicationDate sets the "publication_date" field.
func (bc *BookCreate) SetPublicationDate(t time.Time) *BookCreate {
	bc.mutation.SetPublicationDate(t)
	return bc
}

// SetEdition sets the "edition" field.
func (bc *BookCreate) SetEdition(i int8) *BookCreate {
	bc.mutation.SetEdition(i)
	return bc
}

// SetNillableEdition sets the "edition" field if the given value is not nil.
func (bc *BookCreate) SetNillableEdition(i *int8) *BookCreate {
	if i != nil {
		bc.SetEdition(*i)
	}
	return bc
}

// SetCategory sets the "category" field.
func (bc *BookCreate) SetCategory(s string) *BookCreate {
	bc.mutation.SetCategory(s)
	return bc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (bc *BookCreate) SetNillableCategory(s *string) *BookCreate {
	if s != nil {
		bc.SetCategory(*s)
	}
	return bc
}

// SetPrice sets the "price" field.
func (bc *BookCreate) SetPrice(f float64) *BookCreate {
	bc.mutation.SetPrice(f)
	return bc
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (bc *BookCreate) SetNillablePrice(f *float64) *BookCreate {
	if f != nil {
		bc.SetPrice(*f)
	}
	return bc
}

// SetStockQuantity sets the "stock_quantity" field.
func (bc *BookCreate) SetQuantity(i int32) *BookCreate {
	bc.mutation.SetStockQuantity(i)
	return bc
}

// SetNillableStockQuantity sets the "stock_quantity" field if the given value is not nil.
func (bc *BookCreate) SetNillableStockQuantity(i *int32) *BookCreate {
	if i != nil {
		bc.SetQuantity(*i)
	}
	return bc
}

// SetDescription sets the "description" field.
func (bc *BookCreate) SetDescription(s string) *BookCreate {
	bc.mutation.SetDescription(s)
	return bc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (bc *BookCreate) SetNillableDescription(s *string) *BookCreate {
	if s != nil {
		bc.SetDescription(*s)
	}
	return bc
}

// SetAddedOn sets the "added_on" field.
func (bc *BookCreate) SetAddedOn(t time.Time) *BookCreate {
	bc.mutation.SetAddedOn(t)
	return bc
}

// SetNillableAddedOn sets the "added_on" field if the given value is not nil.
func (bc *BookCreate) SetNillableAddedOn(t *time.Time) *BookCreate {
	if t != nil {
		bc.SetAddedOn(*t)
	}
	return bc
}

// SetCoverImage sets the "cover_image" field.
func (bc *BookCreate) SetCoverImage(s string) *BookCreate {
	bc.mutation.SetCoverImage(s)
	return bc
}

// SetNillableCoverImage sets the "cover_image" field if the given value is not nil.
func (bc *BookCreate) SetNillableCoverImage(s *string) *BookCreate {
	if s != nil {
		bc.SetCoverImage(*s)
	}
	return bc
}

// SetPageCount sets the "page_count" field.
func (bc *BookCreate) SetPageCount(i int) *BookCreate {
	bc.mutation.SetPageCount(i)
	return bc
}

// SetLanguageID sets the "language_id" field.
func (bc *BookCreate) SetLanguageID(i int) *BookCreate {
	bc.mutation.SetLanguageID(i)
	return bc
}

// SetLanguage sets the "language" field.
func (bc *BookCreate) SetLanguage(s string) *BookCreate {
	bc.mutation.SetLanguage(s)
	return bc
}

// SetAuthorID sets the "author_id" field.
func (bc *BookCreate) SetAuthorID(i int) *BookCreate {
	bc.mutation.SetAuthorID(i)
	return bc
}

// SetCategoryID sets the "category_id" field.
func (bc *BookCreate) SetCategoryID(i int) *BookCreate {
	bc.mutation.SetCategoryID(i)
	return bc
}

// SetID sets the "id" field.
func (bc *BookCreate) SetID(i int64) *BookCreate {
	bc.mutation.SetID(i)
	return bc
}

// Mutation returns the BookMutation object of the builder.
func (bc *BookCreate) Mutation() *BookMutation {
	return bc.mutation
}

// Save creates the Book in the database.
func (bc *BookCreate) Save(ctx context.Context) (*Book, error) {
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BookCreate) SaveX(ctx context.Context) *Book {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BookCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BookCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BookCreate) check() error {
	if _, ok := bc.mutation.Isbn(); !ok {
		return &ValidationError{Name: "isbn", err: errors.New(`ent: missing required field "Book.isbn"`)}
	}
	if _, ok := bc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Book.title"`)}
	}
	if _, ok := bc.mutation.Author(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required field "Book.author"`)}
	}
	if _, ok := bc.mutation.PublicationDate(); !ok {
		return &ValidationError{Name: "publication_date", err: errors.New(`ent: missing required field "Book.publication_date"`)}
	}
	if _, ok := bc.mutation.PageCount(); !ok {
		return &ValidationError{Name: "page_count", err: errors.New(`ent: missing required field "Book.page_count"`)}
	}
	if _, ok := bc.mutation.LanguageID(); !ok {
		return &ValidationError{Name: "language_id", err: errors.New(`ent: missing required field "Book.language_id"`)}
	}
	if _, ok := bc.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New(`ent: missing required field "Book.language"`)}
	}
	if _, ok := bc.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author_id", err: errors.New(`ent: missing required field "Book.author_id"`)}
	}
	if _, ok := bc.mutation.CategoryID(); !ok {
		return &ValidationError{Name: "category_id", err: errors.New(`ent: missing required field "Book.category_id"`)}
	}
	return nil
}

func (bc *BookCreate) sqlSave(ctx context.Context) (*Book, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = id
	}
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BookCreate) createSpec() (*Book, *sqlgraph.CreateSpec) {
	var (
		_node = &Book{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(book.Table, sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt))
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = int64(id)
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.Isbn(); ok {
		_spec.SetField(book.FieldIsbn, field.TypeString, value)
		_node.Isbn = value
	}
	if value, ok := bc.mutation.Title(); ok {
		_spec.SetField(book.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := bc.mutation.Author(); ok {
		_spec.SetField(book.FieldAuthor, field.TypeString, value)
		_node.Author = value
	}
	if value, ok := bc.mutation.Translator(); ok {
		_spec.SetField(book.FieldTranslator, field.TypeString, value)
		_node.Translator = value
	}
	if value, ok := bc.mutation.PublisherID(); ok {
		_spec.SetField(book.FieldPublisherID, field.TypeInt, value)
		_node.PublisherID = value
	}
	if value, ok := bc.mutation.Publisher(); ok {
		_spec.SetField(book.FieldPublisher, field.TypeString, value)
		_node.Publisher = value
	}
	if value, ok := bc.mutation.PublicationYear(); ok {
		_spec.SetField(book.FieldPublicationYear, field.TypeInt16, value)
		_node.PublicationYear = value
	}
	if value, ok := bc.mutation.PublicationDate(); ok {
		_spec.SetField(book.FieldPublicationDate, field.TypeTime, value)
		_node.PublicationDate = value
	}
	if value, ok := bc.mutation.Edition(); ok {
		_spec.SetField(book.FieldEdition, field.TypeInt8, value)
		_node.Edition = value
	}
	if value, ok := bc.mutation.Category(); ok {
		_spec.SetField(book.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := bc.mutation.Price(); ok {
		_spec.SetField(book.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := bc.mutation.StockQuantity(); ok {
		_spec.SetField(book.FieldStockQuantity, field.TypeInt32, value)
		_node.Quantity = value
	}
	if value, ok := bc.mutation.Description(); ok {
		_spec.SetField(book.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := bc.mutation.AddedOn(); ok {
		_spec.SetField(book.FieldAddedOn, field.TypeTime, value)
		_node.AddedOn = value
	}
	if value, ok := bc.mutation.CoverImage(); ok {
		_spec.SetField(book.FieldCoverImage, field.TypeString, value)
		_node.CoverImage = value
	}
	if value, ok := bc.mutation.PageCount(); ok {
		_spec.SetField(book.FieldPageCount, field.TypeInt32, value)
		_node.PageCount = value
	}
	if value, ok := bc.mutation.LanguageID(); ok {
		_spec.SetField(book.FieldLanguageID, field.TypeInt, value)
		_node.LanguageID = value
	}
	if value, ok := bc.mutation.Language(); ok {
		_spec.SetField(book.FieldLanguage, field.TypeString, value)
		_node.Language = value
	}
	if value, ok := bc.mutation.AuthorID(); ok {
		_spec.SetField(book.FieldAuthorID, field.TypeInt, value)
		_node.AuthorID = value
	}
	if value, ok := bc.mutation.CategoryID(); ok {
		_spec.SetField(book.FieldCategoryID, field.TypeInt, value)
		_node.CategoryID = value
	}
	return _node, _spec
}

// BookCreateBulk is the builder for creating many Book entities in bulk.
type BookCreateBulk struct {
	config
	err      error
	builders []*BookCreate
}

// Save creates the Book entities in the database.
func (bcb *BookCreateBulk) Save(ctx context.Context) ([]*Book, error) {
	if bcb.err != nil {
		return nil, bcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Book, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BookMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BookCreateBulk) SaveX(ctx context.Context) []*Book {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BookCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BookCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
