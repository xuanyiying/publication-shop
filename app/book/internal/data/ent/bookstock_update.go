// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/bookstock"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/predicate"
)

// BookStockUpdate is the builder for updating BookStock entities.
type BookStockUpdate struct {
	config
	hooks    []Hook
	mutation *BookStockMutation
}

// Where appends a list predicates to the BookStockUpdate builder.
func (bsu *BookStockUpdate) Where(ps ...predicate.BookStock) *BookStockUpdate {
	bsu.mutation.Where(ps...)
	return bsu
}

// SetIsbn sets the "isbn" field.
func (bsu *BookStockUpdate) SetIsbn(s string) *BookStockUpdate {
	bsu.mutation.SetIsbn(s)
	return bsu
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (bsu *BookStockUpdate) SetNillableIsbn(s *string) *BookStockUpdate {
	if s != nil {
		bsu.SetIsbn(*s)
	}
	return bsu
}

// SetQuantity sets the "quantity" field.
func (bsu *BookStockUpdate) SetQuantity(i int) *BookStockUpdate {
	bsu.mutation.ResetQuantity()
	bsu.mutation.SetQuantity(i)
	return bsu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (bsu *BookStockUpdate) SetNillableQuantity(i *int) *BookStockUpdate {
	if i != nil {
		bsu.SetQuantity(*i)
	}
	return bsu
}

// AddQuantity adds i to the "quantity" field.
func (bsu *BookStockUpdate) AddQuantity(i int) *BookStockUpdate {
	bsu.mutation.AddQuantity(i)
	return bsu
}

// ClearQuantity clears the value of the "quantity" field.
func (bsu *BookStockUpdate) ClearQuantity() *BookStockUpdate {
	bsu.mutation.ClearQuantity()
	return bsu
}

// SetBookID sets the "book_id" field.
func (bsu *BookStockUpdate) SetBookID(i int) *BookStockUpdate {
	bsu.mutation.ResetBookID()
	bsu.mutation.SetBookID(i)
	return bsu
}

// SetNillableBookID sets the "book_id" field if the given value is not nil.
func (bsu *BookStockUpdate) SetNillableBookID(i *int) *BookStockUpdate {
	if i != nil {
		bsu.SetBookID(*i)
	}
	return bsu
}

// AddBookID adds i to the "book_id" field.
func (bsu *BookStockUpdate) AddBookID(i int) *BookStockUpdate {
	bsu.mutation.AddBookID(i)
	return bsu
}

// ClearBookID clears the value of the "book_id" field.
func (bsu *BookStockUpdate) ClearBookID() *BookStockUpdate {
	bsu.mutation.ClearBookID()
	return bsu
}

// Mutation returns the BookStockMutation object of the builder.
func (bsu *BookStockUpdate) Mutation() *BookStockMutation {
	return bsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bsu *BookStockUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bsu.sqlSave, bsu.mutation, bsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bsu *BookStockUpdate) SaveX(ctx context.Context) int {
	affected, err := bsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bsu *BookStockUpdate) Exec(ctx context.Context) error {
	_, err := bsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsu *BookStockUpdate) ExecX(ctx context.Context) {
	if err := bsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bsu *BookStockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(bookstock.Table, bookstock.Columns, sqlgraph.NewFieldSpec(bookstock.FieldID, field.TypeInt))
	if ps := bsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsu.mutation.Isbn(); ok {
		_spec.SetField(bookstock.FieldIsbn, field.TypeString, value)
	}
	if value, ok := bsu.mutation.Quantity(); ok {
		_spec.SetField(bookstock.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.AddedQuantity(); ok {
		_spec.AddField(bookstock.FieldQuantity, field.TypeInt, value)
	}
	if bsu.mutation.QuantityCleared() {
		_spec.ClearField(bookstock.FieldQuantity, field.TypeInt)
	}
	if value, ok := bsu.mutation.BookID(); ok {
		_spec.SetField(bookstock.FieldBookID, field.TypeInt, value)
	}
	if value, ok := bsu.mutation.AddedBookID(); ok {
		_spec.AddField(bookstock.FieldBookID, field.TypeInt, value)
	}
	if bsu.mutation.BookIDCleared() {
		_spec.ClearField(bookstock.FieldBookID, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookstock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bsu.mutation.done = true
	return n, nil
}

// BookStockUpdateOne is the builder for updating a single BookStock entity.
type BookStockUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookStockMutation
}

// SetIsbn sets the "isbn" field.
func (bsuo *BookStockUpdateOne) SetIsbn(s string) *BookStockUpdateOne {
	bsuo.mutation.SetIsbn(s)
	return bsuo
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (bsuo *BookStockUpdateOne) SetNillableIsbn(s *string) *BookStockUpdateOne {
	if s != nil {
		bsuo.SetIsbn(*s)
	}
	return bsuo
}

// SetQuantity sets the "quantity" field.
func (bsuo *BookStockUpdateOne) SetQuantity(i int) *BookStockUpdateOne {
	bsuo.mutation.ResetQuantity()
	bsuo.mutation.SetQuantity(i)
	return bsuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (bsuo *BookStockUpdateOne) SetNillableQuantity(i *int) *BookStockUpdateOne {
	if i != nil {
		bsuo.SetQuantity(*i)
	}
	return bsuo
}

// AddQuantity adds i to the "quantity" field.
func (bsuo *BookStockUpdateOne) AddQuantity(i int) *BookStockUpdateOne {
	bsuo.mutation.AddQuantity(i)
	return bsuo
}

// ClearQuantity clears the value of the "quantity" field.
func (bsuo *BookStockUpdateOne) ClearQuantity() *BookStockUpdateOne {
	bsuo.mutation.ClearQuantity()
	return bsuo
}

// SetBookID sets the "book_id" field.
func (bsuo *BookStockUpdateOne) SetBookID(i int) *BookStockUpdateOne {
	bsuo.mutation.ResetBookID()
	bsuo.mutation.SetBookID(i)
	return bsuo
}

// SetNillableBookID sets the "book_id" field if the given value is not nil.
func (bsuo *BookStockUpdateOne) SetNillableBookID(i *int) *BookStockUpdateOne {
	if i != nil {
		bsuo.SetBookID(*i)
	}
	return bsuo
}

// AddBookID adds i to the "book_id" field.
func (bsuo *BookStockUpdateOne) AddBookID(i int) *BookStockUpdateOne {
	bsuo.mutation.AddBookID(i)
	return bsuo
}

// ClearBookID clears the value of the "book_id" field.
func (bsuo *BookStockUpdateOne) ClearBookID() *BookStockUpdateOne {
	bsuo.mutation.ClearBookID()
	return bsuo
}

// Mutation returns the BookStockMutation object of the builder.
func (bsuo *BookStockUpdateOne) Mutation() *BookStockMutation {
	return bsuo.mutation
}

// Where appends a list predicates to the BookStockUpdate builder.
func (bsuo *BookStockUpdateOne) Where(ps ...predicate.BookStock) *BookStockUpdateOne {
	bsuo.mutation.Where(ps...)
	return bsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bsuo *BookStockUpdateOne) Select(field string, fields ...string) *BookStockUpdateOne {
	bsuo.fields = append([]string{field}, fields...)
	return bsuo
}

// Save executes the query and returns the updated BookStock entity.
func (bsuo *BookStockUpdateOne) Save(ctx context.Context) (*BookStock, error) {
	return withHooks(ctx, bsuo.sqlSave, bsuo.mutation, bsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bsuo *BookStockUpdateOne) SaveX(ctx context.Context) *BookStock {
	node, err := bsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bsuo *BookStockUpdateOne) Exec(ctx context.Context) error {
	_, err := bsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bsuo *BookStockUpdateOne) ExecX(ctx context.Context) {
	if err := bsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bsuo *BookStockUpdateOne) sqlSave(ctx context.Context) (_node *BookStock, err error) {
	_spec := sqlgraph.NewUpdateSpec(bookstock.Table, bookstock.Columns, sqlgraph.NewFieldSpec(bookstock.FieldID, field.TypeInt))
	id, ok := bsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BookStock.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bookstock.FieldID)
		for _, f := range fields {
			if !bookstock.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bookstock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bsuo.mutation.Isbn(); ok {
		_spec.SetField(bookstock.FieldIsbn, field.TypeString, value)
	}
	if value, ok := bsuo.mutation.Quantity(); ok {
		_spec.SetField(bookstock.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.AddedQuantity(); ok {
		_spec.AddField(bookstock.FieldQuantity, field.TypeInt, value)
	}
	if bsuo.mutation.QuantityCleared() {
		_spec.ClearField(bookstock.FieldQuantity, field.TypeInt)
	}
	if value, ok := bsuo.mutation.BookID(); ok {
		_spec.SetField(bookstock.FieldBookID, field.TypeInt, value)
	}
	if value, ok := bsuo.mutation.AddedBookID(); ok {
		_spec.AddField(bookstock.FieldBookID, field.TypeInt, value)
	}
	if bsuo.mutation.BookIDCleared() {
		_spec.ClearField(bookstock.FieldBookID, field.TypeInt)
	}
	_node = &BookStock{config: bsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookstock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bsuo.mutation.done = true
	return _node, nil
}
