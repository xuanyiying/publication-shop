// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/bookxlanguage"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/predicate"
)

// BookXLanguageUpdate is the builder for updating BookXLanguage entities.
type BookXLanguageUpdate struct {
	config
	hooks    []Hook
	mutation *BookXLanguageMutation
}

// Where appends a list predicates to the BookXLanguageUpdate builder.
func (bxu *BookXLanguageUpdate) Where(ps ...predicate.BookXLanguage) *BookXLanguageUpdate {
	bxu.mutation.Where(ps...)
	return bxu
}

// SetLanguageID sets the "language_id" field.
func (bxu *BookXLanguageUpdate) SetLanguageID(i int) *BookXLanguageUpdate {
	bxu.mutation.ResetLanguageID()
	bxu.mutation.SetLanguageID(i)
	return bxu
}

// SetNillableLanguageID sets the "language_id" field if the given value is not nil.
func (bxu *BookXLanguageUpdate) SetNillableLanguageID(i *int) *BookXLanguageUpdate {
	if i != nil {
		bxu.SetLanguageID(*i)
	}
	return bxu
}

// AddLanguageID adds i to the "language_id" field.
func (bxu *BookXLanguageUpdate) AddLanguageID(i int) *BookXLanguageUpdate {
	bxu.mutation.AddLanguageID(i)
	return bxu
}

// SetIsbn sets the "isbn" field.
func (bxu *BookXLanguageUpdate) SetIsbn(s string) *BookXLanguageUpdate {
	bxu.mutation.SetIsbn(s)
	return bxu
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (bxu *BookXLanguageUpdate) SetNillableIsbn(s *string) *BookXLanguageUpdate {
	if s != nil {
		bxu.SetIsbn(*s)
	}
	return bxu
}

// SetLanguageName sets the "language_name" field.
func (bxu *BookXLanguageUpdate) SetLanguageName(s string) *BookXLanguageUpdate {
	bxu.mutation.SetLanguageName(s)
	return bxu
}

// SetNillableLanguageName sets the "language_name" field if the given value is not nil.
func (bxu *BookXLanguageUpdate) SetNillableLanguageName(s *string) *BookXLanguageUpdate {
	if s != nil {
		bxu.SetLanguageName(*s)
	}
	return bxu
}

// ClearLanguageName clears the value of the "language_name" field.
func (bxu *BookXLanguageUpdate) ClearLanguageName() *BookXLanguageUpdate {
	bxu.mutation.ClearLanguageName()
	return bxu
}

// SetBookID sets the "book_id" field.
func (bxu *BookXLanguageUpdate) SetBookID(i int) *BookXLanguageUpdate {
	bxu.mutation.ResetBookID()
	bxu.mutation.SetBookID(i)
	return bxu
}

// SetNillableBookID sets the "book_id" field if the given value is not nil.
func (bxu *BookXLanguageUpdate) SetNillableBookID(i *int) *BookXLanguageUpdate {
	if i != nil {
		bxu.SetBookID(*i)
	}
	return bxu
}

// AddBookID adds i to the "book_id" field.
func (bxu *BookXLanguageUpdate) AddBookID(i int) *BookXLanguageUpdate {
	bxu.mutation.AddBookID(i)
	return bxu
}

// ClearBookID clears the value of the "book_id" field.
func (bxu *BookXLanguageUpdate) ClearBookID() *BookXLanguageUpdate {
	bxu.mutation.ClearBookID()
	return bxu
}

// Mutation returns the BookXLanguageMutation object of the builder.
func (bxu *BookXLanguageUpdate) Mutation() *BookXLanguageMutation {
	return bxu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bxu *BookXLanguageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bxu.sqlSave, bxu.mutation, bxu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bxu *BookXLanguageUpdate) SaveX(ctx context.Context) int {
	affected, err := bxu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bxu *BookXLanguageUpdate) Exec(ctx context.Context) error {
	_, err := bxu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bxu *BookXLanguageUpdate) ExecX(ctx context.Context) {
	if err := bxu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bxu *BookXLanguageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(bookxlanguage.Table, bookxlanguage.Columns, sqlgraph.NewFieldSpec(bookxlanguage.FieldID, field.TypeInt))
	if ps := bxu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bxu.mutation.LanguageID(); ok {
		_spec.SetField(bookxlanguage.FieldLanguageID, field.TypeInt, value)
	}
	if value, ok := bxu.mutation.AddedLanguageID(); ok {
		_spec.AddField(bookxlanguage.FieldLanguageID, field.TypeInt, value)
	}
	if value, ok := bxu.mutation.Isbn(); ok {
		_spec.SetField(bookxlanguage.FieldIsbn, field.TypeString, value)
	}
	if value, ok := bxu.mutation.LanguageName(); ok {
		_spec.SetField(bookxlanguage.FieldLanguageName, field.TypeString, value)
	}
	if bxu.mutation.LanguageNameCleared() {
		_spec.ClearField(bookxlanguage.FieldLanguageName, field.TypeString)
	}
	if value, ok := bxu.mutation.BookID(); ok {
		_spec.SetField(bookxlanguage.FieldBookID, field.TypeInt, value)
	}
	if value, ok := bxu.mutation.AddedBookID(); ok {
		_spec.AddField(bookxlanguage.FieldBookID, field.TypeInt, value)
	}
	if bxu.mutation.BookIDCleared() {
		_spec.ClearField(bookxlanguage.FieldBookID, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bxu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookxlanguage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bxu.mutation.done = true
	return n, nil
}

// BookXLanguageUpdateOne is the builder for updating a single BookXLanguage entity.
type BookXLanguageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookXLanguageMutation
}

// SetLanguageID sets the "language_id" field.
func (bxuo *BookXLanguageUpdateOne) SetLanguageID(i int) *BookXLanguageUpdateOne {
	bxuo.mutation.ResetLanguageID()
	bxuo.mutation.SetLanguageID(i)
	return bxuo
}

// SetNillableLanguageID sets the "language_id" field if the given value is not nil.
func (bxuo *BookXLanguageUpdateOne) SetNillableLanguageID(i *int) *BookXLanguageUpdateOne {
	if i != nil {
		bxuo.SetLanguageID(*i)
	}
	return bxuo
}

// AddLanguageID adds i to the "language_id" field.
func (bxuo *BookXLanguageUpdateOne) AddLanguageID(i int) *BookXLanguageUpdateOne {
	bxuo.mutation.AddLanguageID(i)
	return bxuo
}

// SetIsbn sets the "isbn" field.
func (bxuo *BookXLanguageUpdateOne) SetIsbn(s string) *BookXLanguageUpdateOne {
	bxuo.mutation.SetIsbn(s)
	return bxuo
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (bxuo *BookXLanguageUpdateOne) SetNillableIsbn(s *string) *BookXLanguageUpdateOne {
	if s != nil {
		bxuo.SetIsbn(*s)
	}
	return bxuo
}

// SetLanguageName sets the "language_name" field.
func (bxuo *BookXLanguageUpdateOne) SetLanguageName(s string) *BookXLanguageUpdateOne {
	bxuo.mutation.SetLanguageName(s)
	return bxuo
}

// SetNillableLanguageName sets the "language_name" field if the given value is not nil.
func (bxuo *BookXLanguageUpdateOne) SetNillableLanguageName(s *string) *BookXLanguageUpdateOne {
	if s != nil {
		bxuo.SetLanguageName(*s)
	}
	return bxuo
}

// ClearLanguageName clears the value of the "language_name" field.
func (bxuo *BookXLanguageUpdateOne) ClearLanguageName() *BookXLanguageUpdateOne {
	bxuo.mutation.ClearLanguageName()
	return bxuo
}

// SetBookID sets the "book_id" field.
func (bxuo *BookXLanguageUpdateOne) SetBookID(i int) *BookXLanguageUpdateOne {
	bxuo.mutation.ResetBookID()
	bxuo.mutation.SetBookID(i)
	return bxuo
}

// SetNillableBookID sets the "book_id" field if the given value is not nil.
func (bxuo *BookXLanguageUpdateOne) SetNillableBookID(i *int) *BookXLanguageUpdateOne {
	if i != nil {
		bxuo.SetBookID(*i)
	}
	return bxuo
}

// AddBookID adds i to the "book_id" field.
func (bxuo *BookXLanguageUpdateOne) AddBookID(i int) *BookXLanguageUpdateOne {
	bxuo.mutation.AddBookID(i)
	return bxuo
}

// ClearBookID clears the value of the "book_id" field.
func (bxuo *BookXLanguageUpdateOne) ClearBookID() *BookXLanguageUpdateOne {
	bxuo.mutation.ClearBookID()
	return bxuo
}

// Mutation returns the BookXLanguageMutation object of the builder.
func (bxuo *BookXLanguageUpdateOne) Mutation() *BookXLanguageMutation {
	return bxuo.mutation
}

// Where appends a list predicates to the BookXLanguageUpdate builder.
func (bxuo *BookXLanguageUpdateOne) Where(ps ...predicate.BookXLanguage) *BookXLanguageUpdateOne {
	bxuo.mutation.Where(ps...)
	return bxuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bxuo *BookXLanguageUpdateOne) Select(field string, fields ...string) *BookXLanguageUpdateOne {
	bxuo.fields = append([]string{field}, fields...)
	return bxuo
}

// Save executes the query and returns the updated BookXLanguage entity.
func (bxuo *BookXLanguageUpdateOne) Save(ctx context.Context) (*BookXLanguage, error) {
	return withHooks(ctx, bxuo.sqlSave, bxuo.mutation, bxuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bxuo *BookXLanguageUpdateOne) SaveX(ctx context.Context) *BookXLanguage {
	node, err := bxuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bxuo *BookXLanguageUpdateOne) Exec(ctx context.Context) error {
	_, err := bxuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bxuo *BookXLanguageUpdateOne) ExecX(ctx context.Context) {
	if err := bxuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bxuo *BookXLanguageUpdateOne) sqlSave(ctx context.Context) (_node *BookXLanguage, err error) {
	_spec := sqlgraph.NewUpdateSpec(bookxlanguage.Table, bookxlanguage.Columns, sqlgraph.NewFieldSpec(bookxlanguage.FieldID, field.TypeInt))
	id, ok := bxuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BookXLanguage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bxuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, bookxlanguage.FieldID)
		for _, f := range fields {
			if !bookxlanguage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != bookxlanguage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bxuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bxuo.mutation.LanguageID(); ok {
		_spec.SetField(bookxlanguage.FieldLanguageID, field.TypeInt, value)
	}
	if value, ok := bxuo.mutation.AddedLanguageID(); ok {
		_spec.AddField(bookxlanguage.FieldLanguageID, field.TypeInt, value)
	}
	if value, ok := bxuo.mutation.Isbn(); ok {
		_spec.SetField(bookxlanguage.FieldIsbn, field.TypeString, value)
	}
	if value, ok := bxuo.mutation.LanguageName(); ok {
		_spec.SetField(bookxlanguage.FieldLanguageName, field.TypeString, value)
	}
	if bxuo.mutation.LanguageNameCleared() {
		_spec.ClearField(bookxlanguage.FieldLanguageName, field.TypeString)
	}
	if value, ok := bxuo.mutation.BookID(); ok {
		_spec.SetField(bookxlanguage.FieldBookID, field.TypeInt, value)
	}
	if value, ok := bxuo.mutation.AddedBookID(); ok {
		_spec.AddField(bookxlanguage.FieldBookID, field.TypeInt, value)
	}
	if bxuo.mutation.BookIDCleared() {
		_spec.ClearField(bookxlanguage.FieldBookID, field.TypeInt)
	}
	_node = &BookXLanguage{config: bxuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bxuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookxlanguage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bxuo.mutation.done = true
	return _node, nil
}
