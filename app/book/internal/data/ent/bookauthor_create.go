// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/bookauthor"
)

// BookAuthorCreate is the builder for creating a BookAuthor entity.
type BookAuthorCreate struct {
	config
	mutation *BookAuthorMutation
	hooks    []Hook
}

// SetAuthorID sets the "author_id" field.
func (bac *BookAuthorCreate) SetAuthorID(i int) *BookAuthorCreate {
	bac.mutation.SetAuthorID(i)
	return bac
}

// SetIsbn sets the "isbn" field.
func (bac *BookAuthorCreate) SetIsbn(s string) *BookAuthorCreate {
	bac.mutation.SetIsbn(s)
	return bac
}

// SetBookID sets the "book_id" field.
func (bac *BookAuthorCreate) SetBookID(i int) *BookAuthorCreate {
	bac.mutation.SetBookID(i)
	return bac
}

// SetNillableBookID sets the "book_id" field if the given value is not nil.
func (bac *BookAuthorCreate) SetNillableBookID(i *int) *BookAuthorCreate {
	if i != nil {
		bac.SetBookID(*i)
	}
	return bac
}

// SetAuthor sets the "author" field.
func (bac *BookAuthorCreate) SetAuthor(s string) *BookAuthorCreate {
	bac.mutation.SetAuthor(s)
	return bac
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (bac *BookAuthorCreate) SetNillableAuthor(s *string) *BookAuthorCreate {
	if s != nil {
		bac.SetAuthor(*s)
	}
	return bac
}

// SetAuthorAbout sets the "author_about" field.
func (bac *BookAuthorCreate) SetAuthorAbout(s string) *BookAuthorCreate {
	bac.mutation.SetAuthorAbout(s)
	return bac
}

// SetNillableAuthorAbout sets the "author_about" field if the given value is not nil.
func (bac *BookAuthorCreate) SetNillableAuthorAbout(s *string) *BookAuthorCreate {
	if s != nil {
		bac.SetAuthorAbout(*s)
	}
	return bac
}

// SetID sets the "id" field.
func (bac *BookAuthorCreate) SetID(i int) *BookAuthorCreate {
	bac.mutation.SetID(i)
	return bac
}

// Mutation returns the BookAuthorMutation object of the builder.
func (bac *BookAuthorCreate) Mutation() *BookAuthorMutation {
	return bac.mutation
}

// Save creates the BookAuthor in the database.
func (bac *BookAuthorCreate) Save(ctx context.Context) (*BookAuthor, error) {
	return withHooks(ctx, bac.sqlSave, bac.mutation, bac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bac *BookAuthorCreate) SaveX(ctx context.Context) *BookAuthor {
	v, err := bac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bac *BookAuthorCreate) Exec(ctx context.Context) error {
	_, err := bac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bac *BookAuthorCreate) ExecX(ctx context.Context) {
	if err := bac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bac *BookAuthorCreate) check() error {
	if _, ok := bac.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author_id", err: errors.New(`ent: missing required field "BookAuthor.author_id"`)}
	}
	if _, ok := bac.mutation.Isbn(); !ok {
		return &ValidationError{Name: "isbn", err: errors.New(`ent: missing required field "BookAuthor.isbn"`)}
	}
	return nil
}

func (bac *BookAuthorCreate) sqlSave(ctx context.Context) (*BookAuthor, error) {
	if err := bac.check(); err != nil {
		return nil, err
	}
	_node, _spec := bac.createSpec()
	if err := sqlgraph.CreateNode(ctx, bac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	bac.mutation.id = &_node.ID
	bac.mutation.done = true
	return _node, nil
}

func (bac *BookAuthorCreate) createSpec() (*BookAuthor, *sqlgraph.CreateSpec) {
	var (
		_node = &BookAuthor{config: bac.config}
		_spec = sqlgraph.NewCreateSpec(bookauthor.Table, sqlgraph.NewFieldSpec(bookauthor.FieldID, field.TypeInt))
	)
	if id, ok := bac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bac.mutation.AuthorID(); ok {
		_spec.SetField(bookauthor.FieldAuthorID, field.TypeInt, value)
		_node.AuthorID = value
	}
	if value, ok := bac.mutation.Isbn(); ok {
		_spec.SetField(bookauthor.FieldIsbn, field.TypeString, value)
		_node.Isbn = value
	}
	if value, ok := bac.mutation.BookID(); ok {
		_spec.SetField(bookauthor.FieldBookID, field.TypeInt, value)
		_node.BookID = value
	}
	if value, ok := bac.mutation.Author(); ok {
		_spec.SetField(bookauthor.FieldAuthor, field.TypeString, value)
		_node.Author = value
	}
	if value, ok := bac.mutation.AuthorAbout(); ok {
		_spec.SetField(bookauthor.FieldAuthorAbout, field.TypeString, value)
		_node.AuthorAbout = value
	}
	return _node, _spec
}

// BookAuthorCreateBulk is the builder for creating many BookAuthor entities in bulk.
type BookAuthorCreateBulk struct {
	config
	err      error
	builders []*BookAuthorCreate
}

// Save creates the BookAuthor entities in the database.
func (bacb *BookAuthorCreateBulk) Save(ctx context.Context) ([]*BookAuthor, error) {
	if bacb.err != nil {
		return nil, bacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bacb.builders))
	nodes := make([]*BookAuthor, len(bacb.builders))
	mutators := make([]Mutator, len(bacb.builders))
	for i := range bacb.builders {
		func(i int, root context.Context) {
			builder := bacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BookAuthorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bacb *BookAuthorCreateBulk) SaveX(ctx context.Context) []*BookAuthor {
	v, err := bacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bacb *BookAuthorCreateBulk) Exec(ctx context.Context) error {
	_, err := bacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bacb *BookAuthorCreateBulk) ExecX(ctx context.Context) {
	if err := bacb.Exec(ctx); err != nil {
		panic(err)
	}
}
