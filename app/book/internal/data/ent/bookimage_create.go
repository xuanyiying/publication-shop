// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/bookimage"
)

// BookImageCreate is the builder for creating a BookImage entity.
type BookImageCreate struct {
	config
	mutation *BookImageMutation
	hooks    []Hook
}

// SetImgURL sets the "img_url" field.
func (bic *BookImageCreate) SetImgURL(s string) *BookImageCreate {
	bic.mutation.SetImgURL(s)
	return bic
}

// SetNillableImgURL sets the "img_url" field if the given value is not nil.
func (bic *BookImageCreate) SetNillableImgURL(s *string) *BookImageCreate {
	if s != nil {
		bic.SetImgURL(*s)
	}
	return bic
}

// SetIsbn sets the "isbn" field.
func (bic *BookImageCreate) SetIsbn(i int) *BookImageCreate {
	bic.mutation.SetIsbn(i)
	return bic
}

// SetImgEncode sets the "img_encode" field.
func (bic *BookImageCreate) SetImgEncode(s string) *BookImageCreate {
	bic.mutation.SetImgEncode(s)
	return bic
}

// SetNillableImgEncode sets the "img_encode" field if the given value is not nil.
func (bic *BookImageCreate) SetNillableImgEncode(s *string) *BookImageCreate {
	if s != nil {
		bic.SetImgEncode(*s)
	}
	return bic
}

// SetBookID sets the "book_id" field.
func (bic *BookImageCreate) SetBookID(i int) *BookImageCreate {
	bic.mutation.SetBookID(i)
	return bic
}

// SetNillableBookID sets the "book_id" field if the given value is not nil.
func (bic *BookImageCreate) SetNillableBookID(i *int) *BookImageCreate {
	if i != nil {
		bic.SetBookID(*i)
	}
	return bic
}

// SetMainFlag sets the "mainFlag" field.
func (bic *BookImageCreate) SetMainFlag(i int32) *BookImageCreate {
	bic.mutation.SetMainFlag(i)
	return bic
}

// SetNillableMainFlag sets the "mainFlag" field if the given value is not nil.
func (bic *BookImageCreate) SetNillableMainFlag(i *int32) *BookImageCreate {
	if i != nil {
		bic.SetMainFlag(*i)
	}
	return bic
}

// SetID sets the "id" field.
func (bic *BookImageCreate) SetID(i int) *BookImageCreate {
	bic.mutation.SetID(i)
	return bic
}

// Mutation returns the BookImageMutation object of the builder.
func (bic *BookImageCreate) Mutation() *BookImageMutation {
	return bic.mutation
}

// Save creates the BookImage in the database.
func (bic *BookImageCreate) Save(ctx context.Context) (*BookImage, error) {
	return withHooks(ctx, bic.sqlSave, bic.mutation, bic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bic *BookImageCreate) SaveX(ctx context.Context) *BookImage {
	v, err := bic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bic *BookImageCreate) Exec(ctx context.Context) error {
	_, err := bic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bic *BookImageCreate) ExecX(ctx context.Context) {
	if err := bic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bic *BookImageCreate) check() error {
	if _, ok := bic.mutation.Isbn(); !ok {
		return &ValidationError{Name: "isbn", err: errors.New(`ent: missing required field "BookImage.isbn"`)}
	}
	return nil
}

func (bic *BookImageCreate) sqlSave(ctx context.Context) (*BookImage, error) {
	if err := bic.check(); err != nil {
		return nil, err
	}
	_node, _spec := bic.createSpec()
	if err := sqlgraph.CreateNode(ctx, bic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	bic.mutation.id = &_node.ID
	bic.mutation.done = true
	return _node, nil
}

func (bic *BookImageCreate) createSpec() (*BookImage, *sqlgraph.CreateSpec) {
	var (
		_node = &BookImage{config: bic.config}
		_spec = sqlgraph.NewCreateSpec(bookimage.Table, sqlgraph.NewFieldSpec(bookimage.FieldID, field.TypeInt))
	)
	if id, ok := bic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bic.mutation.ImgURL(); ok {
		_spec.SetField(bookimage.FieldImgURL, field.TypeString, value)
		_node.ImgURL = value
	}
	if value, ok := bic.mutation.Isbn(); ok {
		_spec.SetField(bookimage.FieldIsbn, field.TypeInt, value)
		_node.Isbn = value
	}
	if value, ok := bic.mutation.ImgEncode(); ok {
		_spec.SetField(bookimage.FieldImgEncode, field.TypeString, value)
		_node.ImgEncode = value
	}
	if value, ok := bic.mutation.BookID(); ok {
		_spec.SetField(bookimage.FieldBookID, field.TypeInt, value)
		_node.BookID = value
	}
	if value, ok := bic.mutation.MainFlag(); ok {
		_spec.SetField(bookimage.FieldMainFlag, field.TypeInt32, value)
		_node.MainFlag = value
	}
	return _node, _spec
}

// BookImageCreateBulk is the builder for creating many BookImage entities in bulk.
type BookImageCreateBulk struct {
	config
	err      error
	builders []*BookImageCreate
}

// Save creates the BookImage entities in the database.
func (bicb *BookImageCreateBulk) Save(ctx context.Context) ([]*BookImage, error) {
	if bicb.err != nil {
		return nil, bicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(bicb.builders))
	nodes := make([]*BookImage, len(bicb.builders))
	mutators := make([]Mutator, len(bicb.builders))
	for i := range bicb.builders {
		func(i int, root context.Context) {
			builder := bicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BookImageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bicb *BookImageCreateBulk) SaveX(ctx context.Context) []*BookImage {
	v, err := bicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bicb *BookImageCreateBulk) Exec(ctx context.Context) error {
	_, err := bicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bicb *BookImageCreateBulk) ExecX(ctx context.Context) {
	if err := bicb.Exec(ctx); err != nil {
		panic(err)
	}
}
