// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/xuanyiying/publication-shop/app/book/internal/data/ent/bookauthor"
)

// BookAuthor is the model entity for the BookAuthor schema.
type BookAuthor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 作者ID
	AuthorID int `json:"author_id,omitempty"`
	// 国际标准书号
	Isbn string `json:"isbn,omitempty"`
	// 出版物ID
	BookID int `json:"book_id,omitempty"`
	// 著者姓名
	Author string `json:"author,omitempty"`
	// 作者简介
	AuthorAbout  string `json:"author_about,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BookAuthor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bookauthor.FieldID, bookauthor.FieldAuthorID, bookauthor.FieldBookID:
			values[i] = new(sql.NullInt64)
		case bookauthor.FieldIsbn, bookauthor.FieldAuthor, bookauthor.FieldAuthorAbout:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BookAuthor fields.
func (ba *BookAuthor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bookauthor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ba.ID = int(value.Int64)
		case bookauthor.FieldAuthorID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field author_id", values[i])
			} else if value.Valid {
				ba.AuthorID = int(value.Int64)
			}
		case bookauthor.FieldIsbn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isbn", values[i])
			} else if value.Valid {
				ba.Isbn = value.String
			}
		case bookauthor.FieldBookID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field book_id", values[i])
			} else if value.Valid {
				ba.BookID = int(value.Int64)
			}
		case bookauthor.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				ba.Author = value.String
			}
		case bookauthor.FieldAuthorAbout:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_about", values[i])
			} else if value.Valid {
				ba.AuthorAbout = value.String
			}
		default:
			ba.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BookAuthor.
// This includes values selected through modifiers, order, etc.
func (ba *BookAuthor) Value(name string) (ent.Value, error) {
	return ba.selectValues.Get(name)
}

// Update returns a builder for updating this BookAuthor.
// Note that you need to call BookAuthor.Unwrap() before calling this method if this BookAuthor
// was returned from a transaction, and the transaction was committed or rolled back.
func (ba *BookAuthor) Update() *BookAuthorUpdateOne {
	return NewBookAuthorClient(ba.config).UpdateOne(ba)
}

// Unwrap unwraps the BookAuthor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ba *BookAuthor) Unwrap() *BookAuthor {
	_tx, ok := ba.config.driver.(*txDriver)
	if !ok {
		panic("ent: BookAuthor is not a transactional entity")
	}
	ba.config.driver = _tx.drv
	return ba
}

// String implements the fmt.Stringer.
func (ba *BookAuthor) String() string {
	var builder strings.Builder
	builder.WriteString("BookAuthor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ba.ID))
	builder.WriteString("author_id=")
	builder.WriteString(fmt.Sprintf("%v", ba.AuthorID))
	builder.WriteString(", ")
	builder.WriteString("isbn=")
	builder.WriteString(ba.Isbn)
	builder.WriteString(", ")
	builder.WriteString("book_id=")
	builder.WriteString(fmt.Sprintf("%v", ba.BookID))
	builder.WriteString(", ")
	builder.WriteString("author=")
	builder.WriteString(ba.Author)
	builder.WriteString(", ")
	builder.WriteString("author_about=")
	builder.WriteString(ba.AuthorAbout)
	builder.WriteByte(')')
	return builder.String()
}

// BookAuthors is a parsable slice of BookAuthor.
type BookAuthors []*BookAuthor
