// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/go-kratos/publication-shop/app/catalog/service/internal/data/ent/predicate"
	"github.com/go-kratos/publication-shop/app/catalog/service/internal/data/ent/publicationxlanguage"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PublicationXLanguageUpdate is the builder for updating PublicationXLanguage entities.
type PublicationXLanguageUpdate struct {
	config
	hooks    []Hook
	mutation *PublicationXLanguageMutation
}

// Where appends a list predicates to the PublicationXLanguageUpdate builder.
func (pxu *PublicationXLanguageUpdate) Where(ps ...predicate.PublicationXLanguage) *PublicationXLanguageUpdate {
	pxu.mutation.Where(ps...)
	return pxu
}

// SetLanguageID sets the "language_id" field.
func (pxu *PublicationXLanguageUpdate) SetLanguageID(i int) *PublicationXLanguageUpdate {
	pxu.mutation.ResetLanguageID()
	pxu.mutation.SetLanguageID(i)
	return pxu
}

// SetNillableLanguageID sets the "language_id" field if the given value is not nil.
func (pxu *PublicationXLanguageUpdate) SetNillableLanguageID(i *int) *PublicationXLanguageUpdate {
	if i != nil {
		pxu.SetLanguageID(*i)
	}
	return pxu
}

// AddLanguageID adds i to the "language_id" field.
func (pxu *PublicationXLanguageUpdate) AddLanguageID(i int) *PublicationXLanguageUpdate {
	pxu.mutation.AddLanguageID(i)
	return pxu
}

// SetIsbn sets the "isbn" field.
func (pxu *PublicationXLanguageUpdate) SetIsbn(s string) *PublicationXLanguageUpdate {
	pxu.mutation.SetIsbn(s)
	return pxu
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (pxu *PublicationXLanguageUpdate) SetNillableIsbn(s *string) *PublicationXLanguageUpdate {
	if s != nil {
		pxu.SetIsbn(*s)
	}
	return pxu
}

// SetLanguageName sets the "language_name" field.
func (pxu *PublicationXLanguageUpdate) SetLanguageName(s string) *PublicationXLanguageUpdate {
	pxu.mutation.SetLanguageName(s)
	return pxu
}

// SetNillableLanguageName sets the "language_name" field if the given value is not nil.
func (pxu *PublicationXLanguageUpdate) SetNillableLanguageName(s *string) *PublicationXLanguageUpdate {
	if s != nil {
		pxu.SetLanguageName(*s)
	}
	return pxu
}

// ClearLanguageName clears the value of the "language_name" field.
func (pxu *PublicationXLanguageUpdate) ClearLanguageName() *PublicationXLanguageUpdate {
	pxu.mutation.ClearLanguageName()
	return pxu
}

// SetPublicationID sets the "publication_id" field.
func (pxu *PublicationXLanguageUpdate) SetPublicationID(i int) *PublicationXLanguageUpdate {
	pxu.mutation.ResetPublicationID()
	pxu.mutation.SetPublicationID(i)
	return pxu
}

// SetNillablePublicationID sets the "publication_id" field if the given value is not nil.
func (pxu *PublicationXLanguageUpdate) SetNillablePublicationID(i *int) *PublicationXLanguageUpdate {
	if i != nil {
		pxu.SetPublicationID(*i)
	}
	return pxu
}

// AddPublicationID adds i to the "publication_id" field.
func (pxu *PublicationXLanguageUpdate) AddPublicationID(i int) *PublicationXLanguageUpdate {
	pxu.mutation.AddPublicationID(i)
	return pxu
}

// ClearPublicationID clears the value of the "publication_id" field.
func (pxu *PublicationXLanguageUpdate) ClearPublicationID() *PublicationXLanguageUpdate {
	pxu.mutation.ClearPublicationID()
	return pxu
}

// Mutation returns the PublicationXLanguageMutation object of the builder.
func (pxu *PublicationXLanguageUpdate) Mutation() *PublicationXLanguageMutation {
	return pxu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pxu *PublicationXLanguageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pxu.sqlSave, pxu.mutation, pxu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pxu *PublicationXLanguageUpdate) SaveX(ctx context.Context) int {
	affected, err := pxu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pxu *PublicationXLanguageUpdate) Exec(ctx context.Context) error {
	_, err := pxu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pxu *PublicationXLanguageUpdate) ExecX(ctx context.Context) {
	if err := pxu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pxu *PublicationXLanguageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(publicationxlanguage.Table, publicationxlanguage.Columns, sqlgraph.NewFieldSpec(publicationxlanguage.FieldID, field.TypeInt))
	if ps := pxu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pxu.mutation.LanguageID(); ok {
		_spec.SetField(publicationxlanguage.FieldLanguageID, field.TypeInt, value)
	}
	if value, ok := pxu.mutation.AddedLanguageID(); ok {
		_spec.AddField(publicationxlanguage.FieldLanguageID, field.TypeInt, value)
	}
	if value, ok := pxu.mutation.Isbn(); ok {
		_spec.SetField(publicationxlanguage.FieldIsbn, field.TypeString, value)
	}
	if value, ok := pxu.mutation.LanguageName(); ok {
		_spec.SetField(publicationxlanguage.FieldLanguageName, field.TypeString, value)
	}
	if pxu.mutation.LanguageNameCleared() {
		_spec.ClearField(publicationxlanguage.FieldLanguageName, field.TypeString)
	}
	if value, ok := pxu.mutation.PublicationID(); ok {
		_spec.SetField(publicationxlanguage.FieldPublicationID, field.TypeInt, value)
	}
	if value, ok := pxu.mutation.AddedPublicationID(); ok {
		_spec.AddField(publicationxlanguage.FieldPublicationID, field.TypeInt, value)
	}
	if pxu.mutation.PublicationIDCleared() {
		_spec.ClearField(publicationxlanguage.FieldPublicationID, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pxu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicationxlanguage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pxu.mutation.done = true
	return n, nil
}

// PublicationXLanguageUpdateOne is the builder for updating a single PublicationXLanguage entity.
type PublicationXLanguageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PublicationXLanguageMutation
}

// SetLanguageID sets the "language_id" field.
func (pxuo *PublicationXLanguageUpdateOne) SetLanguageID(i int) *PublicationXLanguageUpdateOne {
	pxuo.mutation.ResetLanguageID()
	pxuo.mutation.SetLanguageID(i)
	return pxuo
}

// SetNillableLanguageID sets the "language_id" field if the given value is not nil.
func (pxuo *PublicationXLanguageUpdateOne) SetNillableLanguageID(i *int) *PublicationXLanguageUpdateOne {
	if i != nil {
		pxuo.SetLanguageID(*i)
	}
	return pxuo
}

// AddLanguageID adds i to the "language_id" field.
func (pxuo *PublicationXLanguageUpdateOne) AddLanguageID(i int) *PublicationXLanguageUpdateOne {
	pxuo.mutation.AddLanguageID(i)
	return pxuo
}

// SetIsbn sets the "isbn" field.
func (pxuo *PublicationXLanguageUpdateOne) SetIsbn(s string) *PublicationXLanguageUpdateOne {
	pxuo.mutation.SetIsbn(s)
	return pxuo
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (pxuo *PublicationXLanguageUpdateOne) SetNillableIsbn(s *string) *PublicationXLanguageUpdateOne {
	if s != nil {
		pxuo.SetIsbn(*s)
	}
	return pxuo
}

// SetLanguageName sets the "language_name" field.
func (pxuo *PublicationXLanguageUpdateOne) SetLanguageName(s string) *PublicationXLanguageUpdateOne {
	pxuo.mutation.SetLanguageName(s)
	return pxuo
}

// SetNillableLanguageName sets the "language_name" field if the given value is not nil.
func (pxuo *PublicationXLanguageUpdateOne) SetNillableLanguageName(s *string) *PublicationXLanguageUpdateOne {
	if s != nil {
		pxuo.SetLanguageName(*s)
	}
	return pxuo
}

// ClearLanguageName clears the value of the "language_name" field.
func (pxuo *PublicationXLanguageUpdateOne) ClearLanguageName() *PublicationXLanguageUpdateOne {
	pxuo.mutation.ClearLanguageName()
	return pxuo
}

// SetPublicationID sets the "publication_id" field.
func (pxuo *PublicationXLanguageUpdateOne) SetPublicationID(i int) *PublicationXLanguageUpdateOne {
	pxuo.mutation.ResetPublicationID()
	pxuo.mutation.SetPublicationID(i)
	return pxuo
}

// SetNillablePublicationID sets the "publication_id" field if the given value is not nil.
func (pxuo *PublicationXLanguageUpdateOne) SetNillablePublicationID(i *int) *PublicationXLanguageUpdateOne {
	if i != nil {
		pxuo.SetPublicationID(*i)
	}
	return pxuo
}

// AddPublicationID adds i to the "publication_id" field.
func (pxuo *PublicationXLanguageUpdateOne) AddPublicationID(i int) *PublicationXLanguageUpdateOne {
	pxuo.mutation.AddPublicationID(i)
	return pxuo
}

// ClearPublicationID clears the value of the "publication_id" field.
func (pxuo *PublicationXLanguageUpdateOne) ClearPublicationID() *PublicationXLanguageUpdateOne {
	pxuo.mutation.ClearPublicationID()
	return pxuo
}

// Mutation returns the PublicationXLanguageMutation object of the builder.
func (pxuo *PublicationXLanguageUpdateOne) Mutation() *PublicationXLanguageMutation {
	return pxuo.mutation
}

// Where appends a list predicates to the PublicationXLanguageUpdate builder.
func (pxuo *PublicationXLanguageUpdateOne) Where(ps ...predicate.PublicationXLanguage) *PublicationXLanguageUpdateOne {
	pxuo.mutation.Where(ps...)
	return pxuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pxuo *PublicationXLanguageUpdateOne) Select(field string, fields ...string) *PublicationXLanguageUpdateOne {
	pxuo.fields = append([]string{field}, fields...)
	return pxuo
}

// Save executes the query and returns the updated PublicationXLanguage entity.
func (pxuo *PublicationXLanguageUpdateOne) Save(ctx context.Context) (*PublicationXLanguage, error) {
	return withHooks(ctx, pxuo.sqlSave, pxuo.mutation, pxuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pxuo *PublicationXLanguageUpdateOne) SaveX(ctx context.Context) *PublicationXLanguage {
	node, err := pxuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pxuo *PublicationXLanguageUpdateOne) Exec(ctx context.Context) error {
	_, err := pxuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pxuo *PublicationXLanguageUpdateOne) ExecX(ctx context.Context) {
	if err := pxuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pxuo *PublicationXLanguageUpdateOne) sqlSave(ctx context.Context) (_node *PublicationXLanguage, err error) {
	_spec := sqlgraph.NewUpdateSpec(publicationxlanguage.Table, publicationxlanguage.Columns, sqlgraph.NewFieldSpec(publicationxlanguage.FieldID, field.TypeInt))
	id, ok := pxuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PublicationXLanguage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pxuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, publicationxlanguage.FieldID)
		for _, f := range fields {
			if !publicationxlanguage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != publicationxlanguage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pxuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pxuo.mutation.LanguageID(); ok {
		_spec.SetField(publicationxlanguage.FieldLanguageID, field.TypeInt, value)
	}
	if value, ok := pxuo.mutation.AddedLanguageID(); ok {
		_spec.AddField(publicationxlanguage.FieldLanguageID, field.TypeInt, value)
	}
	if value, ok := pxuo.mutation.Isbn(); ok {
		_spec.SetField(publicationxlanguage.FieldIsbn, field.TypeString, value)
	}
	if value, ok := pxuo.mutation.LanguageName(); ok {
		_spec.SetField(publicationxlanguage.FieldLanguageName, field.TypeString, value)
	}
	if pxuo.mutation.LanguageNameCleared() {
		_spec.ClearField(publicationxlanguage.FieldLanguageName, field.TypeString)
	}
	if value, ok := pxuo.mutation.PublicationID(); ok {
		_spec.SetField(publicationxlanguage.FieldPublicationID, field.TypeInt, value)
	}
	if value, ok := pxuo.mutation.AddedPublicationID(); ok {
		_spec.AddField(publicationxlanguage.FieldPublicationID, field.TypeInt, value)
	}
	if pxuo.mutation.PublicationIDCleared() {
		_spec.ClearField(publicationxlanguage.FieldPublicationID, field.TypeInt)
	}
	_node = &PublicationXLanguage{config: pxuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pxuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicationxlanguage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pxuo.mutation.done = true
	return _node, nil
}
