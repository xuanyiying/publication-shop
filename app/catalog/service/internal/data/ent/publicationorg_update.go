// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/go-kratos/publication-shop/app/catalog/service/internal/data/ent/predicate"
	"github.com/go-kratos/publication-shop/app/catalog/service/internal/data/ent/publicationorg"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PublicationOrgUpdate is the builder for updating PublicationOrg entities.
type PublicationOrgUpdate struct {
	config
	hooks    []Hook
	mutation *PublicationOrgMutation
}

// Where appends a list predicates to the PublicationOrgUpdate builder.
func (pou *PublicationOrgUpdate) Where(ps ...predicate.PublicationOrg) *PublicationOrgUpdate {
	pou.mutation.Where(ps...)
	return pou
}

// SetOrgCode sets the "org_code" field.
func (pou *PublicationOrgUpdate) SetOrgCode(s string) *PublicationOrgUpdate {
	pou.mutation.SetOrgCode(s)
	return pou
}

// SetNillableOrgCode sets the "org_code" field if the given value is not nil.
func (pou *PublicationOrgUpdate) SetNillableOrgCode(s *string) *PublicationOrgUpdate {
	if s != nil {
		pou.SetOrgCode(*s)
	}
	return pou
}

// SetOrgName sets the "org_name" field.
func (pou *PublicationOrgUpdate) SetOrgName(s string) *PublicationOrgUpdate {
	pou.mutation.SetOrgName(s)
	return pou
}

// SetNillableOrgName sets the "org_name" field if the given value is not nil.
func (pou *PublicationOrgUpdate) SetNillableOrgName(s *string) *PublicationOrgUpdate {
	if s != nil {
		pou.SetOrgName(*s)
	}
	return pou
}

// ClearOrgName clears the value of the "org_name" field.
func (pou *PublicationOrgUpdate) ClearOrgName() *PublicationOrgUpdate {
	pou.mutation.ClearOrgName()
	return pou
}

// SetOrgAddress sets the "org_address" field.
func (pou *PublicationOrgUpdate) SetOrgAddress(s string) *PublicationOrgUpdate {
	pou.mutation.SetOrgAddress(s)
	return pou
}

// SetNillableOrgAddress sets the "org_address" field if the given value is not nil.
func (pou *PublicationOrgUpdate) SetNillableOrgAddress(s *string) *PublicationOrgUpdate {
	if s != nil {
		pou.SetOrgAddress(*s)
	}
	return pou
}

// ClearOrgAddress clears the value of the "org_address" field.
func (pou *PublicationOrgUpdate) ClearOrgAddress() *PublicationOrgUpdate {
	pou.mutation.ClearOrgAddress()
	return pou
}

// SetModifiedAt sets the "modified_at" field.
func (pou *PublicationOrgUpdate) SetModifiedAt(t time.Time) *PublicationOrgUpdate {
	pou.mutation.SetModifiedAt(t)
	return pou
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (pou *PublicationOrgUpdate) SetNillableModifiedAt(t *time.Time) *PublicationOrgUpdate {
	if t != nil {
		pou.SetModifiedAt(*t)
	}
	return pou
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (pou *PublicationOrgUpdate) ClearModifiedAt() *PublicationOrgUpdate {
	pou.mutation.ClearModifiedAt()
	return pou
}

// SetCreatedAt sets the "created_at" field.
func (pou *PublicationOrgUpdate) SetCreatedAt(t time.Time) *PublicationOrgUpdate {
	pou.mutation.SetCreatedAt(t)
	return pou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pou *PublicationOrgUpdate) SetNillableCreatedAt(t *time.Time) *PublicationOrgUpdate {
	if t != nil {
		pou.SetCreatedAt(*t)
	}
	return pou
}

// ClearCreatedAt clears the value of the "created_at" field.
func (pou *PublicationOrgUpdate) ClearCreatedAt() *PublicationOrgUpdate {
	pou.mutation.ClearCreatedAt()
	return pou
}

// Mutation returns the PublicationOrgMutation object of the builder.
func (pou *PublicationOrgUpdate) Mutation() *PublicationOrgMutation {
	return pou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pou *PublicationOrgUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pou.sqlSave, pou.mutation, pou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pou *PublicationOrgUpdate) SaveX(ctx context.Context) int {
	affected, err := pou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pou *PublicationOrgUpdate) Exec(ctx context.Context) error {
	_, err := pou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pou *PublicationOrgUpdate) ExecX(ctx context.Context) {
	if err := pou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pou *PublicationOrgUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(publicationorg.Table, publicationorg.Columns, sqlgraph.NewFieldSpec(publicationorg.FieldID, field.TypeInt))
	if ps := pou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pou.mutation.OrgCode(); ok {
		_spec.SetField(publicationorg.FieldOrgCode, field.TypeString, value)
	}
	if value, ok := pou.mutation.OrgName(); ok {
		_spec.SetField(publicationorg.FieldOrgName, field.TypeString, value)
	}
	if pou.mutation.OrgNameCleared() {
		_spec.ClearField(publicationorg.FieldOrgName, field.TypeString)
	}
	if value, ok := pou.mutation.OrgAddress(); ok {
		_spec.SetField(publicationorg.FieldOrgAddress, field.TypeString, value)
	}
	if pou.mutation.OrgAddressCleared() {
		_spec.ClearField(publicationorg.FieldOrgAddress, field.TypeString)
	}
	if value, ok := pou.mutation.ModifiedAt(); ok {
		_spec.SetField(publicationorg.FieldModifiedAt, field.TypeTime, value)
	}
	if pou.mutation.ModifiedAtCleared() {
		_spec.ClearField(publicationorg.FieldModifiedAt, field.TypeTime)
	}
	if value, ok := pou.mutation.CreatedAt(); ok {
		_spec.SetField(publicationorg.FieldCreatedAt, field.TypeTime, value)
	}
	if pou.mutation.CreatedAtCleared() {
		_spec.ClearField(publicationorg.FieldCreatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicationorg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pou.mutation.done = true
	return n, nil
}

// PublicationOrgUpdateOne is the builder for updating a single PublicationOrg entity.
type PublicationOrgUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PublicationOrgMutation
}

// SetOrgCode sets the "org_code" field.
func (pouo *PublicationOrgUpdateOne) SetOrgCode(s string) *PublicationOrgUpdateOne {
	pouo.mutation.SetOrgCode(s)
	return pouo
}

// SetNillableOrgCode sets the "org_code" field if the given value is not nil.
func (pouo *PublicationOrgUpdateOne) SetNillableOrgCode(s *string) *PublicationOrgUpdateOne {
	if s != nil {
		pouo.SetOrgCode(*s)
	}
	return pouo
}

// SetOrgName sets the "org_name" field.
func (pouo *PublicationOrgUpdateOne) SetOrgName(s string) *PublicationOrgUpdateOne {
	pouo.mutation.SetOrgName(s)
	return pouo
}

// SetNillableOrgName sets the "org_name" field if the given value is not nil.
func (pouo *PublicationOrgUpdateOne) SetNillableOrgName(s *string) *PublicationOrgUpdateOne {
	if s != nil {
		pouo.SetOrgName(*s)
	}
	return pouo
}

// ClearOrgName clears the value of the "org_name" field.
func (pouo *PublicationOrgUpdateOne) ClearOrgName() *PublicationOrgUpdateOne {
	pouo.mutation.ClearOrgName()
	return pouo
}

// SetOrgAddress sets the "org_address" field.
func (pouo *PublicationOrgUpdateOne) SetOrgAddress(s string) *PublicationOrgUpdateOne {
	pouo.mutation.SetOrgAddress(s)
	return pouo
}

// SetNillableOrgAddress sets the "org_address" field if the given value is not nil.
func (pouo *PublicationOrgUpdateOne) SetNillableOrgAddress(s *string) *PublicationOrgUpdateOne {
	if s != nil {
		pouo.SetOrgAddress(*s)
	}
	return pouo
}

// ClearOrgAddress clears the value of the "org_address" field.
func (pouo *PublicationOrgUpdateOne) ClearOrgAddress() *PublicationOrgUpdateOne {
	pouo.mutation.ClearOrgAddress()
	return pouo
}

// SetModifiedAt sets the "modified_at" field.
func (pouo *PublicationOrgUpdateOne) SetModifiedAt(t time.Time) *PublicationOrgUpdateOne {
	pouo.mutation.SetModifiedAt(t)
	return pouo
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (pouo *PublicationOrgUpdateOne) SetNillableModifiedAt(t *time.Time) *PublicationOrgUpdateOne {
	if t != nil {
		pouo.SetModifiedAt(*t)
	}
	return pouo
}

// ClearModifiedAt clears the value of the "modified_at" field.
func (pouo *PublicationOrgUpdateOne) ClearModifiedAt() *PublicationOrgUpdateOne {
	pouo.mutation.ClearModifiedAt()
	return pouo
}

// SetCreatedAt sets the "created_at" field.
func (pouo *PublicationOrgUpdateOne) SetCreatedAt(t time.Time) *PublicationOrgUpdateOne {
	pouo.mutation.SetCreatedAt(t)
	return pouo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pouo *PublicationOrgUpdateOne) SetNillableCreatedAt(t *time.Time) *PublicationOrgUpdateOne {
	if t != nil {
		pouo.SetCreatedAt(*t)
	}
	return pouo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (pouo *PublicationOrgUpdateOne) ClearCreatedAt() *PublicationOrgUpdateOne {
	pouo.mutation.ClearCreatedAt()
	return pouo
}

// Mutation returns the PublicationOrgMutation object of the builder.
func (pouo *PublicationOrgUpdateOne) Mutation() *PublicationOrgMutation {
	return pouo.mutation
}

// Where appends a list predicates to the PublicationOrgUpdate builder.
func (pouo *PublicationOrgUpdateOne) Where(ps ...predicate.PublicationOrg) *PublicationOrgUpdateOne {
	pouo.mutation.Where(ps...)
	return pouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pouo *PublicationOrgUpdateOne) Select(field string, fields ...string) *PublicationOrgUpdateOne {
	pouo.fields = append([]string{field}, fields...)
	return pouo
}

// Save executes the query and returns the updated PublicationOrg entity.
func (pouo *PublicationOrgUpdateOne) Save(ctx context.Context) (*PublicationOrg, error) {
	return withHooks(ctx, pouo.sqlSave, pouo.mutation, pouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pouo *PublicationOrgUpdateOne) SaveX(ctx context.Context) *PublicationOrg {
	node, err := pouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pouo *PublicationOrgUpdateOne) Exec(ctx context.Context) error {
	_, err := pouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pouo *PublicationOrgUpdateOne) ExecX(ctx context.Context) {
	if err := pouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pouo *PublicationOrgUpdateOne) sqlSave(ctx context.Context) (_node *PublicationOrg, err error) {
	_spec := sqlgraph.NewUpdateSpec(publicationorg.Table, publicationorg.Columns, sqlgraph.NewFieldSpec(publicationorg.FieldID, field.TypeInt))
	id, ok := pouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PublicationOrg.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, publicationorg.FieldID)
		for _, f := range fields {
			if !publicationorg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != publicationorg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pouo.mutation.OrgCode(); ok {
		_spec.SetField(publicationorg.FieldOrgCode, field.TypeString, value)
	}
	if value, ok := pouo.mutation.OrgName(); ok {
		_spec.SetField(publicationorg.FieldOrgName, field.TypeString, value)
	}
	if pouo.mutation.OrgNameCleared() {
		_spec.ClearField(publicationorg.FieldOrgName, field.TypeString)
	}
	if value, ok := pouo.mutation.OrgAddress(); ok {
		_spec.SetField(publicationorg.FieldOrgAddress, field.TypeString, value)
	}
	if pouo.mutation.OrgAddressCleared() {
		_spec.ClearField(publicationorg.FieldOrgAddress, field.TypeString)
	}
	if value, ok := pouo.mutation.ModifiedAt(); ok {
		_spec.SetField(publicationorg.FieldModifiedAt, field.TypeTime, value)
	}
	if pouo.mutation.ModifiedAtCleared() {
		_spec.ClearField(publicationorg.FieldModifiedAt, field.TypeTime)
	}
	if value, ok := pouo.mutation.CreatedAt(); ok {
		_spec.SetField(publicationorg.FieldCreatedAt, field.TypeTime, value)
	}
	if pouo.mutation.CreatedAtCleared() {
		_spec.ClearField(publicationorg.FieldCreatedAt, field.TypeTime)
	}
	_node = &PublicationOrg{config: pouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicationorg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pouo.mutation.done = true
	return _node, nil
}
