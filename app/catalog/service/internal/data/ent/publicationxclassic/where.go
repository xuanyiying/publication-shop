// Code generated by ent, DO NOT EDIT.

package publicationxclassic

import (
	"github.com/go-kratos/publication-shop/app/catalog/service/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldLTE(FieldID, id))
}

// ClassicID applies equality check predicate on the "classic_id" field. It's identical to ClassicIDEQ.
func ClassicID(v int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldEQ(FieldClassicID, v))
}

// Isbn applies equality check predicate on the "isbn" field. It's identical to IsbnEQ.
func Isbn(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldEQ(FieldIsbn, v))
}

// ClassicName applies equality check predicate on the "classic_name" field. It's identical to ClassicNameEQ.
func ClassicName(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldEQ(FieldClassicName, v))
}

// PublicationID applies equality check predicate on the "publication_id" field. It's identical to PublicationIDEQ.
func PublicationID(v int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldEQ(FieldPublicationID, v))
}

// ClassicIDEQ applies the EQ predicate on the "classic_id" field.
func ClassicIDEQ(v int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldEQ(FieldClassicID, v))
}

// ClassicIDNEQ applies the NEQ predicate on the "classic_id" field.
func ClassicIDNEQ(v int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldNEQ(FieldClassicID, v))
}

// ClassicIDIn applies the In predicate on the "classic_id" field.
func ClassicIDIn(vs ...int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldIn(FieldClassicID, vs...))
}

// ClassicIDNotIn applies the NotIn predicate on the "classic_id" field.
func ClassicIDNotIn(vs ...int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldNotIn(FieldClassicID, vs...))
}

// ClassicIDGT applies the GT predicate on the "classic_id" field.
func ClassicIDGT(v int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldGT(FieldClassicID, v))
}

// ClassicIDGTE applies the GTE predicate on the "classic_id" field.
func ClassicIDGTE(v int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldGTE(FieldClassicID, v))
}

// ClassicIDLT applies the LT predicate on the "classic_id" field.
func ClassicIDLT(v int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldLT(FieldClassicID, v))
}

// ClassicIDLTE applies the LTE predicate on the "classic_id" field.
func ClassicIDLTE(v int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldLTE(FieldClassicID, v))
}

// IsbnEQ applies the EQ predicate on the "isbn" field.
func IsbnEQ(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldEQ(FieldIsbn, v))
}

// IsbnNEQ applies the NEQ predicate on the "isbn" field.
func IsbnNEQ(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldNEQ(FieldIsbn, v))
}

// IsbnIn applies the In predicate on the "isbn" field.
func IsbnIn(vs ...string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldIn(FieldIsbn, vs...))
}

// IsbnNotIn applies the NotIn predicate on the "isbn" field.
func IsbnNotIn(vs ...string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldNotIn(FieldIsbn, vs...))
}

// IsbnGT applies the GT predicate on the "isbn" field.
func IsbnGT(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldGT(FieldIsbn, v))
}

// IsbnGTE applies the GTE predicate on the "isbn" field.
func IsbnGTE(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldGTE(FieldIsbn, v))
}

// IsbnLT applies the LT predicate on the "isbn" field.
func IsbnLT(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldLT(FieldIsbn, v))
}

// IsbnLTE applies the LTE predicate on the "isbn" field.
func IsbnLTE(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldLTE(FieldIsbn, v))
}

// IsbnContains applies the Contains predicate on the "isbn" field.
func IsbnContains(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldContains(FieldIsbn, v))
}

// IsbnHasPrefix applies the HasPrefix predicate on the "isbn" field.
func IsbnHasPrefix(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldHasPrefix(FieldIsbn, v))
}

// IsbnHasSuffix applies the HasSuffix predicate on the "isbn" field.
func IsbnHasSuffix(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldHasSuffix(FieldIsbn, v))
}

// IsbnEqualFold applies the EqualFold predicate on the "isbn" field.
func IsbnEqualFold(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldEqualFold(FieldIsbn, v))
}

// IsbnContainsFold applies the ContainsFold predicate on the "isbn" field.
func IsbnContainsFold(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldContainsFold(FieldIsbn, v))
}

// ClassicNameEQ applies the EQ predicate on the "classic_name" field.
func ClassicNameEQ(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldEQ(FieldClassicName, v))
}

// ClassicNameNEQ applies the NEQ predicate on the "classic_name" field.
func ClassicNameNEQ(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldNEQ(FieldClassicName, v))
}

// ClassicNameIn applies the In predicate on the "classic_name" field.
func ClassicNameIn(vs ...string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldIn(FieldClassicName, vs...))
}

// ClassicNameNotIn applies the NotIn predicate on the "classic_name" field.
func ClassicNameNotIn(vs ...string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldNotIn(FieldClassicName, vs...))
}

// ClassicNameGT applies the GT predicate on the "classic_name" field.
func ClassicNameGT(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldGT(FieldClassicName, v))
}

// ClassicNameGTE applies the GTE predicate on the "classic_name" field.
func ClassicNameGTE(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldGTE(FieldClassicName, v))
}

// ClassicNameLT applies the LT predicate on the "classic_name" field.
func ClassicNameLT(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldLT(FieldClassicName, v))
}

// ClassicNameLTE applies the LTE predicate on the "classic_name" field.
func ClassicNameLTE(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldLTE(FieldClassicName, v))
}

// ClassicNameContains applies the Contains predicate on the "classic_name" field.
func ClassicNameContains(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldContains(FieldClassicName, v))
}

// ClassicNameHasPrefix applies the HasPrefix predicate on the "classic_name" field.
func ClassicNameHasPrefix(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldHasPrefix(FieldClassicName, v))
}

// ClassicNameHasSuffix applies the HasSuffix predicate on the "classic_name" field.
func ClassicNameHasSuffix(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldHasSuffix(FieldClassicName, v))
}

// ClassicNameIsNil applies the IsNil predicate on the "classic_name" field.
func ClassicNameIsNil() predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldIsNull(FieldClassicName))
}

// ClassicNameNotNil applies the NotNil predicate on the "classic_name" field.
func ClassicNameNotNil() predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldNotNull(FieldClassicName))
}

// ClassicNameEqualFold applies the EqualFold predicate on the "classic_name" field.
func ClassicNameEqualFold(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldEqualFold(FieldClassicName, v))
}

// ClassicNameContainsFold applies the ContainsFold predicate on the "classic_name" field.
func ClassicNameContainsFold(v string) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldContainsFold(FieldClassicName, v))
}

// PublicationIDEQ applies the EQ predicate on the "publication_id" field.
func PublicationIDEQ(v int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldEQ(FieldPublicationID, v))
}

// PublicationIDNEQ applies the NEQ predicate on the "publication_id" field.
func PublicationIDNEQ(v int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldNEQ(FieldPublicationID, v))
}

// PublicationIDIn applies the In predicate on the "publication_id" field.
func PublicationIDIn(vs ...int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldIn(FieldPublicationID, vs...))
}

// PublicationIDNotIn applies the NotIn predicate on the "publication_id" field.
func PublicationIDNotIn(vs ...int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldNotIn(FieldPublicationID, vs...))
}

// PublicationIDGT applies the GT predicate on the "publication_id" field.
func PublicationIDGT(v int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldGT(FieldPublicationID, v))
}

// PublicationIDGTE applies the GTE predicate on the "publication_id" field.
func PublicationIDGTE(v int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldGTE(FieldPublicationID, v))
}

// PublicationIDLT applies the LT predicate on the "publication_id" field.
func PublicationIDLT(v int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldLT(FieldPublicationID, v))
}

// PublicationIDLTE applies the LTE predicate on the "publication_id" field.
func PublicationIDLTE(v int) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldLTE(FieldPublicationID, v))
}

// PublicationIDIsNil applies the IsNil predicate on the "publication_id" field.
func PublicationIDIsNil() predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldIsNull(FieldPublicationID))
}

// PublicationIDNotNil applies the NotNil predicate on the "publication_id" field.
func PublicationIDNotNil() predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.FieldNotNull(FieldPublicationID))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PublicationXClassic) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PublicationXClassic) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PublicationXClassic) predicate.PublicationXClassic {
	return predicate.PublicationXClassic(sql.NotPredicates(p))
}
