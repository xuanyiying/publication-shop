// Code generated by ent, DO NOT EDIT.

package publicationinfo

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the publicationinfo type in the database.
	Label = "publication_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "publication_id"
	// FieldPublicationName holds the string denoting the publication_name field in the database.
	FieldPublicationName = "publication_name"
	// FieldOrgID holds the string denoting the org_id field in the database.
	FieldOrgID = "org_id"
	// FieldPublishedTimes holds the string denoting the published_times field in the database.
	FieldPublishedTimes = "published_times"
	// FieldPrintTimes holds the string denoting the print_times field in the database.
	FieldPrintTimes = "print_times"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldIntroduction holds the string denoting the introduction field in the database.
	FieldIntroduction = "introduction"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldWordCount holds the string denoting the word_count field in the database.
	FieldWordCount = "word_count"
	// FieldIsbn holds the string denoting the isbn field in the database.
	FieldIsbn = "isbn"
	// FieldStorageBy holds the string denoting the storage_by field in the database.
	FieldStorageBy = "storage_by"
	// FieldStorageAt holds the string denoting the storage_at field in the database.
	FieldStorageAt = "storage_at"
	// FieldModifiedBy holds the string denoting the modified_by field in the database.
	FieldModifiedBy = "modified_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldModifiedAt holds the string denoting the modified_at field in the database.
	FieldModifiedAt = "modified_at"
	// Table holds the table name of the publicationinfo in the database.
	Table = "publication_info"
)

// Columns holds all SQL columns for publicationinfo fields.
var Columns = []string{
	FieldID,
	FieldPublicationName,
	FieldOrgID,
	FieldPublishedTimes,
	FieldPrintTimes,
	FieldPrice,
	FieldIntroduction,
	FieldQuantity,
	FieldWordCount,
	FieldIsbn,
	FieldStorageBy,
	FieldStorageAt,
	FieldModifiedBy,
	FieldCreatedAt,
	FieldModifiedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PublicationInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPublicationName orders the results by the publication_name field.
func ByPublicationName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublicationName, opts...).ToFunc()
}

// ByOrgID orders the results by the org_id field.
func ByOrgID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrgID, opts...).ToFunc()
}

// ByPublishedTimes orders the results by the published_times field.
func ByPublishedTimes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishedTimes, opts...).ToFunc()
}

// ByPrintTimes orders the results by the print_times field.
func ByPrintTimes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrintTimes, opts...).ToFunc()
}

// ByPrice orders the results by the price field.
func ByPrice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPrice, opts...).ToFunc()
}

// ByIntroduction orders the results by the introduction field.
func ByIntroduction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntroduction, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}

// ByWordCount orders the results by the word_count field.
func ByWordCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWordCount, opts...).ToFunc()
}

// ByIsbn orders the results by the isbn field.
func ByIsbn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsbn, opts...).ToFunc()
}

// ByStorageBy orders the results by the storage_by field.
func ByStorageBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStorageBy, opts...).ToFunc()
}

// ByStorageAt orders the results by the storage_at field.
func ByStorageAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStorageAt, opts...).ToFunc()
}

// ByModifiedBy orders the results by the modified_by field.
func ByModifiedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByModifiedAt orders the results by the modified_at field.
func ByModifiedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedAt, opts...).ToFunc()
}
