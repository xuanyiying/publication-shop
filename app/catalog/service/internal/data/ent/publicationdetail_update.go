// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"github.com/go-kratos/publication-shop/app/catalog/service/internal/data/ent/predicate"
	"github.com/go-kratos/publication-shop/app/catalog/service/internal/data/ent/publicationdetail"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PublicationDetailUpdate is the builder for updating PublicationDetail entities.
type PublicationDetailUpdate struct {
	config
	hooks    []Hook
	mutation *PublicationDetailMutation
}

// Where appends a list predicates to the PublicationDetailUpdate builder.
func (pdu *PublicationDetailUpdate) Where(ps ...predicate.PublicationDetail) *PublicationDetailUpdate {
	pdu.mutation.Where(ps...)
	return pdu
}

// SetIsbn sets the "isbn" field.
func (pdu *PublicationDetailUpdate) SetIsbn(s string) *PublicationDetailUpdate {
	pdu.mutation.SetIsbn(s)
	return pdu
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (pdu *PublicationDetailUpdate) SetNillableIsbn(s *string) *PublicationDetailUpdate {
	if s != nil {
		pdu.SetIsbn(*s)
	}
	return pdu
}

// SetDetailHTML sets the "detail_html" field.
func (pdu *PublicationDetailUpdate) SetDetailHTML(s string) *PublicationDetailUpdate {
	pdu.mutation.SetDetailHTML(s)
	return pdu
}

// SetNillableDetailHTML sets the "detail_html" field if the given value is not nil.
func (pdu *PublicationDetailUpdate) SetNillableDetailHTML(s *string) *PublicationDetailUpdate {
	if s != nil {
		pdu.SetDetailHTML(*s)
	}
	return pdu
}

// ClearDetailHTML clears the value of the "detail_html" field.
func (pdu *PublicationDetailUpdate) ClearDetailHTML() *PublicationDetailUpdate {
	pdu.mutation.ClearDetailHTML()
	return pdu
}

// SetDetailImg sets the "detail_img" field.
func (pdu *PublicationDetailUpdate) SetDetailImg(s string) *PublicationDetailUpdate {
	pdu.mutation.SetDetailImg(s)
	return pdu
}

// SetNillableDetailImg sets the "detail_img" field if the given value is not nil.
func (pdu *PublicationDetailUpdate) SetNillableDetailImg(s *string) *PublicationDetailUpdate {
	if s != nil {
		pdu.SetDetailImg(*s)
	}
	return pdu
}

// ClearDetailImg clears the value of the "detail_img" field.
func (pdu *PublicationDetailUpdate) ClearDetailImg() *PublicationDetailUpdate {
	pdu.mutation.ClearDetailImg()
	return pdu
}

// SetPublicationID sets the "publication_id" field.
func (pdu *PublicationDetailUpdate) SetPublicationID(i int) *PublicationDetailUpdate {
	pdu.mutation.ResetPublicationID()
	pdu.mutation.SetPublicationID(i)
	return pdu
}

// SetNillablePublicationID sets the "publication_id" field if the given value is not nil.
func (pdu *PublicationDetailUpdate) SetNillablePublicationID(i *int) *PublicationDetailUpdate {
	if i != nil {
		pdu.SetPublicationID(*i)
	}
	return pdu
}

// AddPublicationID adds i to the "publication_id" field.
func (pdu *PublicationDetailUpdate) AddPublicationID(i int) *PublicationDetailUpdate {
	pdu.mutation.AddPublicationID(i)
	return pdu
}

// ClearPublicationID clears the value of the "publication_id" field.
func (pdu *PublicationDetailUpdate) ClearPublicationID() *PublicationDetailUpdate {
	pdu.mutation.ClearPublicationID()
	return pdu
}

// Mutation returns the PublicationDetailMutation object of the builder.
func (pdu *PublicationDetailUpdate) Mutation() *PublicationDetailMutation {
	return pdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pdu *PublicationDetailUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pdu.sqlSave, pdu.mutation, pdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pdu *PublicationDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := pdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pdu *PublicationDetailUpdate) Exec(ctx context.Context) error {
	_, err := pdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdu *PublicationDetailUpdate) ExecX(ctx context.Context) {
	if err := pdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pdu *PublicationDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(publicationdetail.Table, publicationdetail.Columns, sqlgraph.NewFieldSpec(publicationdetail.FieldID, field.TypeInt))
	if ps := pdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdu.mutation.Isbn(); ok {
		_spec.SetField(publicationdetail.FieldIsbn, field.TypeString, value)
	}
	if value, ok := pdu.mutation.DetailHTML(); ok {
		_spec.SetField(publicationdetail.FieldDetailHTML, field.TypeString, value)
	}
	if pdu.mutation.DetailHTMLCleared() {
		_spec.ClearField(publicationdetail.FieldDetailHTML, field.TypeString)
	}
	if value, ok := pdu.mutation.DetailImg(); ok {
		_spec.SetField(publicationdetail.FieldDetailImg, field.TypeString, value)
	}
	if pdu.mutation.DetailImgCleared() {
		_spec.ClearField(publicationdetail.FieldDetailImg, field.TypeString)
	}
	if value, ok := pdu.mutation.PublicationID(); ok {
		_spec.SetField(publicationdetail.FieldPublicationID, field.TypeInt, value)
	}
	if value, ok := pdu.mutation.AddedPublicationID(); ok {
		_spec.AddField(publicationdetail.FieldPublicationID, field.TypeInt, value)
	}
	if pdu.mutation.PublicationIDCleared() {
		_spec.ClearField(publicationdetail.FieldPublicationID, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicationdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pdu.mutation.done = true
	return n, nil
}

// PublicationDetailUpdateOne is the builder for updating a single PublicationDetail entity.
type PublicationDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PublicationDetailMutation
}

// SetIsbn sets the "isbn" field.
func (pduo *PublicationDetailUpdateOne) SetIsbn(s string) *PublicationDetailUpdateOne {
	pduo.mutation.SetIsbn(s)
	return pduo
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (pduo *PublicationDetailUpdateOne) SetNillableIsbn(s *string) *PublicationDetailUpdateOne {
	if s != nil {
		pduo.SetIsbn(*s)
	}
	return pduo
}

// SetDetailHTML sets the "detail_html" field.
func (pduo *PublicationDetailUpdateOne) SetDetailHTML(s string) *PublicationDetailUpdateOne {
	pduo.mutation.SetDetailHTML(s)
	return pduo
}

// SetNillableDetailHTML sets the "detail_html" field if the given value is not nil.
func (pduo *PublicationDetailUpdateOne) SetNillableDetailHTML(s *string) *PublicationDetailUpdateOne {
	if s != nil {
		pduo.SetDetailHTML(*s)
	}
	return pduo
}

// ClearDetailHTML clears the value of the "detail_html" field.
func (pduo *PublicationDetailUpdateOne) ClearDetailHTML() *PublicationDetailUpdateOne {
	pduo.mutation.ClearDetailHTML()
	return pduo
}

// SetDetailImg sets the "detail_img" field.
func (pduo *PublicationDetailUpdateOne) SetDetailImg(s string) *PublicationDetailUpdateOne {
	pduo.mutation.SetDetailImg(s)
	return pduo
}

// SetNillableDetailImg sets the "detail_img" field if the given value is not nil.
func (pduo *PublicationDetailUpdateOne) SetNillableDetailImg(s *string) *PublicationDetailUpdateOne {
	if s != nil {
		pduo.SetDetailImg(*s)
	}
	return pduo
}

// ClearDetailImg clears the value of the "detail_img" field.
func (pduo *PublicationDetailUpdateOne) ClearDetailImg() *PublicationDetailUpdateOne {
	pduo.mutation.ClearDetailImg()
	return pduo
}

// SetPublicationID sets the "publication_id" field.
func (pduo *PublicationDetailUpdateOne) SetPublicationID(i int) *PublicationDetailUpdateOne {
	pduo.mutation.ResetPublicationID()
	pduo.mutation.SetPublicationID(i)
	return pduo
}

// SetNillablePublicationID sets the "publication_id" field if the given value is not nil.
func (pduo *PublicationDetailUpdateOne) SetNillablePublicationID(i *int) *PublicationDetailUpdateOne {
	if i != nil {
		pduo.SetPublicationID(*i)
	}
	return pduo
}

// AddPublicationID adds i to the "publication_id" field.
func (pduo *PublicationDetailUpdateOne) AddPublicationID(i int) *PublicationDetailUpdateOne {
	pduo.mutation.AddPublicationID(i)
	return pduo
}

// ClearPublicationID clears the value of the "publication_id" field.
func (pduo *PublicationDetailUpdateOne) ClearPublicationID() *PublicationDetailUpdateOne {
	pduo.mutation.ClearPublicationID()
	return pduo
}

// Mutation returns the PublicationDetailMutation object of the builder.
func (pduo *PublicationDetailUpdateOne) Mutation() *PublicationDetailMutation {
	return pduo.mutation
}

// Where appends a list predicates to the PublicationDetailUpdate builder.
func (pduo *PublicationDetailUpdateOne) Where(ps ...predicate.PublicationDetail) *PublicationDetailUpdateOne {
	pduo.mutation.Where(ps...)
	return pduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pduo *PublicationDetailUpdateOne) Select(field string, fields ...string) *PublicationDetailUpdateOne {
	pduo.fields = append([]string{field}, fields...)
	return pduo
}

// Save executes the query and returns the updated PublicationDetail entity.
func (pduo *PublicationDetailUpdateOne) Save(ctx context.Context) (*PublicationDetail, error) {
	return withHooks(ctx, pduo.sqlSave, pduo.mutation, pduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pduo *PublicationDetailUpdateOne) SaveX(ctx context.Context) *PublicationDetail {
	node, err := pduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pduo *PublicationDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := pduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pduo *PublicationDetailUpdateOne) ExecX(ctx context.Context) {
	if err := pduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pduo *PublicationDetailUpdateOne) sqlSave(ctx context.Context) (_node *PublicationDetail, err error) {
	_spec := sqlgraph.NewUpdateSpec(publicationdetail.Table, publicationdetail.Columns, sqlgraph.NewFieldSpec(publicationdetail.FieldID, field.TypeInt))
	id, ok := pduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PublicationDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, publicationdetail.FieldID)
		for _, f := range fields {
			if !publicationdetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != publicationdetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pduo.mutation.Isbn(); ok {
		_spec.SetField(publicationdetail.FieldIsbn, field.TypeString, value)
	}
	if value, ok := pduo.mutation.DetailHTML(); ok {
		_spec.SetField(publicationdetail.FieldDetailHTML, field.TypeString, value)
	}
	if pduo.mutation.DetailHTMLCleared() {
		_spec.ClearField(publicationdetail.FieldDetailHTML, field.TypeString)
	}
	if value, ok := pduo.mutation.DetailImg(); ok {
		_spec.SetField(publicationdetail.FieldDetailImg, field.TypeString, value)
	}
	if pduo.mutation.DetailImgCleared() {
		_spec.ClearField(publicationdetail.FieldDetailImg, field.TypeString)
	}
	if value, ok := pduo.mutation.PublicationID(); ok {
		_spec.SetField(publicationdetail.FieldPublicationID, field.TypeInt, value)
	}
	if value, ok := pduo.mutation.AddedPublicationID(); ok {
		_spec.AddField(publicationdetail.FieldPublicationID, field.TypeInt, value)
	}
	if pduo.mutation.PublicationIDCleared() {
		_spec.ClearField(publicationdetail.FieldPublicationID, field.TypeInt)
	}
	_node = &PublicationDetail{config: pduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicationdetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pduo.mutation.done = true
	return _node, nil
}
