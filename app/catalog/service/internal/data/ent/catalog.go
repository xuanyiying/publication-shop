// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"github.com/go-kratos/publication-shop/app/catalog/service/internal/data/ent/catalog"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Catalog is the model entity for the Catalog schema.
type Catalog struct {
	config `json:"-"`
	// ID of the ent.
	// 分类ID
	ID int `json:"id,omitempty"`
	// 分类编码
	CatalogCode string `json:"catalog_code,omitempty"`
	// 分类名称
	CatalogName string `json:"catalog_name,omitempty"`
	// 父编码
	ParentCatalogID string `json:"parent_catalog_id,omitempty"`
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Catalog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case catalog.FieldID:
			values[i] = new(sql.NullInt64)
		case catalog.FieldCatalogCode, catalog.FieldCatalogName, catalog.FieldParentCatalogID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Catalog fields.
func (c *Catalog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case catalog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case catalog.FieldCatalogCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field catalog_code", values[i])
			} else if value.Valid {
				c.CatalogCode = value.String
			}
		case catalog.FieldCatalogName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field catalog_name", values[i])
			} else if value.Valid {
				c.CatalogName = value.String
			}
		case catalog.FieldParentCatalogID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_catalog_id", values[i])
			} else if value.Valid {
				c.ParentCatalogID = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Catalog.
// This includes values selected through modifiers, order, etc.
func (c *Catalog) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Catalog.
// Note that you need to call Catalog.Unwrap() before calling this method if this Catalog
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Catalog) Update() *CatalogUpdateOne {
	return NewCatalogClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Catalog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Catalog) Unwrap() *Catalog {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Catalog is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Catalog) String() string {
	var builder strings.Builder
	builder.WriteString("Catalog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("catalog_code=")
	builder.WriteString(c.CatalogCode)
	builder.WriteString(", ")
	builder.WriteString("catalog_name=")
	builder.WriteString(c.CatalogName)
	builder.WriteString(", ")
	builder.WriteString("parent_catalog_id=")
	builder.WriteString(c.ParentCatalogID)
	builder.WriteByte(')')
	return builder.String()
}

// Catalogs is a parsable slice of Catalog.
type Catalogs []*Catalog
