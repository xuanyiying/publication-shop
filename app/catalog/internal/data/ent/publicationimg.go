// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/publication-shop/app/catalog/ent/publicationimg"
)

// PublicationImg is the model entity for the PublicationImg schema.
type PublicationImg struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 图片地址
	ImgURL string `json:"img_url,omitempty"`
	// 图书编码
	Isbn int `json:"isbn,omitempty"`
	// ImgEncode holds the value of the "img_encode" field.
	ImgEncode string `json:"img_encode,omitempty"`
	// 出版物ID
	PublicationID int `json:"publication_id,omitempty"`
	// MainFlag holds the value of the "mainFlag" field.
	MainFlag     int32 `json:"mainFlag,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PublicationImg) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case publicationimg.FieldID, publicationimg.FieldIsbn, publicationimg.FieldPublicationID, publicationimg.FieldMainFlag:
			values[i] = new(sql.NullInt64)
		case publicationimg.FieldImgURL, publicationimg.FieldImgEncode:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PublicationImg fields.
func (pi *PublicationImg) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case publicationimg.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case publicationimg.FieldImgURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img_url", values[i])
			} else if value.Valid {
				pi.ImgURL = value.String
			}
		case publicationimg.FieldIsbn:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field isbn", values[i])
			} else if value.Valid {
				pi.Isbn = int(value.Int64)
			}
		case publicationimg.FieldImgEncode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field img_encode", values[i])
			} else if value.Valid {
				pi.ImgEncode = value.String
			}
		case publicationimg.FieldPublicationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field publication_id", values[i])
			} else if value.Valid {
				pi.PublicationID = int(value.Int64)
			}
		case publicationimg.FieldMainFlag:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mainFlag", values[i])
			} else if value.Valid {
				pi.MainFlag = int32(value.Int64)
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PublicationImg.
// This includes values selected through modifiers, order, etc.
func (pi *PublicationImg) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// Update returns a builder for updating this PublicationImg.
// Note that you need to call PublicationImg.Unwrap() before calling this method if this PublicationImg
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *PublicationImg) Update() *PublicationImgUpdateOne {
	return NewPublicationImgClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the PublicationImg entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *PublicationImg) Unwrap() *PublicationImg {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: PublicationImg is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *PublicationImg) String() string {
	var builder strings.Builder
	builder.WriteString("PublicationImg(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("img_url=")
	builder.WriteString(pi.ImgURL)
	builder.WriteString(", ")
	builder.WriteString("isbn=")
	builder.WriteString(fmt.Sprintf("%v", pi.Isbn))
	builder.WriteString(", ")
	builder.WriteString("img_encode=")
	builder.WriteString(pi.ImgEncode)
	builder.WriteString(", ")
	builder.WriteString("publication_id=")
	builder.WriteString(fmt.Sprintf("%v", pi.PublicationID))
	builder.WriteString(", ")
	builder.WriteString("mainFlag=")
	builder.WriteString(fmt.Sprintf("%v", pi.MainFlag))
	builder.WriteByte(')')
	return builder.String()
}

// PublicationImgs is a parsable slice of PublicationImg.
type PublicationImgs []*PublicationImg
