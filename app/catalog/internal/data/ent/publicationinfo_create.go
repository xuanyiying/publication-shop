// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xuanyiying/publication-shop/app/catalog/ent/publicationinfo"
)

// PublicationInfoCreate is the builder for creating a PublicationInfo entity.
type PublicationInfoCreate struct {
	config
	mutation *PublicationInfoMutation
	hooks    []Hook
}

// SetPublicationName sets the "publication_name" field.
func (pic *PublicationInfoCreate) SetPublicationName(s string) *PublicationInfoCreate {
	pic.mutation.SetPublicationName(s)
	return pic
}

// SetNillablePublicationName sets the "publication_name" field if the given value is not nil.
func (pic *PublicationInfoCreate) SetNillablePublicationName(s *string) *PublicationInfoCreate {
	if s != nil {
		pic.SetPublicationName(*s)
	}
	return pic
}

// SetOrgID sets the "org_id" field.
func (pic *PublicationInfoCreate) SetOrgID(s string) *PublicationInfoCreate {
	pic.mutation.SetOrgID(s)
	return pic
}

// SetNillableOrgID sets the "org_id" field if the given value is not nil.
func (pic *PublicationInfoCreate) SetNillableOrgID(s *string) *PublicationInfoCreate {
	if s != nil {
		pic.SetOrgID(*s)
	}
	return pic
}

// SetPublishedTimes sets the "published_times" field.
func (pic *PublicationInfoCreate) SetPublishedTimes(s string) *PublicationInfoCreate {
	pic.mutation.SetPublishedTimes(s)
	return pic
}

// SetNillablePublishedTimes sets the "published_times" field if the given value is not nil.
func (pic *PublicationInfoCreate) SetNillablePublishedTimes(s *string) *PublicationInfoCreate {
	if s != nil {
		pic.SetPublishedTimes(*s)
	}
	return pic
}

// SetPrintTimes sets the "print_times" field.
func (pic *PublicationInfoCreate) SetPrintTimes(s string) *PublicationInfoCreate {
	pic.mutation.SetPrintTimes(s)
	return pic
}

// SetNillablePrintTimes sets the "print_times" field if the given value is not nil.
func (pic *PublicationInfoCreate) SetNillablePrintTimes(s *string) *PublicationInfoCreate {
	if s != nil {
		pic.SetPrintTimes(*s)
	}
	return pic
}

// SetPrice sets the "price" field.
func (pic *PublicationInfoCreate) SetPrice(f float64) *PublicationInfoCreate {
	pic.mutation.SetPrice(f)
	return pic
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (pic *PublicationInfoCreate) SetNillablePrice(f *float64) *PublicationInfoCreate {
	if f != nil {
		pic.SetPrice(*f)
	}
	return pic
}

// SetIntroduction sets the "introduction" field.
func (pic *PublicationInfoCreate) SetIntroduction(s string) *PublicationInfoCreate {
	pic.mutation.SetIntroduction(s)
	return pic
}

// SetNillableIntroduction sets the "introduction" field if the given value is not nil.
func (pic *PublicationInfoCreate) SetNillableIntroduction(s *string) *PublicationInfoCreate {
	if s != nil {
		pic.SetIntroduction(*s)
	}
	return pic
}

// SetWordCount sets the "word_count" field.
func (pic *PublicationInfoCreate) SetWordCount(s string) *PublicationInfoCreate {
	pic.mutation.SetWordCount(s)
	return pic
}

// SetNillableWordCount sets the "word_count" field if the given value is not nil.
func (pic *PublicationInfoCreate) SetNillableWordCount(s *string) *PublicationInfoCreate {
	if s != nil {
		pic.SetWordCount(*s)
	}
	return pic
}

// SetIsbn sets the "isbn" field.
func (pic *PublicationInfoCreate) SetIsbn(s string) *PublicationInfoCreate {
	pic.mutation.SetIsbn(s)
	return pic
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (pic *PublicationInfoCreate) SetNillableIsbn(s *string) *PublicationInfoCreate {
	if s != nil {
		pic.SetIsbn(*s)
	}
	return pic
}

// SetStorageBy sets the "storage_by" field.
func (pic *PublicationInfoCreate) SetStorageBy(s string) *PublicationInfoCreate {
	pic.mutation.SetStorageBy(s)
	return pic
}

// SetNillableStorageBy sets the "storage_by" field if the given value is not nil.
func (pic *PublicationInfoCreate) SetNillableStorageBy(s *string) *PublicationInfoCreate {
	if s != nil {
		pic.SetStorageBy(*s)
	}
	return pic
}

// SetStorageAt sets the "storage_at" field.
func (pic *PublicationInfoCreate) SetStorageAt(t time.Time) *PublicationInfoCreate {
	pic.mutation.SetStorageAt(t)
	return pic
}

// SetNillableStorageAt sets the "storage_at" field if the given value is not nil.
func (pic *PublicationInfoCreate) SetNillableStorageAt(t *time.Time) *PublicationInfoCreate {
	if t != nil {
		pic.SetStorageAt(*t)
	}
	return pic
}

// SetModifiedBy sets the "modified_by" field.
func (pic *PublicationInfoCreate) SetModifiedBy(s string) *PublicationInfoCreate {
	pic.mutation.SetModifiedBy(s)
	return pic
}

// SetNillableModifiedBy sets the "modified_by" field if the given value is not nil.
func (pic *PublicationInfoCreate) SetNillableModifiedBy(s *string) *PublicationInfoCreate {
	if s != nil {
		pic.SetModifiedBy(*s)
	}
	return pic
}

// SetCreatedAt sets the "created_at" field.
func (pic *PublicationInfoCreate) SetCreatedAt(t time.Time) *PublicationInfoCreate {
	pic.mutation.SetCreatedAt(t)
	return pic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pic *PublicationInfoCreate) SetNillableCreatedAt(t *time.Time) *PublicationInfoCreate {
	if t != nil {
		pic.SetCreatedAt(*t)
	}
	return pic
}

// SetModifiedAt sets the "modified_at" field.
func (pic *PublicationInfoCreate) SetModifiedAt(t time.Time) *PublicationInfoCreate {
	pic.mutation.SetModifiedAt(t)
	return pic
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (pic *PublicationInfoCreate) SetNillableModifiedAt(t *time.Time) *PublicationInfoCreate {
	if t != nil {
		pic.SetModifiedAt(*t)
	}
	return pic
}

// SetID sets the "id" field.
func (pic *PublicationInfoCreate) SetID(i int) *PublicationInfoCreate {
	pic.mutation.SetID(i)
	return pic
}

// Mutation returns the PublicationInfoMutation object of the builder.
func (pic *PublicationInfoCreate) Mutation() *PublicationInfoMutation {
	return pic.mutation
}

// Save creates the PublicationInfo in the database.
func (pic *PublicationInfoCreate) Save(ctx context.Context) (*PublicationInfo, error) {
	return withHooks(ctx, pic.sqlSave, pic.mutation, pic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pic *PublicationInfoCreate) SaveX(ctx context.Context) *PublicationInfo {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *PublicationInfoCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *PublicationInfoCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *PublicationInfoCreate) check() error {
	return nil
}

func (pic *PublicationInfoCreate) sqlSave(ctx context.Context) (*PublicationInfo, error) {
	if err := pic.check(); err != nil {
		return nil, err
	}
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pic.mutation.id = &_node.ID
	pic.mutation.done = true
	return _node, nil
}

func (pic *PublicationInfoCreate) createSpec() (*PublicationInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &PublicationInfo{config: pic.config}
		_spec = sqlgraph.NewCreateSpec(publicationinfo.Table, sqlgraph.NewFieldSpec(publicationinfo.FieldID, field.TypeInt))
	)
	if id, ok := pic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pic.mutation.PublicationName(); ok {
		_spec.SetField(publicationinfo.FieldPublicationName, field.TypeString, value)
		_node.PublicationName = value
	}
	if value, ok := pic.mutation.OrgID(); ok {
		_spec.SetField(publicationinfo.FieldOrgID, field.TypeString, value)
		_node.OrgID = value
	}
	if value, ok := pic.mutation.PublishedTimes(); ok {
		_spec.SetField(publicationinfo.FieldPublishedTimes, field.TypeString, value)
		_node.PublishedTimes = value
	}
	if value, ok := pic.mutation.PrintTimes(); ok {
		_spec.SetField(publicationinfo.FieldPrintTimes, field.TypeString, value)
		_node.PrintTimes = value
	}
	if value, ok := pic.mutation.Price(); ok {
		_spec.SetField(publicationinfo.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := pic.mutation.Introduction(); ok {
		_spec.SetField(publicationinfo.FieldIntroduction, field.TypeString, value)
		_node.Introduction = value
	}
	if value, ok := pic.mutation.WordCount(); ok {
		_spec.SetField(publicationinfo.FieldWordCount, field.TypeString, value)
		_node.WordCount = value
	}
	if value, ok := pic.mutation.Isbn(); ok {
		_spec.SetField(publicationinfo.FieldIsbn, field.TypeString, value)
		_node.Isbn = value
	}
	if value, ok := pic.mutation.StorageBy(); ok {
		_spec.SetField(publicationinfo.FieldStorageBy, field.TypeString, value)
		_node.StorageBy = value
	}
	if value, ok := pic.mutation.StorageAt(); ok {
		_spec.SetField(publicationinfo.FieldStorageAt, field.TypeTime, value)
		_node.StorageAt = value
	}
	if value, ok := pic.mutation.ModifiedBy(); ok {
		_spec.SetField(publicationinfo.FieldModifiedBy, field.TypeString, value)
		_node.ModifiedBy = value
	}
	if value, ok := pic.mutation.CreatedAt(); ok {
		_spec.SetField(publicationinfo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pic.mutation.ModifiedAt(); ok {
		_spec.SetField(publicationinfo.FieldModifiedAt, field.TypeTime, value)
		_node.ModifiedAt = value
	}
	return _node, _spec
}

// PublicationInfoCreateBulk is the builder for creating many PublicationInfo entities in bulk.
type PublicationInfoCreateBulk struct {
	config
	err      error
	builders []*PublicationInfoCreate
}

// Save creates the PublicationInfo entities in the database.
func (picb *PublicationInfoCreateBulk) Save(ctx context.Context) ([]*PublicationInfo, error) {
	if picb.err != nil {
		return nil, picb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*PublicationInfo, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PublicationInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *PublicationInfoCreateBulk) SaveX(ctx context.Context) []*PublicationInfo {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *PublicationInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *PublicationInfoCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}
