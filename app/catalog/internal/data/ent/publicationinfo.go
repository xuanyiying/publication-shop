// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/xuanyiying/publication-shop/app/catalog/ent/publicationinfo"
)

// PublicationInfo is the model entity for the PublicationInfo schema.
type PublicationInfo struct {
	config `json:"-"`
	// ID of the ent.
	// 出版物ID
	ID int `json:"id,omitempty"`
	// 出版物名称
	PublicationName string `json:"publication_name,omitempty"`
	// 出版单位编码
	OrgID string `json:"org_id,omitempty"`
	// 出版物版次
	PublishedTimes string `json:"published_times,omitempty"`
	// 出版物印次
	PrintTimes string `json:"print_times,omitempty"`
	// 出版物单价(元)
	Price float64 `json:"price,omitempty"`
	// 出版物内容简介
	Introduction string `json:"introduction,omitempty"`
	// 出版物字数(千字)
	WordCount string `json:"word_count,omitempty"`
	// 索书号
	Isbn string `json:"isbn,omitempty"`
	// 入库用户编码
	StorageBy string `json:"storage_by,omitempty"`
	// 出版物入库日期
	StorageAt time.Time `json:"storage_at,omitempty"`
	// 更新用户编码
	ModifiedBy string `json:"modified_by,omitempty"`
	// 出版物更新日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 出版物更新日期
	ModifiedAt   time.Time `json:"modified_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PublicationInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case publicationinfo.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case publicationinfo.FieldID:
			values[i] = new(sql.NullInt64)
		case publicationinfo.FieldPublicationName, publicationinfo.FieldOrgID, publicationinfo.FieldPublishedTimes, publicationinfo.FieldPrintTimes, publicationinfo.FieldIntroduction, publicationinfo.FieldWordCount, publicationinfo.FieldIsbn, publicationinfo.FieldStorageBy, publicationinfo.FieldModifiedBy:
			values[i] = new(sql.NullString)
		case publicationinfo.FieldStorageAt, publicationinfo.FieldCreatedAt, publicationinfo.FieldModifiedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PublicationInfo fields.
func (pi *PublicationInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case publicationinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case publicationinfo.FieldPublicationName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field publication_name", values[i])
			} else if value.Valid {
				pi.PublicationName = value.String
			}
		case publicationinfo.FieldOrgID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field org_id", values[i])
			} else if value.Valid {
				pi.OrgID = value.String
			}
		case publicationinfo.FieldPublishedTimes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field published_times", values[i])
			} else if value.Valid {
				pi.PublishedTimes = value.String
			}
		case publicationinfo.FieldPrintTimes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field print_times", values[i])
			} else if value.Valid {
				pi.PrintTimes = value.String
			}
		case publicationinfo.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				pi.Price = value.Float64
			}
		case publicationinfo.FieldIntroduction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field introduction", values[i])
			} else if value.Valid {
				pi.Introduction = value.String
			}
		case publicationinfo.FieldWordCount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field word_count", values[i])
			} else if value.Valid {
				pi.WordCount = value.String
			}
		case publicationinfo.FieldIsbn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isbn", values[i])
			} else if value.Valid {
				pi.Isbn = value.String
			}
		case publicationinfo.FieldStorageBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field storage_by", values[i])
			} else if value.Valid {
				pi.StorageBy = value.String
			}
		case publicationinfo.FieldStorageAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field storage_at", values[i])
			} else if value.Valid {
				pi.StorageAt = value.Time
			}
		case publicationinfo.FieldModifiedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field modified_by", values[i])
			} else if value.Valid {
				pi.ModifiedBy = value.String
			}
		case publicationinfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pi.CreatedAt = value.Time
			}
		case publicationinfo.FieldModifiedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modified_at", values[i])
			} else if value.Valid {
				pi.ModifiedAt = value.Time
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PublicationInfo.
// This includes values selected through modifiers, order, etc.
func (pi *PublicationInfo) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// Update returns a builder for updating this PublicationInfo.
// Note that you need to call PublicationInfo.Unwrap() before calling this method if this PublicationInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *PublicationInfo) Update() *PublicationInfoUpdateOne {
	return NewPublicationInfoClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the PublicationInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *PublicationInfo) Unwrap() *PublicationInfo {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: PublicationInfo is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *PublicationInfo) String() string {
	var builder strings.Builder
	builder.WriteString("PublicationInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("publication_name=")
	builder.WriteString(pi.PublicationName)
	builder.WriteString(", ")
	builder.WriteString("org_id=")
	builder.WriteString(pi.OrgID)
	builder.WriteString(", ")
	builder.WriteString("published_times=")
	builder.WriteString(pi.PublishedTimes)
	builder.WriteString(", ")
	builder.WriteString("print_times=")
	builder.WriteString(pi.PrintTimes)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", pi.Price))
	builder.WriteString(", ")
	builder.WriteString("introduction=")
	builder.WriteString(pi.Introduction)
	builder.WriteString(", ")
	builder.WriteString("word_count=")
	builder.WriteString(pi.WordCount)
	builder.WriteString(", ")
	builder.WriteString("isbn=")
	builder.WriteString(pi.Isbn)
	builder.WriteString(", ")
	builder.WriteString("storage_by=")
	builder.WriteString(pi.StorageBy)
	builder.WriteString(", ")
	builder.WriteString("storage_at=")
	builder.WriteString(pi.StorageAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("modified_by=")
	builder.WriteString(pi.ModifiedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("modified_at=")
	builder.WriteString(pi.ModifiedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PublicationInfos is a parsable slice of PublicationInfo.
type PublicationInfos []*PublicationInfo
