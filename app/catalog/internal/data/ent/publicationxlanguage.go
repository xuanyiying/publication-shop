// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/xuanyiying/publication-shop/app/catalog/ent/publicationxlanguage"
)

// PublicationXLanguage is the model entity for the PublicationXLanguage schema.
type PublicationXLanguage struct {
	config `json:"-"`
	// ID of the ent.
	// 出版物语言关系ID
	ID int `json:"id,omitempty"`
	// 详情ID
	LanguageID int `json:"language_id,omitempty"`
	// 国际标准书号
	Isbn string `json:"isbn,omitempty"`
	// 详情
	LanguageName string `json:"language_name,omitempty"`
	// 出版物ID
	PublicationID int `json:"publication_id,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PublicationXLanguage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case publicationxlanguage.FieldID, publicationxlanguage.FieldLanguageID, publicationxlanguage.FieldPublicationID:
			values[i] = new(sql.NullInt64)
		case publicationxlanguage.FieldIsbn, publicationxlanguage.FieldLanguageName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PublicationXLanguage fields.
func (px *PublicationXLanguage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case publicationxlanguage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			px.ID = int(value.Int64)
		case publicationxlanguage.FieldLanguageID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field language_id", values[i])
			} else if value.Valid {
				px.LanguageID = int(value.Int64)
			}
		case publicationxlanguage.FieldIsbn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isbn", values[i])
			} else if value.Valid {
				px.Isbn = value.String
			}
		case publicationxlanguage.FieldLanguageName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language_name", values[i])
			} else if value.Valid {
				px.LanguageName = value.String
			}
		case publicationxlanguage.FieldPublicationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field publication_id", values[i])
			} else if value.Valid {
				px.PublicationID = int(value.Int64)
			}
		default:
			px.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PublicationXLanguage.
// This includes values selected through modifiers, order, etc.
func (px *PublicationXLanguage) Value(name string) (ent.Value, error) {
	return px.selectValues.Get(name)
}

// Update returns a builder for updating this PublicationXLanguage.
// Note that you need to call PublicationXLanguage.Unwrap() before calling this method if this PublicationXLanguage
// was returned from a transaction, and the transaction was committed or rolled back.
func (px *PublicationXLanguage) Update() *PublicationXLanguageUpdateOne {
	return NewPublicationXLanguageClient(px.config).UpdateOne(px)
}

// Unwrap unwraps the PublicationXLanguage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (px *PublicationXLanguage) Unwrap() *PublicationXLanguage {
	_tx, ok := px.config.driver.(*txDriver)
	if !ok {
		panic("ent: PublicationXLanguage is not a transactional entity")
	}
	px.config.driver = _tx.drv
	return px
}

// String implements the fmt.Stringer.
func (px *PublicationXLanguage) String() string {
	var builder strings.Builder
	builder.WriteString("PublicationXLanguage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", px.ID))
	builder.WriteString("language_id=")
	builder.WriteString(fmt.Sprintf("%v", px.LanguageID))
	builder.WriteString(", ")
	builder.WriteString("isbn=")
	builder.WriteString(px.Isbn)
	builder.WriteString(", ")
	builder.WriteString("language_name=")
	builder.WriteString(px.LanguageName)
	builder.WriteString(", ")
	builder.WriteString("publication_id=")
	builder.WriteString(fmt.Sprintf("%v", px.PublicationID))
	builder.WriteByte(')')
	return builder.String()
}

// PublicationXLanguages is a parsable slice of PublicationXLanguage.
type PublicationXLanguages []*PublicationXLanguage
