// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xuanyiying/publication-shop/app/catalog/ent/predicate"
	"github.com/xuanyiying/publication-shop/app/catalog/ent/publicationauthor"
)

// PublicationAuthorUpdate is the builder for updating PublicationAuthor entities.
type PublicationAuthorUpdate struct {
	config
	hooks    []Hook
	mutation *PublicationAuthorMutation
}

// Where appends a list predicates to the PublicationAuthorUpdate builder.
func (pau *PublicationAuthorUpdate) Where(ps ...predicate.PublicationAuthor) *PublicationAuthorUpdate {
	pau.mutation.Where(ps...)
	return pau
}

// SetIsbn sets the "isbn" field.
func (pau *PublicationAuthorUpdate) SetIsbn(s string) *PublicationAuthorUpdate {
	pau.mutation.SetIsbn(s)
	return pau
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (pau *PublicationAuthorUpdate) SetNillableIsbn(s *string) *PublicationAuthorUpdate {
	if s != nil {
		pau.SetIsbn(*s)
	}
	return pau
}

// SetPublicationID sets the "publication_id" field.
func (pau *PublicationAuthorUpdate) SetPublicationID(i int) *PublicationAuthorUpdate {
	pau.mutation.ResetPublicationID()
	pau.mutation.SetPublicationID(i)
	return pau
}

// SetNillablePublicationID sets the "publication_id" field if the given value is not nil.
func (pau *PublicationAuthorUpdate) SetNillablePublicationID(i *int) *PublicationAuthorUpdate {
	if i != nil {
		pau.SetPublicationID(*i)
	}
	return pau
}

// AddPublicationID adds i to the "publication_id" field.
func (pau *PublicationAuthorUpdate) AddPublicationID(i int) *PublicationAuthorUpdate {
	pau.mutation.AddPublicationID(i)
	return pau
}

// ClearPublicationID clears the value of the "publication_id" field.
func (pau *PublicationAuthorUpdate) ClearPublicationID() *PublicationAuthorUpdate {
	pau.mutation.ClearPublicationID()
	return pau
}

// SetAuthor sets the "author" field.
func (pau *PublicationAuthorUpdate) SetAuthor(s string) *PublicationAuthorUpdate {
	pau.mutation.SetAuthor(s)
	return pau
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (pau *PublicationAuthorUpdate) SetNillableAuthor(s *string) *PublicationAuthorUpdate {
	if s != nil {
		pau.SetAuthor(*s)
	}
	return pau
}

// ClearAuthor clears the value of the "author" field.
func (pau *PublicationAuthorUpdate) ClearAuthor() *PublicationAuthorUpdate {
	pau.mutation.ClearAuthor()
	return pau
}

// SetAuthorAbout sets the "author_about" field.
func (pau *PublicationAuthorUpdate) SetAuthorAbout(s string) *PublicationAuthorUpdate {
	pau.mutation.SetAuthorAbout(s)
	return pau
}

// SetNillableAuthorAbout sets the "author_about" field if the given value is not nil.
func (pau *PublicationAuthorUpdate) SetNillableAuthorAbout(s *string) *PublicationAuthorUpdate {
	if s != nil {
		pau.SetAuthorAbout(*s)
	}
	return pau
}

// ClearAuthorAbout clears the value of the "author_about" field.
func (pau *PublicationAuthorUpdate) ClearAuthorAbout() *PublicationAuthorUpdate {
	pau.mutation.ClearAuthorAbout()
	return pau
}

// Mutation returns the PublicationAuthorMutation object of the builder.
func (pau *PublicationAuthorUpdate) Mutation() *PublicationAuthorMutation {
	return pau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pau *PublicationAuthorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pau.sqlSave, pau.mutation, pau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pau *PublicationAuthorUpdate) SaveX(ctx context.Context) int {
	affected, err := pau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pau *PublicationAuthorUpdate) Exec(ctx context.Context) error {
	_, err := pau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pau *PublicationAuthorUpdate) ExecX(ctx context.Context) {
	if err := pau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pau *PublicationAuthorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(publicationauthor.Table, publicationauthor.Columns, sqlgraph.NewFieldSpec(publicationauthor.FieldID, field.TypeInt))
	if ps := pau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pau.mutation.Isbn(); ok {
		_spec.SetField(publicationauthor.FieldIsbn, field.TypeString, value)
	}
	if value, ok := pau.mutation.PublicationID(); ok {
		_spec.SetField(publicationauthor.FieldPublicationID, field.TypeInt, value)
	}
	if value, ok := pau.mutation.AddedPublicationID(); ok {
		_spec.AddField(publicationauthor.FieldPublicationID, field.TypeInt, value)
	}
	if pau.mutation.PublicationIDCleared() {
		_spec.ClearField(publicationauthor.FieldPublicationID, field.TypeInt)
	}
	if value, ok := pau.mutation.Author(); ok {
		_spec.SetField(publicationauthor.FieldAuthor, field.TypeString, value)
	}
	if pau.mutation.AuthorCleared() {
		_spec.ClearField(publicationauthor.FieldAuthor, field.TypeString)
	}
	if value, ok := pau.mutation.AuthorAbout(); ok {
		_spec.SetField(publicationauthor.FieldAuthorAbout, field.TypeString, value)
	}
	if pau.mutation.AuthorAboutCleared() {
		_spec.ClearField(publicationauthor.FieldAuthorAbout, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicationauthor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pau.mutation.done = true
	return n, nil
}

// PublicationAuthorUpdateOne is the builder for updating a single PublicationAuthor entity.
type PublicationAuthorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PublicationAuthorMutation
}

// SetIsbn sets the "isbn" field.
func (pauo *PublicationAuthorUpdateOne) SetIsbn(s string) *PublicationAuthorUpdateOne {
	pauo.mutation.SetIsbn(s)
	return pauo
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (pauo *PublicationAuthorUpdateOne) SetNillableIsbn(s *string) *PublicationAuthorUpdateOne {
	if s != nil {
		pauo.SetIsbn(*s)
	}
	return pauo
}

// SetPublicationID sets the "publication_id" field.
func (pauo *PublicationAuthorUpdateOne) SetPublicationID(i int) *PublicationAuthorUpdateOne {
	pauo.mutation.ResetPublicationID()
	pauo.mutation.SetPublicationID(i)
	return pauo
}

// SetNillablePublicationID sets the "publication_id" field if the given value is not nil.
func (pauo *PublicationAuthorUpdateOne) SetNillablePublicationID(i *int) *PublicationAuthorUpdateOne {
	if i != nil {
		pauo.SetPublicationID(*i)
	}
	return pauo
}

// AddPublicationID adds i to the "publication_id" field.
func (pauo *PublicationAuthorUpdateOne) AddPublicationID(i int) *PublicationAuthorUpdateOne {
	pauo.mutation.AddPublicationID(i)
	return pauo
}

// ClearPublicationID clears the value of the "publication_id" field.
func (pauo *PublicationAuthorUpdateOne) ClearPublicationID() *PublicationAuthorUpdateOne {
	pauo.mutation.ClearPublicationID()
	return pauo
}

// SetAuthor sets the "author" field.
func (pauo *PublicationAuthorUpdateOne) SetAuthor(s string) *PublicationAuthorUpdateOne {
	pauo.mutation.SetAuthor(s)
	return pauo
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (pauo *PublicationAuthorUpdateOne) SetNillableAuthor(s *string) *PublicationAuthorUpdateOne {
	if s != nil {
		pauo.SetAuthor(*s)
	}
	return pauo
}

// ClearAuthor clears the value of the "author" field.
func (pauo *PublicationAuthorUpdateOne) ClearAuthor() *PublicationAuthorUpdateOne {
	pauo.mutation.ClearAuthor()
	return pauo
}

// SetAuthorAbout sets the "author_about" field.
func (pauo *PublicationAuthorUpdateOne) SetAuthorAbout(s string) *PublicationAuthorUpdateOne {
	pauo.mutation.SetAuthorAbout(s)
	return pauo
}

// SetNillableAuthorAbout sets the "author_about" field if the given value is not nil.
func (pauo *PublicationAuthorUpdateOne) SetNillableAuthorAbout(s *string) *PublicationAuthorUpdateOne {
	if s != nil {
		pauo.SetAuthorAbout(*s)
	}
	return pauo
}

// ClearAuthorAbout clears the value of the "author_about" field.
func (pauo *PublicationAuthorUpdateOne) ClearAuthorAbout() *PublicationAuthorUpdateOne {
	pauo.mutation.ClearAuthorAbout()
	return pauo
}

// Mutation returns the PublicationAuthorMutation object of the builder.
func (pauo *PublicationAuthorUpdateOne) Mutation() *PublicationAuthorMutation {
	return pauo.mutation
}

// Where appends a list predicates to the PublicationAuthorUpdate builder.
func (pauo *PublicationAuthorUpdateOne) Where(ps ...predicate.PublicationAuthor) *PublicationAuthorUpdateOne {
	pauo.mutation.Where(ps...)
	return pauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pauo *PublicationAuthorUpdateOne) Select(field string, fields ...string) *PublicationAuthorUpdateOne {
	pauo.fields = append([]string{field}, fields...)
	return pauo
}

// Save executes the query and returns the updated PublicationAuthor entity.
func (pauo *PublicationAuthorUpdateOne) Save(ctx context.Context) (*PublicationAuthor, error) {
	return withHooks(ctx, pauo.sqlSave, pauo.mutation, pauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pauo *PublicationAuthorUpdateOne) SaveX(ctx context.Context) *PublicationAuthor {
	node, err := pauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pauo *PublicationAuthorUpdateOne) Exec(ctx context.Context) error {
	_, err := pauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pauo *PublicationAuthorUpdateOne) ExecX(ctx context.Context) {
	if err := pauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pauo *PublicationAuthorUpdateOne) sqlSave(ctx context.Context) (_node *PublicationAuthor, err error) {
	_spec := sqlgraph.NewUpdateSpec(publicationauthor.Table, publicationauthor.Columns, sqlgraph.NewFieldSpec(publicationauthor.FieldID, field.TypeInt))
	id, ok := pauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PublicationAuthor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, publicationauthor.FieldID)
		for _, f := range fields {
			if !publicationauthor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != publicationauthor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pauo.mutation.Isbn(); ok {
		_spec.SetField(publicationauthor.FieldIsbn, field.TypeString, value)
	}
	if value, ok := pauo.mutation.PublicationID(); ok {
		_spec.SetField(publicationauthor.FieldPublicationID, field.TypeInt, value)
	}
	if value, ok := pauo.mutation.AddedPublicationID(); ok {
		_spec.AddField(publicationauthor.FieldPublicationID, field.TypeInt, value)
	}
	if pauo.mutation.PublicationIDCleared() {
		_spec.ClearField(publicationauthor.FieldPublicationID, field.TypeInt)
	}
	if value, ok := pauo.mutation.Author(); ok {
		_spec.SetField(publicationauthor.FieldAuthor, field.TypeString, value)
	}
	if pauo.mutation.AuthorCleared() {
		_spec.ClearField(publicationauthor.FieldAuthor, field.TypeString)
	}
	if value, ok := pauo.mutation.AuthorAbout(); ok {
		_spec.SetField(publicationauthor.FieldAuthorAbout, field.TypeString, value)
	}
	if pauo.mutation.AuthorAboutCleared() {
		_spec.ClearField(publicationauthor.FieldAuthorAbout, field.TypeString)
	}
	_node = &PublicationAuthor{config: pauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicationauthor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pauo.mutation.done = true
	return _node, nil
}
