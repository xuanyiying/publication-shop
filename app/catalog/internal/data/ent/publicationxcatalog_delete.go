// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xuanyiying/publication-shop/app/catalog/ent/predicate"
	"github.com/xuanyiying/publication-shop/app/catalog/ent/publicationxcatalog"
)

// PublicationXCatalogDelete is the builder for deleting a PublicationXCatalog entity.
type PublicationXCatalogDelete struct {
	config
	hooks    []Hook
	mutation *PublicationXCatalogMutation
}

// Where appends a list predicates to the PublicationXCatalogDelete builder.
func (pxd *PublicationXCatalogDelete) Where(ps ...predicate.PublicationXCatalog) *PublicationXCatalogDelete {
	pxd.mutation.Where(ps...)
	return pxd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pxd *PublicationXCatalogDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pxd.sqlExec, pxd.mutation, pxd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pxd *PublicationXCatalogDelete) ExecX(ctx context.Context) int {
	n, err := pxd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pxd *PublicationXCatalogDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(publicationxcatalog.Table, sqlgraph.NewFieldSpec(publicationxcatalog.FieldID, field.TypeInt))
	if ps := pxd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pxd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pxd.mutation.done = true
	return affected, err
}

// PublicationXCatalogDeleteOne is the builder for deleting a single PublicationXCatalog entity.
type PublicationXCatalogDeleteOne struct {
	pxd *PublicationXCatalogDelete
}

// Where appends a list predicates to the PublicationXCatalogDelete builder.
func (pxdo *PublicationXCatalogDeleteOne) Where(ps ...predicate.PublicationXCatalog) *PublicationXCatalogDeleteOne {
	pxdo.pxd.mutation.Where(ps...)
	return pxdo
}

// Exec executes the deletion query.
func (pxdo *PublicationXCatalogDeleteOne) Exec(ctx context.Context) error {
	n, err := pxdo.pxd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{publicationxcatalog.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pxdo *PublicationXCatalogDeleteOne) ExecX(ctx context.Context) {
	if err := pxdo.Exec(ctx); err != nil {
		panic(err)
	}
}
