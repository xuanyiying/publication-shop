// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/xuanyiying/publication-shop/app/catalog/ent/predicate"
	"github.com/xuanyiying/publication-shop/app/catalog/ent/publicationxcatalog"
)

// PublicationXCatalogUpdate is the builder for updating PublicationXCatalog entities.
type PublicationXCatalogUpdate struct {
	config
	hooks    []Hook
	mutation *PublicationXCatalogMutation
}

// Where appends a list predicates to the PublicationXCatalogUpdate builder.
func (pxu *PublicationXCatalogUpdate) Where(ps ...predicate.PublicationXCatalog) *PublicationXCatalogUpdate {
	pxu.mutation.Where(ps...)
	return pxu
}

// SetCatalogID sets the "catalog_id" field.
func (pxu *PublicationXCatalogUpdate) SetCatalogID(i int) *PublicationXCatalogUpdate {
	pxu.mutation.ResetCatalogID()
	pxu.mutation.SetCatalogID(i)
	return pxu
}

// SetNillableCatalogID sets the "catalog_id" field if the given value is not nil.
func (pxu *PublicationXCatalogUpdate) SetNillableCatalogID(i *int) *PublicationXCatalogUpdate {
	if i != nil {
		pxu.SetCatalogID(*i)
	}
	return pxu
}

// AddCatalogID adds i to the "catalog_id" field.
func (pxu *PublicationXCatalogUpdate) AddCatalogID(i int) *PublicationXCatalogUpdate {
	pxu.mutation.AddCatalogID(i)
	return pxu
}

// SetIsbn sets the "isbn" field.
func (pxu *PublicationXCatalogUpdate) SetIsbn(s string) *PublicationXCatalogUpdate {
	pxu.mutation.SetIsbn(s)
	return pxu
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (pxu *PublicationXCatalogUpdate) SetNillableIsbn(s *string) *PublicationXCatalogUpdate {
	if s != nil {
		pxu.SetIsbn(*s)
	}
	return pxu
}

// SetCatalogName sets the "catalog_name" field.
func (pxu *PublicationXCatalogUpdate) SetCatalogName(s string) *PublicationXCatalogUpdate {
	pxu.mutation.SetCatalogName(s)
	return pxu
}

// SetNillableCatalogName sets the "catalog_name" field if the given value is not nil.
func (pxu *PublicationXCatalogUpdate) SetNillableCatalogName(s *string) *PublicationXCatalogUpdate {
	if s != nil {
		pxu.SetCatalogName(*s)
	}
	return pxu
}

// ClearCatalogName clears the value of the "catalog_name" field.
func (pxu *PublicationXCatalogUpdate) ClearCatalogName() *PublicationXCatalogUpdate {
	pxu.mutation.ClearCatalogName()
	return pxu
}

// SetPublicationID sets the "publication_id" field.
func (pxu *PublicationXCatalogUpdate) SetPublicationID(i int) *PublicationXCatalogUpdate {
	pxu.mutation.ResetPublicationID()
	pxu.mutation.SetPublicationID(i)
	return pxu
}

// SetNillablePublicationID sets the "publication_id" field if the given value is not nil.
func (pxu *PublicationXCatalogUpdate) SetNillablePublicationID(i *int) *PublicationXCatalogUpdate {
	if i != nil {
		pxu.SetPublicationID(*i)
	}
	return pxu
}

// AddPublicationID adds i to the "publication_id" field.
func (pxu *PublicationXCatalogUpdate) AddPublicationID(i int) *PublicationXCatalogUpdate {
	pxu.mutation.AddPublicationID(i)
	return pxu
}

// ClearPublicationID clears the value of the "publication_id" field.
func (pxu *PublicationXCatalogUpdate) ClearPublicationID() *PublicationXCatalogUpdate {
	pxu.mutation.ClearPublicationID()
	return pxu
}

// Mutation returns the PublicationXCatalogMutation object of the builder.
func (pxu *PublicationXCatalogUpdate) Mutation() *PublicationXCatalogMutation {
	return pxu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pxu *PublicationXCatalogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pxu.sqlSave, pxu.mutation, pxu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pxu *PublicationXCatalogUpdate) SaveX(ctx context.Context) int {
	affected, err := pxu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pxu *PublicationXCatalogUpdate) Exec(ctx context.Context) error {
	_, err := pxu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pxu *PublicationXCatalogUpdate) ExecX(ctx context.Context) {
	if err := pxu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pxu *PublicationXCatalogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(publicationxcatalog.Table, publicationxcatalog.Columns, sqlgraph.NewFieldSpec(publicationxcatalog.FieldID, field.TypeInt))
	if ps := pxu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pxu.mutation.CatalogID(); ok {
		_spec.SetField(publicationxcatalog.FieldCatalogID, field.TypeInt, value)
	}
	if value, ok := pxu.mutation.AddedCatalogID(); ok {
		_spec.AddField(publicationxcatalog.FieldCatalogID, field.TypeInt, value)
	}
	if value, ok := pxu.mutation.Isbn(); ok {
		_spec.SetField(publicationxcatalog.FieldIsbn, field.TypeString, value)
	}
	if value, ok := pxu.mutation.CatalogName(); ok {
		_spec.SetField(publicationxcatalog.FieldCatalogName, field.TypeString, value)
	}
	if pxu.mutation.CatalogNameCleared() {
		_spec.ClearField(publicationxcatalog.FieldCatalogName, field.TypeString)
	}
	if value, ok := pxu.mutation.PublicationID(); ok {
		_spec.SetField(publicationxcatalog.FieldPublicationID, field.TypeInt, value)
	}
	if value, ok := pxu.mutation.AddedPublicationID(); ok {
		_spec.AddField(publicationxcatalog.FieldPublicationID, field.TypeInt, value)
	}
	if pxu.mutation.PublicationIDCleared() {
		_spec.ClearField(publicationxcatalog.FieldPublicationID, field.TypeInt)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pxu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicationxcatalog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pxu.mutation.done = true
	return n, nil
}

// PublicationXCatalogUpdateOne is the builder for updating a single PublicationXCatalog entity.
type PublicationXCatalogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PublicationXCatalogMutation
}

// SetCatalogID sets the "catalog_id" field.
func (pxuo *PublicationXCatalogUpdateOne) SetCatalogID(i int) *PublicationXCatalogUpdateOne {
	pxuo.mutation.ResetCatalogID()
	pxuo.mutation.SetCatalogID(i)
	return pxuo
}

// SetNillableCatalogID sets the "catalog_id" field if the given value is not nil.
func (pxuo *PublicationXCatalogUpdateOne) SetNillableCatalogID(i *int) *PublicationXCatalogUpdateOne {
	if i != nil {
		pxuo.SetCatalogID(*i)
	}
	return pxuo
}

// AddCatalogID adds i to the "catalog_id" field.
func (pxuo *PublicationXCatalogUpdateOne) AddCatalogID(i int) *PublicationXCatalogUpdateOne {
	pxuo.mutation.AddCatalogID(i)
	return pxuo
}

// SetIsbn sets the "isbn" field.
func (pxuo *PublicationXCatalogUpdateOne) SetIsbn(s string) *PublicationXCatalogUpdateOne {
	pxuo.mutation.SetIsbn(s)
	return pxuo
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (pxuo *PublicationXCatalogUpdateOne) SetNillableIsbn(s *string) *PublicationXCatalogUpdateOne {
	if s != nil {
		pxuo.SetIsbn(*s)
	}
	return pxuo
}

// SetCatalogName sets the "catalog_name" field.
func (pxuo *PublicationXCatalogUpdateOne) SetCatalogName(s string) *PublicationXCatalogUpdateOne {
	pxuo.mutation.SetCatalogName(s)
	return pxuo
}

// SetNillableCatalogName sets the "catalog_name" field if the given value is not nil.
func (pxuo *PublicationXCatalogUpdateOne) SetNillableCatalogName(s *string) *PublicationXCatalogUpdateOne {
	if s != nil {
		pxuo.SetCatalogName(*s)
	}
	return pxuo
}

// ClearCatalogName clears the value of the "catalog_name" field.
func (pxuo *PublicationXCatalogUpdateOne) ClearCatalogName() *PublicationXCatalogUpdateOne {
	pxuo.mutation.ClearCatalogName()
	return pxuo
}

// SetPublicationID sets the "publication_id" field.
func (pxuo *PublicationXCatalogUpdateOne) SetPublicationID(i int) *PublicationXCatalogUpdateOne {
	pxuo.mutation.ResetPublicationID()
	pxuo.mutation.SetPublicationID(i)
	return pxuo
}

// SetNillablePublicationID sets the "publication_id" field if the given value is not nil.
func (pxuo *PublicationXCatalogUpdateOne) SetNillablePublicationID(i *int) *PublicationXCatalogUpdateOne {
	if i != nil {
		pxuo.SetPublicationID(*i)
	}
	return pxuo
}

// AddPublicationID adds i to the "publication_id" field.
func (pxuo *PublicationXCatalogUpdateOne) AddPublicationID(i int) *PublicationXCatalogUpdateOne {
	pxuo.mutation.AddPublicationID(i)
	return pxuo
}

// ClearPublicationID clears the value of the "publication_id" field.
func (pxuo *PublicationXCatalogUpdateOne) ClearPublicationID() *PublicationXCatalogUpdateOne {
	pxuo.mutation.ClearPublicationID()
	return pxuo
}

// Mutation returns the PublicationXCatalogMutation object of the builder.
func (pxuo *PublicationXCatalogUpdateOne) Mutation() *PublicationXCatalogMutation {
	return pxuo.mutation
}

// Where appends a list predicates to the PublicationXCatalogUpdate builder.
func (pxuo *PublicationXCatalogUpdateOne) Where(ps ...predicate.PublicationXCatalog) *PublicationXCatalogUpdateOne {
	pxuo.mutation.Where(ps...)
	return pxuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pxuo *PublicationXCatalogUpdateOne) Select(field string, fields ...string) *PublicationXCatalogUpdateOne {
	pxuo.fields = append([]string{field}, fields...)
	return pxuo
}

// Save executes the query and returns the updated PublicationXCatalog entity.
func (pxuo *PublicationXCatalogUpdateOne) Save(ctx context.Context) (*PublicationXCatalog, error) {
	return withHooks(ctx, pxuo.sqlSave, pxuo.mutation, pxuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pxuo *PublicationXCatalogUpdateOne) SaveX(ctx context.Context) *PublicationXCatalog {
	node, err := pxuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pxuo *PublicationXCatalogUpdateOne) Exec(ctx context.Context) error {
	_, err := pxuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pxuo *PublicationXCatalogUpdateOne) ExecX(ctx context.Context) {
	if err := pxuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pxuo *PublicationXCatalogUpdateOne) sqlSave(ctx context.Context) (_node *PublicationXCatalog, err error) {
	_spec := sqlgraph.NewUpdateSpec(publicationxcatalog.Table, publicationxcatalog.Columns, sqlgraph.NewFieldSpec(publicationxcatalog.FieldID, field.TypeInt))
	id, ok := pxuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PublicationXCatalog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pxuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, publicationxcatalog.FieldID)
		for _, f := range fields {
			if !publicationxcatalog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != publicationxcatalog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pxuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pxuo.mutation.CatalogID(); ok {
		_spec.SetField(publicationxcatalog.FieldCatalogID, field.TypeInt, value)
	}
	if value, ok := pxuo.mutation.AddedCatalogID(); ok {
		_spec.AddField(publicationxcatalog.FieldCatalogID, field.TypeInt, value)
	}
	if value, ok := pxuo.mutation.Isbn(); ok {
		_spec.SetField(publicationxcatalog.FieldIsbn, field.TypeString, value)
	}
	if value, ok := pxuo.mutation.CatalogName(); ok {
		_spec.SetField(publicationxcatalog.FieldCatalogName, field.TypeString, value)
	}
	if pxuo.mutation.CatalogNameCleared() {
		_spec.ClearField(publicationxcatalog.FieldCatalogName, field.TypeString)
	}
	if value, ok := pxuo.mutation.PublicationID(); ok {
		_spec.SetField(publicationxcatalog.FieldPublicationID, field.TypeInt, value)
	}
	if value, ok := pxuo.mutation.AddedPublicationID(); ok {
		_spec.AddField(publicationxcatalog.FieldPublicationID, field.TypeInt, value)
	}
	if pxuo.mutation.PublicationIDCleared() {
		_spec.ClearField(publicationxcatalog.FieldPublicationID, field.TypeInt)
	}
	_node = &PublicationXCatalog{config: pxuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pxuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicationxcatalog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pxuo.mutation.done = true
	return _node, nil
}
