// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/publication-shop/app/catalog/ent/predicate"
	"github.com/publication-shop/app/catalog/ent/publicationimg"
)

// PublicationImgUpdate is the builder for updating PublicationImg entities.
type PublicationImgUpdate struct {
	config
	hooks    []Hook
	mutation *PublicationImgMutation
}

// Where appends a list predicates to the PublicationImgUpdate builder.
func (piu *PublicationImgUpdate) Where(ps ...predicate.PublicationImg) *PublicationImgUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetImgURL sets the "img_url" field.
func (piu *PublicationImgUpdate) SetImgURL(s string) *PublicationImgUpdate {
	piu.mutation.SetImgURL(s)
	return piu
}

// SetNillableImgURL sets the "img_url" field if the given value is not nil.
func (piu *PublicationImgUpdate) SetNillableImgURL(s *string) *PublicationImgUpdate {
	if s != nil {
		piu.SetImgURL(*s)
	}
	return piu
}

// ClearImgURL clears the value of the "img_url" field.
func (piu *PublicationImgUpdate) ClearImgURL() *PublicationImgUpdate {
	piu.mutation.ClearImgURL()
	return piu
}

// SetIsbn sets the "isbn" field.
func (piu *PublicationImgUpdate) SetIsbn(i int) *PublicationImgUpdate {
	piu.mutation.ResetIsbn()
	piu.mutation.SetIsbn(i)
	return piu
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (piu *PublicationImgUpdate) SetNillableIsbn(i *int) *PublicationImgUpdate {
	if i != nil {
		piu.SetIsbn(*i)
	}
	return piu
}

// AddIsbn adds i to the "isbn" field.
func (piu *PublicationImgUpdate) AddIsbn(i int) *PublicationImgUpdate {
	piu.mutation.AddIsbn(i)
	return piu
}

// SetImgEncode sets the "img_encode" field.
func (piu *PublicationImgUpdate) SetImgEncode(s string) *PublicationImgUpdate {
	piu.mutation.SetImgEncode(s)
	return piu
}

// SetNillableImgEncode sets the "img_encode" field if the given value is not nil.
func (piu *PublicationImgUpdate) SetNillableImgEncode(s *string) *PublicationImgUpdate {
	if s != nil {
		piu.SetImgEncode(*s)
	}
	return piu
}

// ClearImgEncode clears the value of the "img_encode" field.
func (piu *PublicationImgUpdate) ClearImgEncode() *PublicationImgUpdate {
	piu.mutation.ClearImgEncode()
	return piu
}

// SetPublicationID sets the "publication_id" field.
func (piu *PublicationImgUpdate) SetPublicationID(i int) *PublicationImgUpdate {
	piu.mutation.ResetPublicationID()
	piu.mutation.SetPublicationID(i)
	return piu
}

// SetNillablePublicationID sets the "publication_id" field if the given value is not nil.
func (piu *PublicationImgUpdate) SetNillablePublicationID(i *int) *PublicationImgUpdate {
	if i != nil {
		piu.SetPublicationID(*i)
	}
	return piu
}

// AddPublicationID adds i to the "publication_id" field.
func (piu *PublicationImgUpdate) AddPublicationID(i int) *PublicationImgUpdate {
	piu.mutation.AddPublicationID(i)
	return piu
}

// ClearPublicationID clears the value of the "publication_id" field.
func (piu *PublicationImgUpdate) ClearPublicationID() *PublicationImgUpdate {
	piu.mutation.ClearPublicationID()
	return piu
}

// SetMainFlag sets the "mainFlag" field.
func (piu *PublicationImgUpdate) SetMainFlag(i int32) *PublicationImgUpdate {
	piu.mutation.ResetMainFlag()
	piu.mutation.SetMainFlag(i)
	return piu
}

// SetNillableMainFlag sets the "mainFlag" field if the given value is not nil.
func (piu *PublicationImgUpdate) SetNillableMainFlag(i *int32) *PublicationImgUpdate {
	if i != nil {
		piu.SetMainFlag(*i)
	}
	return piu
}

// AddMainFlag adds i to the "mainFlag" field.
func (piu *PublicationImgUpdate) AddMainFlag(i int32) *PublicationImgUpdate {
	piu.mutation.AddMainFlag(i)
	return piu
}

// ClearMainFlag clears the value of the "mainFlag" field.
func (piu *PublicationImgUpdate) ClearMainFlag() *PublicationImgUpdate {
	piu.mutation.ClearMainFlag()
	return piu
}

// Mutation returns the PublicationImgMutation object of the builder.
func (piu *PublicationImgUpdate) Mutation() *PublicationImgMutation {
	return piu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *PublicationImgUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *PublicationImgUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *PublicationImgUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *PublicationImgUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piu *PublicationImgUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(publicationimg.Table, publicationimg.Columns, sqlgraph.NewFieldSpec(publicationimg.FieldID, field.TypeInt))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.ImgURL(); ok {
		_spec.SetField(publicationimg.FieldImgURL, field.TypeString, value)
	}
	if piu.mutation.ImgURLCleared() {
		_spec.ClearField(publicationimg.FieldImgURL, field.TypeString)
	}
	if value, ok := piu.mutation.Isbn(); ok {
		_spec.SetField(publicationimg.FieldIsbn, field.TypeInt, value)
	}
	if value, ok := piu.mutation.AddedIsbn(); ok {
		_spec.AddField(publicationimg.FieldIsbn, field.TypeInt, value)
	}
	if value, ok := piu.mutation.ImgEncode(); ok {
		_spec.SetField(publicationimg.FieldImgEncode, field.TypeString, value)
	}
	if piu.mutation.ImgEncodeCleared() {
		_spec.ClearField(publicationimg.FieldImgEncode, field.TypeString)
	}
	if value, ok := piu.mutation.PublicationID(); ok {
		_spec.SetField(publicationimg.FieldPublicationID, field.TypeInt, value)
	}
	if value, ok := piu.mutation.AddedPublicationID(); ok {
		_spec.AddField(publicationimg.FieldPublicationID, field.TypeInt, value)
	}
	if piu.mutation.PublicationIDCleared() {
		_spec.ClearField(publicationimg.FieldPublicationID, field.TypeInt)
	}
	if value, ok := piu.mutation.MainFlag(); ok {
		_spec.SetField(publicationimg.FieldMainFlag, field.TypeInt32, value)
	}
	if value, ok := piu.mutation.AddedMainFlag(); ok {
		_spec.AddField(publicationimg.FieldMainFlag, field.TypeInt32, value)
	}
	if piu.mutation.MainFlagCleared() {
		_spec.ClearField(publicationimg.FieldMainFlag, field.TypeInt32)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicationimg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// PublicationImgUpdateOne is the builder for updating a single PublicationImg entity.
type PublicationImgUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PublicationImgMutation
}

// SetImgURL sets the "img_url" field.
func (piuo *PublicationImgUpdateOne) SetImgURL(s string) *PublicationImgUpdateOne {
	piuo.mutation.SetImgURL(s)
	return piuo
}

// SetNillableImgURL sets the "img_url" field if the given value is not nil.
func (piuo *PublicationImgUpdateOne) SetNillableImgURL(s *string) *PublicationImgUpdateOne {
	if s != nil {
		piuo.SetImgURL(*s)
	}
	return piuo
}

// ClearImgURL clears the value of the "img_url" field.
func (piuo *PublicationImgUpdateOne) ClearImgURL() *PublicationImgUpdateOne {
	piuo.mutation.ClearImgURL()
	return piuo
}

// SetIsbn sets the "isbn" field.
func (piuo *PublicationImgUpdateOne) SetIsbn(i int) *PublicationImgUpdateOne {
	piuo.mutation.ResetIsbn()
	piuo.mutation.SetIsbn(i)
	return piuo
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (piuo *PublicationImgUpdateOne) SetNillableIsbn(i *int) *PublicationImgUpdateOne {
	if i != nil {
		piuo.SetIsbn(*i)
	}
	return piuo
}

// AddIsbn adds i to the "isbn" field.
func (piuo *PublicationImgUpdateOne) AddIsbn(i int) *PublicationImgUpdateOne {
	piuo.mutation.AddIsbn(i)
	return piuo
}

// SetImgEncode sets the "img_encode" field.
func (piuo *PublicationImgUpdateOne) SetImgEncode(s string) *PublicationImgUpdateOne {
	piuo.mutation.SetImgEncode(s)
	return piuo
}

// SetNillableImgEncode sets the "img_encode" field if the given value is not nil.
func (piuo *PublicationImgUpdateOne) SetNillableImgEncode(s *string) *PublicationImgUpdateOne {
	if s != nil {
		piuo.SetImgEncode(*s)
	}
	return piuo
}

// ClearImgEncode clears the value of the "img_encode" field.
func (piuo *PublicationImgUpdateOne) ClearImgEncode() *PublicationImgUpdateOne {
	piuo.mutation.ClearImgEncode()
	return piuo
}

// SetPublicationID sets the "publication_id" field.
func (piuo *PublicationImgUpdateOne) SetPublicationID(i int) *PublicationImgUpdateOne {
	piuo.mutation.ResetPublicationID()
	piuo.mutation.SetPublicationID(i)
	return piuo
}

// SetNillablePublicationID sets the "publication_id" field if the given value is not nil.
func (piuo *PublicationImgUpdateOne) SetNillablePublicationID(i *int) *PublicationImgUpdateOne {
	if i != nil {
		piuo.SetPublicationID(*i)
	}
	return piuo
}

// AddPublicationID adds i to the "publication_id" field.
func (piuo *PublicationImgUpdateOne) AddPublicationID(i int) *PublicationImgUpdateOne {
	piuo.mutation.AddPublicationID(i)
	return piuo
}

// ClearPublicationID clears the value of the "publication_id" field.
func (piuo *PublicationImgUpdateOne) ClearPublicationID() *PublicationImgUpdateOne {
	piuo.mutation.ClearPublicationID()
	return piuo
}

// SetMainFlag sets the "mainFlag" field.
func (piuo *PublicationImgUpdateOne) SetMainFlag(i int32) *PublicationImgUpdateOne {
	piuo.mutation.ResetMainFlag()
	piuo.mutation.SetMainFlag(i)
	return piuo
}

// SetNillableMainFlag sets the "mainFlag" field if the given value is not nil.
func (piuo *PublicationImgUpdateOne) SetNillableMainFlag(i *int32) *PublicationImgUpdateOne {
	if i != nil {
		piuo.SetMainFlag(*i)
	}
	return piuo
}

// AddMainFlag adds i to the "mainFlag" field.
func (piuo *PublicationImgUpdateOne) AddMainFlag(i int32) *PublicationImgUpdateOne {
	piuo.mutation.AddMainFlag(i)
	return piuo
}

// ClearMainFlag clears the value of the "mainFlag" field.
func (piuo *PublicationImgUpdateOne) ClearMainFlag() *PublicationImgUpdateOne {
	piuo.mutation.ClearMainFlag()
	return piuo
}

// Mutation returns the PublicationImgMutation object of the builder.
func (piuo *PublicationImgUpdateOne) Mutation() *PublicationImgMutation {
	return piuo.mutation
}

// Where appends a list predicates to the PublicationImgUpdate builder.
func (piuo *PublicationImgUpdateOne) Where(ps ...predicate.PublicationImg) *PublicationImgUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *PublicationImgUpdateOne) Select(field string, fields ...string) *PublicationImgUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated PublicationImg entity.
func (piuo *PublicationImgUpdateOne) Save(ctx context.Context) (*PublicationImg, error) {
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *PublicationImgUpdateOne) SaveX(ctx context.Context) *PublicationImg {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *PublicationImgUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *PublicationImgUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (piuo *PublicationImgUpdateOne) sqlSave(ctx context.Context) (_node *PublicationImg, err error) {
	_spec := sqlgraph.NewUpdateSpec(publicationimg.Table, publicationimg.Columns, sqlgraph.NewFieldSpec(publicationimg.FieldID, field.TypeInt))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PublicationImg.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, publicationimg.FieldID)
		for _, f := range fields {
			if !publicationimg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != publicationimg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.ImgURL(); ok {
		_spec.SetField(publicationimg.FieldImgURL, field.TypeString, value)
	}
	if piuo.mutation.ImgURLCleared() {
		_spec.ClearField(publicationimg.FieldImgURL, field.TypeString)
	}
	if value, ok := piuo.mutation.Isbn(); ok {
		_spec.SetField(publicationimg.FieldIsbn, field.TypeInt, value)
	}
	if value, ok := piuo.mutation.AddedIsbn(); ok {
		_spec.AddField(publicationimg.FieldIsbn, field.TypeInt, value)
	}
	if value, ok := piuo.mutation.ImgEncode(); ok {
		_spec.SetField(publicationimg.FieldImgEncode, field.TypeString, value)
	}
	if piuo.mutation.ImgEncodeCleared() {
		_spec.ClearField(publicationimg.FieldImgEncode, field.TypeString)
	}
	if value, ok := piuo.mutation.PublicationID(); ok {
		_spec.SetField(publicationimg.FieldPublicationID, field.TypeInt, value)
	}
	if value, ok := piuo.mutation.AddedPublicationID(); ok {
		_spec.AddField(publicationimg.FieldPublicationID, field.TypeInt, value)
	}
	if piuo.mutation.PublicationIDCleared() {
		_spec.ClearField(publicationimg.FieldPublicationID, field.TypeInt)
	}
	if value, ok := piuo.mutation.MainFlag(); ok {
		_spec.SetField(publicationimg.FieldMainFlag, field.TypeInt32, value)
	}
	if value, ok := piuo.mutation.AddedMainFlag(); ok {
		_spec.AddField(publicationimg.FieldMainFlag, field.TypeInt32, value)
	}
	if piuo.mutation.MainFlagCleared() {
		_spec.ClearField(publicationimg.FieldMainFlag, field.TypeInt32)
	}
	_node = &PublicationImg{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publicationimg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
