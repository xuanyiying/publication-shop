// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/publication-shop/app/catalog/ent/publicationdetail"
)

// PublicationDetail is the model entity for the PublicationDetail schema.
type PublicationDetail struct {
	config `json:"-"`
	// ID of the ent.
	// 详情ID
	ID int `json:"id,omitempty"`
	// 国际标准书号
	Isbn string `json:"isbn,omitempty"`
	// 详情
	DetailHTML string `json:"detail_html,omitempty"`
	// 详情
	DetailImg string `json:"detail_img,omitempty"`
	// 出版物ID
	PublicationID int `json:"publication_id,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PublicationDetail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case publicationdetail.FieldID, publicationdetail.FieldPublicationID:
			values[i] = new(sql.NullInt64)
		case publicationdetail.FieldIsbn, publicationdetail.FieldDetailHTML, publicationdetail.FieldDetailImg:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PublicationDetail fields.
func (pd *PublicationDetail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case publicationdetail.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pd.ID = int(value.Int64)
		case publicationdetail.FieldIsbn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isbn", values[i])
			} else if value.Valid {
				pd.Isbn = value.String
			}
		case publicationdetail.FieldDetailHTML:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail_html", values[i])
			} else if value.Valid {
				pd.DetailHTML = value.String
			}
		case publicationdetail.FieldDetailImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail_img", values[i])
			} else if value.Valid {
				pd.DetailImg = value.String
			}
		case publicationdetail.FieldPublicationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field publication_id", values[i])
			} else if value.Valid {
				pd.PublicationID = int(value.Int64)
			}
		default:
			pd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PublicationDetail.
// This includes values selected through modifiers, order, etc.
func (pd *PublicationDetail) Value(name string) (ent.Value, error) {
	return pd.selectValues.Get(name)
}

// Update returns a builder for updating this PublicationDetail.
// Note that you need to call PublicationDetail.Unwrap() before calling this method if this PublicationDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (pd *PublicationDetail) Update() *PublicationDetailUpdateOne {
	return NewPublicationDetailClient(pd.config).UpdateOne(pd)
}

// Unwrap unwraps the PublicationDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pd *PublicationDetail) Unwrap() *PublicationDetail {
	_tx, ok := pd.config.driver.(*txDriver)
	if !ok {
		panic("ent: PublicationDetail is not a transactional entity")
	}
	pd.config.driver = _tx.drv
	return pd
}

// String implements the fmt.Stringer.
func (pd *PublicationDetail) String() string {
	var builder strings.Builder
	builder.WriteString("PublicationDetail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pd.ID))
	builder.WriteString("isbn=")
	builder.WriteString(pd.Isbn)
	builder.WriteString(", ")
	builder.WriteString("detail_html=")
	builder.WriteString(pd.DetailHTML)
	builder.WriteString(", ")
	builder.WriteString("detail_img=")
	builder.WriteString(pd.DetailImg)
	builder.WriteString(", ")
	builder.WriteString("publication_id=")
	builder.WriteString(fmt.Sprintf("%v", pd.PublicationID))
	builder.WriteByte(')')
	return builder.String()
}

// PublicationDetails is a parsable slice of PublicationDetail.
type PublicationDetails []*PublicationDetail
