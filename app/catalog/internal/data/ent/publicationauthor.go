// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/publication-shop/app/catalog/ent/publicationauthor"
)

// PublicationAuthor is the model entity for the PublicationAuthor schema.
type PublicationAuthor struct {
	config `json:"-"`
	// ID of the ent.
	// 作者ID
	ID int `json:"id,omitempty"`
	// 国际标准书号
	Isbn string `json:"isbn,omitempty"`
	// 出版物ID
	PublicationID int `json:"publication_id,omitempty"`
	// 著者姓名
	Author string `json:"author,omitempty"`
	// 作者简介
	AuthorAbout  string `json:"author_about,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PublicationAuthor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case publicationauthor.FieldID, publicationauthor.FieldPublicationID:
			values[i] = new(sql.NullInt64)
		case publicationauthor.FieldIsbn, publicationauthor.FieldAuthor, publicationauthor.FieldAuthorAbout:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PublicationAuthor fields.
func (pa *PublicationAuthor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case publicationauthor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pa.ID = int(value.Int64)
		case publicationauthor.FieldIsbn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isbn", values[i])
			} else if value.Valid {
				pa.Isbn = value.String
			}
		case publicationauthor.FieldPublicationID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field publication_id", values[i])
			} else if value.Valid {
				pa.PublicationID = int(value.Int64)
			}
		case publicationauthor.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				pa.Author = value.String
			}
		case publicationauthor.FieldAuthorAbout:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_about", values[i])
			} else if value.Valid {
				pa.AuthorAbout = value.String
			}
		default:
			pa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PublicationAuthor.
// This includes values selected through modifiers, order, etc.
func (pa *PublicationAuthor) Value(name string) (ent.Value, error) {
	return pa.selectValues.Get(name)
}

// Update returns a builder for updating this PublicationAuthor.
// Note that you need to call PublicationAuthor.Unwrap() before calling this method if this PublicationAuthor
// was returned from a transaction, and the transaction was committed or rolled back.
func (pa *PublicationAuthor) Update() *PublicationAuthorUpdateOne {
	return NewPublicationAuthorClient(pa.config).UpdateOne(pa)
}

// Unwrap unwraps the PublicationAuthor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pa *PublicationAuthor) Unwrap() *PublicationAuthor {
	_tx, ok := pa.config.driver.(*txDriver)
	if !ok {
		panic("ent: PublicationAuthor is not a transactional entity")
	}
	pa.config.driver = _tx.drv
	return pa
}

// String implements the fmt.Stringer.
func (pa *PublicationAuthor) String() string {
	var builder strings.Builder
	builder.WriteString("PublicationAuthor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pa.ID))
	builder.WriteString("isbn=")
	builder.WriteString(pa.Isbn)
	builder.WriteString(", ")
	builder.WriteString("publication_id=")
	builder.WriteString(fmt.Sprintf("%v", pa.PublicationID))
	builder.WriteString(", ")
	builder.WriteString("author=")
	builder.WriteString(pa.Author)
	builder.WriteString(", ")
	builder.WriteString("author_about=")
	builder.WriteString(pa.AuthorAbout)
	builder.WriteByte(')')
	return builder.String()
}

// PublicationAuthors is a parsable slice of PublicationAuthor.
type PublicationAuthors []*PublicationAuthor
