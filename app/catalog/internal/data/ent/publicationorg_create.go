// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/publication-shop/app/catalog/ent/publicationorg"
)

// PublicationOrgCreate is the builder for creating a PublicationOrg entity.
type PublicationOrgCreate struct {
	config
	mutation *PublicationOrgMutation
	hooks    []Hook
}

// SetOrgCode sets the "org_code" field.
func (poc *PublicationOrgCreate) SetOrgCode(s string) *PublicationOrgCreate {
	poc.mutation.SetOrgCode(s)
	return poc
}

// SetOrgName sets the "org_name" field.
func (poc *PublicationOrgCreate) SetOrgName(s string) *PublicationOrgCreate {
	poc.mutation.SetOrgName(s)
	return poc
}

// SetNillableOrgName sets the "org_name" field if the given value is not nil.
func (poc *PublicationOrgCreate) SetNillableOrgName(s *string) *PublicationOrgCreate {
	if s != nil {
		poc.SetOrgName(*s)
	}
	return poc
}

// SetOrgAddress sets the "org_address" field.
func (poc *PublicationOrgCreate) SetOrgAddress(s string) *PublicationOrgCreate {
	poc.mutation.SetOrgAddress(s)
	return poc
}

// SetNillableOrgAddress sets the "org_address" field if the given value is not nil.
func (poc *PublicationOrgCreate) SetNillableOrgAddress(s *string) *PublicationOrgCreate {
	if s != nil {
		poc.SetOrgAddress(*s)
	}
	return poc
}

// SetModifiedAt sets the "modified_at" field.
func (poc *PublicationOrgCreate) SetModifiedAt(t time.Time) *PublicationOrgCreate {
	poc.mutation.SetModifiedAt(t)
	return poc
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (poc *PublicationOrgCreate) SetNillableModifiedAt(t *time.Time) *PublicationOrgCreate {
	if t != nil {
		poc.SetModifiedAt(*t)
	}
	return poc
}

// SetCreatedAt sets the "created_at" field.
func (poc *PublicationOrgCreate) SetCreatedAt(t time.Time) *PublicationOrgCreate {
	poc.mutation.SetCreatedAt(t)
	return poc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (poc *PublicationOrgCreate) SetNillableCreatedAt(t *time.Time) *PublicationOrgCreate {
	if t != nil {
		poc.SetCreatedAt(*t)
	}
	return poc
}

// SetID sets the "id" field.
func (poc *PublicationOrgCreate) SetID(i int) *PublicationOrgCreate {
	poc.mutation.SetID(i)
	return poc
}

// Mutation returns the PublicationOrgMutation object of the builder.
func (poc *PublicationOrgCreate) Mutation() *PublicationOrgMutation {
	return poc.mutation
}

// Save creates the PublicationOrg in the database.
func (poc *PublicationOrgCreate) Save(ctx context.Context) (*PublicationOrg, error) {
	return withHooks(ctx, poc.sqlSave, poc.mutation, poc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (poc *PublicationOrgCreate) SaveX(ctx context.Context) *PublicationOrg {
	v, err := poc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (poc *PublicationOrgCreate) Exec(ctx context.Context) error {
	_, err := poc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (poc *PublicationOrgCreate) ExecX(ctx context.Context) {
	if err := poc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (poc *PublicationOrgCreate) check() error {
	if _, ok := poc.mutation.OrgCode(); !ok {
		return &ValidationError{Name: "org_code", err: errors.New(`ent: missing required field "PublicationOrg.org_code"`)}
	}
	return nil
}

func (poc *PublicationOrgCreate) sqlSave(ctx context.Context) (*PublicationOrg, error) {
	if err := poc.check(); err != nil {
		return nil, err
	}
	_node, _spec := poc.createSpec()
	if err := sqlgraph.CreateNode(ctx, poc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	poc.mutation.id = &_node.ID
	poc.mutation.done = true
	return _node, nil
}

func (poc *PublicationOrgCreate) createSpec() (*PublicationOrg, *sqlgraph.CreateSpec) {
	var (
		_node = &PublicationOrg{config: poc.config}
		_spec = sqlgraph.NewCreateSpec(publicationorg.Table, sqlgraph.NewFieldSpec(publicationorg.FieldID, field.TypeInt))
	)
	if id, ok := poc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := poc.mutation.OrgCode(); ok {
		_spec.SetField(publicationorg.FieldOrgCode, field.TypeString, value)
		_node.OrgCode = value
	}
	if value, ok := poc.mutation.OrgName(); ok {
		_spec.SetField(publicationorg.FieldOrgName, field.TypeString, value)
		_node.OrgName = value
	}
	if value, ok := poc.mutation.OrgAddress(); ok {
		_spec.SetField(publicationorg.FieldOrgAddress, field.TypeString, value)
		_node.OrgAddress = value
	}
	if value, ok := poc.mutation.ModifiedAt(); ok {
		_spec.SetField(publicationorg.FieldModifiedAt, field.TypeTime, value)
		_node.ModifiedAt = value
	}
	if value, ok := poc.mutation.CreatedAt(); ok {
		_spec.SetField(publicationorg.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// PublicationOrgCreateBulk is the builder for creating many PublicationOrg entities in bulk.
type PublicationOrgCreateBulk struct {
	config
	err      error
	builders []*PublicationOrgCreate
}

// Save creates the PublicationOrg entities in the database.
func (pocb *PublicationOrgCreateBulk) Save(ctx context.Context) ([]*PublicationOrg, error) {
	if pocb.err != nil {
		return nil, pocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pocb.builders))
	nodes := make([]*PublicationOrg, len(pocb.builders))
	mutators := make([]Mutator, len(pocb.builders))
	for i := range pocb.builders {
		func(i int, root context.Context) {
			builder := pocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PublicationOrgMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pocb *PublicationOrgCreateBulk) SaveX(ctx context.Context) []*PublicationOrg {
	v, err := pocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pocb *PublicationOrgCreateBulk) Exec(ctx context.Context) error {
	_, err := pocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pocb *PublicationOrgCreateBulk) ExecX(ctx context.Context) {
	if err := pocb.Exec(ctx); err != nil {
		panic(err)
	}
}
