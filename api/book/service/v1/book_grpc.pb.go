// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: api/book/service/v1/book.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Book_ListBook_FullMethodName           = "/book.service.v1.Book/ListBook"
	Book_CreateBook_FullMethodName         = "/book.service.v1.Book/CreateBook"
	Book_GetBook_FullMethodName            = "/book.service.v1.Book/GetBook"
	Book_GetBookByIsbn_FullMethodName      = "/book.service.v1.Book/GetBookByIsbn"
	Book_UpdateBookQuantity_FullMethodName = "/book.service.v1.Book/UpdateBookQuantity"
)

// BookClient is the client API for Book service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookClient interface {
	ListBook(ctx context.Context, in *ListBookReq, opts ...grpc.CallOption) (*ListBookReply, error)
	CreateBook(ctx context.Context, in *CreateBookReq, opts ...grpc.CallOption) (*CreateBookReply, error)
	GetBook(ctx context.Context, in *GetBookReq, opts ...grpc.CallOption) (*GetBookReply, error)
	GetBookByIsbn(ctx context.Context, in *GetBookReq, opts ...grpc.CallOption) (*GetBookReply, error)
	UpdateBookQuantity(ctx context.Context, in *UpdateBookQuantityReq, opts ...grpc.CallOption) (*UpdateBookQuantityReply, error)
}

type bookClient struct {
	cc grpc.ClientConnInterface
}

func NewBookClient(cc grpc.ClientConnInterface) BookClient {
	return &bookClient{cc}
}

func (c *bookClient) ListBook(ctx context.Context, in *ListBookReq, opts ...grpc.CallOption) (*ListBookReply, error) {
	out := new(ListBookReply)
	err := c.cc.Invoke(ctx, Book_ListBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) CreateBook(ctx context.Context, in *CreateBookReq, opts ...grpc.CallOption) (*CreateBookReply, error) {
	out := new(CreateBookReply)
	err := c.cc.Invoke(ctx, Book_CreateBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) GetBook(ctx context.Context, in *GetBookReq, opts ...grpc.CallOption) (*GetBookReply, error) {
	out := new(GetBookReply)
	err := c.cc.Invoke(ctx, Book_GetBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) GetBookByIsbn(ctx context.Context, in *GetBookReq, opts ...grpc.CallOption) (*GetBookReply, error) {
	out := new(GetBookReply)
	err := c.cc.Invoke(ctx, Book_GetBookByIsbn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) UpdateBookQuantity(ctx context.Context, in *UpdateBookQuantityReq, opts ...grpc.CallOption) (*UpdateBookQuantityReply, error) {
	out := new(UpdateBookQuantityReply)
	err := c.cc.Invoke(ctx, Book_UpdateBookQuantity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookServer is the server API for Book service.
// All implementations must embed UnimplementedBookServer
// for forward compatibility
type BookServer interface {
	ListBook(context.Context, *ListBookReq) (*ListBookReply, error)
	CreateBook(context.Context, *CreateBookReq) (*CreateBookReply, error)
	GetBook(context.Context, *GetBookReq) (*GetBookReply, error)
	GetBookByIsbn(context.Context, *GetBookReq) (*GetBookReply, error)
	UpdateBookQuantity(context.Context, *UpdateBookQuantityReq) (*UpdateBookQuantityReply, error)
	mustEmbedUnimplementedBookServer()
}

// UnimplementedBookServer must be embedded to have forward compatible implementations.
type UnimplementedBookServer struct {
}

func (UnimplementedBookServer) ListBook(context.Context, *ListBookReq) (*ListBookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBook not implemented")
}
func (UnimplementedBookServer) CreateBook(context.Context, *CreateBookReq) (*CreateBookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedBookServer) GetBook(context.Context, *GetBookReq) (*GetBookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBook not implemented")
}
func (UnimplementedBookServer) GetBookByIsbn(context.Context, *GetBookReq) (*GetBookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookByIsbn not implemented")
}
func (UnimplementedBookServer) UpdateBookQuantity(context.Context, *UpdateBookQuantityReq) (*UpdateBookQuantityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBookQuantity not implemented")
}
func (UnimplementedBookServer) mustEmbedUnimplementedBookServer() {}

// UnsafeBookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServer will
// result in compilation errors.
type UnsafeBookServer interface {
	mustEmbedUnimplementedBookServer()
}

func RegisterBookServer(s grpc.ServiceRegistrar, srv BookServer) {
	s.RegisterService(&Book_ServiceDesc, srv)
}

func _Book_ListBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).ListBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Book_ListBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).ListBook(ctx, req.(*ListBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Book_CreateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).CreateBook(ctx, req.(*CreateBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_GetBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Book_GetBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetBook(ctx, req.(*GetBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_GetBookByIsbn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetBookByIsbn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Book_GetBookByIsbn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetBookByIsbn(ctx, req.(*GetBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_UpdateBookQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookQuantityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).UpdateBookQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Book_UpdateBookQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).UpdateBookQuantity(ctx, req.(*UpdateBookQuantityReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Book_ServiceDesc is the grpc.ServiceDesc for Book service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Book_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "book.service.v1.Book",
	HandlerType: (*BookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBook",
			Handler:    _Book_ListBook_Handler,
		},
		{
			MethodName: "CreateBook",
			Handler:    _Book_CreateBook_Handler,
		},
		{
			MethodName: "GetBook",
			Handler:    _Book_GetBook_Handler,
		},
		{
			MethodName: "GetBookByIsbn",
			Handler:    _Book_GetBookByIsbn_Handler,
		},
		{
			MethodName: "UpdateBookQuantity",
			Handler:    _Book_UpdateBookQuantity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/book/service/v1/book.proto",
}
