// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShopAdminClient is the client API for ShopAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopAdminClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error)
	ListBook(ctx context.Context, in *ListBookReq, opts ...grpc.CallOption) (*ListBookReply, error)
	CreateBook(ctx context.Context, in *CreateBookReq, opts ...grpc.CallOption) (*CreateBookReply, error)
	UpdateBook(ctx context.Context, in *UpdateBookReq, opts ...grpc.CallOption) (*UpdateBookReply, error)
	DeleteBook(ctx context.Context, in *DeleteBookReq, opts ...grpc.CallOption) (*DeleteBookReply, error)
	ListOrder(ctx context.Context, in *ListOrderReq, opts ...grpc.CallOption) (*ListOrderReply, error)
	GetOrder(ctx context.Context, in *GetOrderReq, opts ...grpc.CallOption) (*GetOrderReply, error)
	ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserReply, error)
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserReply, error)
}

type shopAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewShopAdminClient(cc grpc.ClientConnInterface) ShopAdminClient {
	return &shopAdminClient{cc}
}

func (c *shopAdminClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.ShopAdmin/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.ShopAdmin/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminClient) ListBook(ctx context.Context, in *ListBookReq, opts ...grpc.CallOption) (*ListBookReply, error) {
	out := new(ListBookReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.ShopAdmin/ListBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminClient) CreateBook(ctx context.Context, in *CreateBookReq, opts ...grpc.CallOption) (*CreateBookReply, error) {
	out := new(CreateBookReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.ShopAdmin/CreateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminClient) UpdateBook(ctx context.Context, in *UpdateBookReq, opts ...grpc.CallOption) (*UpdateBookReply, error) {
	out := new(UpdateBookReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.ShopAdmin/UpdateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminClient) DeleteBook(ctx context.Context, in *DeleteBookReq, opts ...grpc.CallOption) (*DeleteBookReply, error) {
	out := new(DeleteBookReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.ShopAdmin/DeleteBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminClient) ListOrder(ctx context.Context, in *ListOrderReq, opts ...grpc.CallOption) (*ListOrderReply, error) {
	out := new(ListOrderReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.ShopAdmin/ListOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminClient) GetOrder(ctx context.Context, in *GetOrderReq, opts ...grpc.CallOption) (*GetOrderReply, error) {
	out := new(GetOrderReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.ShopAdmin/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminClient) ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserReply, error) {
	out := new(ListUserReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.ShopAdmin/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopAdminClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, "/shop.admin.v1.ShopAdmin/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopAdminServer is the server API for ShopAdmin service.
// All implementations must embed UnimplementedShopAdminServer
// for forward compatibility
type ShopAdminServer interface {
	Login(context.Context, *LoginReq) (*LoginReply, error)
	Logout(context.Context, *LogoutReq) (*LogoutReply, error)
	ListBook(context.Context, *ListBookReq) (*ListBookReply, error)
	CreateBook(context.Context, *CreateBookReq) (*CreateBookReply, error)
	UpdateBook(context.Context, *UpdateBookReq) (*UpdateBookReply, error)
	DeleteBook(context.Context, *DeleteBookReq) (*DeleteBookReply, error)
	ListOrder(context.Context, *ListOrderReq) (*ListOrderReply, error)
	GetOrder(context.Context, *GetOrderReq) (*GetOrderReply, error)
	ListUser(context.Context, *ListUserReq) (*ListUserReply, error)
	GetUser(context.Context, *GetUserReq) (*GetUserReply, error)
	mustEmbedUnimplementedShopAdminServer()
}

// UnimplementedShopAdminServer must be embedded to have forward compatible implementations.
type UnimplementedShopAdminServer struct {
}

func (UnimplementedShopAdminServer) Login(context.Context, *LoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedShopAdminServer) Logout(context.Context, *LogoutReq) (*LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedShopAdminServer) ListBook(context.Context, *ListBookReq) (*ListBookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBook not implemented")
}
func (UnimplementedShopAdminServer) CreateBook(context.Context, *CreateBookReq) (*CreateBookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedShopAdminServer) UpdateBook(context.Context, *UpdateBookReq) (*UpdateBookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBook not implemented")
}
func (UnimplementedShopAdminServer) DeleteBook(context.Context, *DeleteBookReq) (*DeleteBookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBook not implemented")
}
func (UnimplementedShopAdminServer) ListOrder(context.Context, *ListOrderReq) (*ListOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrder not implemented")
}
func (UnimplementedShopAdminServer) GetOrder(context.Context, *GetOrderReq) (*GetOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedShopAdminServer) ListUser(context.Context, *ListUserReq) (*ListUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedShopAdminServer) GetUser(context.Context, *GetUserReq) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedShopAdminServer) mustEmbedUnimplementedShopAdminServer() {}

// UnsafeShopAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopAdminServer will
// result in compilation errors.
type UnsafeShopAdminServer interface {
	mustEmbedUnimplementedShopAdminServer()
}

func RegisterShopAdminServer(s grpc.ServiceRegistrar, srv ShopAdminServer) {
	s.RegisterService(&ShopAdmin_ServiceDesc, srv)
}

func _ShopAdmin_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAdminServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.ShopAdmin/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAdminServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopAdmin_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAdminServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.ShopAdmin/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAdminServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopAdmin_ListBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAdminServer).ListBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.ShopAdmin/ListBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAdminServer).ListBook(ctx, req.(*ListBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopAdmin_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAdminServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.ShopAdmin/CreateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAdminServer).CreateBook(ctx, req.(*CreateBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopAdmin_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAdminServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.ShopAdmin/UpdateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAdminServer).UpdateBook(ctx, req.(*UpdateBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopAdmin_DeleteBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAdminServer).DeleteBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.ShopAdmin/DeleteBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAdminServer).DeleteBook(ctx, req.(*DeleteBookReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopAdmin_ListOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAdminServer).ListOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.ShopAdmin/ListOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAdminServer).ListOrder(ctx, req.(*ListOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopAdmin_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAdminServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.ShopAdmin/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAdminServer).GetOrder(ctx, req.(*GetOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopAdmin_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAdminServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.ShopAdmin/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAdminServer).ListUser(ctx, req.(*ListUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopAdmin_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopAdminServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shop.admin.v1.ShopAdmin/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopAdminServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopAdmin_ServiceDesc is the grpc.ServiceDesc for ShopAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shop.admin.v1.ShopAdmin",
	HandlerType: (*ShopAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _ShopAdmin_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _ShopAdmin_Logout_Handler,
		},
		{
			MethodName: "ListBook",
			Handler:    _ShopAdmin_ListBook_Handler,
		},
		{
			MethodName: "CreateBook",
			Handler:    _ShopAdmin_CreateBook_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _ShopAdmin_UpdateBook_Handler,
		},
		{
			MethodName: "DeleteBook",
			Handler:    _ShopAdmin_DeleteBook_Handler,
		},
		{
			MethodName: "ListOrder",
			Handler:    _ShopAdmin_ListOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _ShopAdmin_GetOrder_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _ShopAdmin_ListUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _ShopAdmin_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/shop_admin.proto",
}
