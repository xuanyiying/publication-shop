// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ShopAdminHTTPServer interface {
	CreatePublication(context.Context, *CreatePublicationReq) (*CreatePublicationReply, error)
	DeletePublication(context.Context, *DeletePublicationReq) (*DeletePublicationReply, error)
	GetOrder(context.Context, *GetOrderReq) (*GetOrderReply, error)
	GetUser(context.Context, *GetUserReq) (*GetUserReply, error)
	ListPublication(context.Context, *ListPublicationReq) (*ListPublicationReply, error)
	ListOrder(context.Context, *ListOrderReq) (*ListOrderReply, error)
	ListUser(context.Context, *ListUserReq) (*ListUserReply, error)
	Login(context.Context, *LoginReq) (*LoginReply, error)
	Logout(context.Context, *LogoutReq) (*LogoutReply, error)
	UpdatePublication(context.Context, *UpdatePublicationReq) (*UpdatePublicationReply, error)
}

func RegisterShopAdminHTTPServer(s *http.Server, srv ShopAdminHTTPServer) {
	r := s.Route("/")
	r.POST("/admin/v1/login", _ShopAdmin_Login0_HTTP_Handler(srv))
	r.POST("/admin/v1/logout", _ShopAdmin_Logout0_HTTP_Handler(srv))
	r.GET("/admin/v1/catalog/Publications", _ShopAdmin_ListPublication0_HTTP_Handler(srv))
	r.POST("/admin/v1/catalog/Publications", _ShopAdmin_CreatePublication0_HTTP_Handler(srv))
	r.PUT("/admin/v1/catalog/Publications/{id}", _ShopAdmin_UpdatePublication0_HTTP_Handler(srv))
	r.DELETE("/admin/v1/catalog/Publications/{id}", _ShopAdmin_DeletePublication0_HTTP_Handler(srv))
	r.GET("/admin/v1/orders", _ShopAdmin_ListOrder0_HTTP_Handler(srv))
	r.GET("/admin/v1/orders", _ShopAdmin_GetOrder0_HTTP_Handler(srv))
	r.GET("/admin/v1/users", _ShopAdmin_ListUser0_HTTP_Handler(srv))
	r.GET("/admin/v1/users/{id}", _ShopAdmin_GetUser0_HTTP_Handler(srv))
}

func _ShopAdmin_Login0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/shop.admin.v1.ShopAdmin/Login")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_Logout0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/shop.admin.v1.ShopAdmin/Logout")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_ListPublication0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPublicationReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/shop.admin.v1.ShopAdmin/ListPublication")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPublication(ctx, req.(*ListPublicationReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPublicationReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_CreatePublication0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreatePublicationReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/shop.admin.v1.ShopAdmin/CreatePublication")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreatePublication(ctx, req.(*CreatePublicationReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreatePublicationReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_UpdatePublication0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePublicationReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/shop.admin.v1.ShopAdmin/UpdatePublication")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePublication(ctx, req.(*UpdatePublicationReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdatePublicationReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_DeletePublication0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeletePublicationReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/shop.admin.v1.ShopAdmin/DeletePublication")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePublication(ctx, req.(*DeletePublicationReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeletePublicationReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_ListOrder0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOrderReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/shop.admin.v1.ShopAdmin/ListOrder")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOrder(ctx, req.(*ListOrderReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOrderReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_GetOrder0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOrderReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/shop.admin.v1.ShopAdmin/GetOrder")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrder(ctx, req.(*GetOrderReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOrderReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_ListUser0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/shop.admin.v1.ShopAdmin/ListUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUser(ctx, req.(*ListUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserReply)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_GetUser0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/shop.admin.v1.ShopAdmin/GetUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserReply)
		return ctx.Result(200, reply)
	}
}

type ShopAdminHTTPClient interface {
	CreatePublication(ctx context.Context, req *CreatePublicationReq, opts ...http.CallOption) (rsp *CreatePublicationReply, err error)
	DeletePublication(ctx context.Context, req *DeletePublicationReq, opts ...http.CallOption) (rsp *DeletePublicationReply, err error)
	GetOrder(ctx context.Context, req *GetOrderReq, opts ...http.CallOption) (rsp *GetOrderReply, err error)
	GetUser(ctx context.Context, req *GetUserReq, opts ...http.CallOption) (rsp *GetUserReply, err error)
	ListPublication(ctx context.Context, req *ListPublicationReq, opts ...http.CallOption) (rsp *ListPublicationReply, err error)
	ListOrder(ctx context.Context, req *ListOrderReq, opts ...http.CallOption) (rsp *ListOrderReply, err error)
	ListUser(ctx context.Context, req *ListUserReq, opts ...http.CallOption) (rsp *ListUserReply, err error)
	Login(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	Logout(ctx context.Context, req *LogoutReq, opts ...http.CallOption) (rsp *LogoutReply, err error)
	UpdatePublication(ctx context.Context, req *UpdatePublicationReq, opts ...http.CallOption) (rsp *UpdatePublicationReply, err error)
}

type ShopAdminHTTPClientImpl struct {
	cc *http.Client
}

func NewShopAdminHTTPClient(client *http.Client) ShopAdminHTTPClient {
	return &ShopAdminHTTPClientImpl{client}
}

func (c *ShopAdminHTTPClientImpl) CreatePublication(ctx context.Context, in *CreatePublicationReq, opts ...http.CallOption) (*CreatePublicationReply, error) {
	var out CreatePublicationReply
	pattern := "/admin/v1/catalog/Publications"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/shop.admin.v1.ShopAdmin/CreatePublication"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) DeletePublication(ctx context.Context, in *DeletePublicationReq, opts ...http.CallOption) (*DeletePublicationReply, error) {
	var out DeletePublicationReply
	pattern := "/admin/v1/catalog/Publications/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/shop.admin.v1.ShopAdmin/DeletePublication"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) GetOrder(ctx context.Context, in *GetOrderReq, opts ...http.CallOption) (*GetOrderReply, error) {
	var out GetOrderReply
	pattern := "/admin/v1/orders"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/shop.admin.v1.ShopAdmin/GetOrder"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) GetUser(ctx context.Context, in *GetUserReq, opts ...http.CallOption) (*GetUserReply, error) {
	var out GetUserReply
	pattern := "/admin/v1/users/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/shop.admin.v1.ShopAdmin/GetUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) ListPublication(ctx context.Context, in *ListPublicationReq, opts ...http.CallOption) (*ListPublicationReply, error) {
	var out ListPublicationReply
	pattern := "/admin/v1/catalog/Publications"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/shop.admin.v1.ShopAdmin/ListPublication"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) ListOrder(ctx context.Context, in *ListOrderReq, opts ...http.CallOption) (*ListOrderReply, error) {
	var out ListOrderReply
	pattern := "/admin/v1/orders"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/shop.admin.v1.ShopAdmin/ListOrder"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) ListUser(ctx context.Context, in *ListUserReq, opts ...http.CallOption) (*ListUserReply, error) {
	var out ListUserReply
	pattern := "/admin/v1/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/shop.admin.v1.ShopAdmin/ListUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/admin/v1/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/shop.admin.v1.ShopAdmin/Login"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) Logout(ctx context.Context, in *LogoutReq, opts ...http.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	pattern := "/admin/v1/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/shop.admin.v1.ShopAdmin/Logout"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) UpdatePublication(ctx context.Context, in *UpdatePublicationReq, opts ...http.CallOption) (*UpdatePublicationReply, error) {
	var out UpdatePublicationReply
	pattern := "/admin/v1/catalog/Publications/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/shop.admin.v1.ShopAdmin/UpdatePublication"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
